package net.civeira.phylax.features.access.securityscope.domain.valueobject;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeKindOptions;

class KindVOUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test value object contruction for property kind of security scope ")
  void test_kind_v_o_builder() {
    Assertions.assertThrows(ConstraintException.class, () -> KindVO.tryFrom("_READ_"));
    Assertions.assertEquals(SecurityScopeKindOptions.READ,
        KindVO.tryFrom("READ").getValue().orElse(null));
    Assertions.assertFalse(KindVO.nullValue().getValue().isPresent(),
        "A empty vo should have a null value");
    Assertions.assertFalse(KindVO.tryFrom(null).getValue().isPresent(),
        "With a null value, no present result");
    Assertions.assertEquals(SecurityScopeKindOptions.READ,
        KindVO.from(SecurityScopeKindOptions.READ).getValue().orElse(null));
    Object falingInstance = new Object() {};
    Assertions.assertThrows(ConstraintException.class, () -> KindVO.tryFrom(falingInstance));
    Assertions.assertEquals("[" + SecurityScopeKindOptions.READ + "]",
        KindVO.from(SecurityScopeKindOptions.READ).toString());
  }
}
