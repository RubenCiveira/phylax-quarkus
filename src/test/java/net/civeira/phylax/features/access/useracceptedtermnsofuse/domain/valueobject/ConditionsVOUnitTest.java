package net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseReference;

class ConditionsVOUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test value object contruction for property conditions of user accepted termns of use ")
  void test_conditions_v_o_builder() {
    ConstraintFailList fails = new ConstraintFailList();
    Assertions.assertEquals("10", ConditionsVO.fromReference("10").getConditionsUid(),
        "The builder must store the reference value");
    Assertions.assertEquals("11", ConditionsVO.tryFromReference("11").getConditionsUid(),
        "The builder must store the reference value");
    Assertions.assertEquals("12", ConditionsVO.tryFromReference("12", fails).getConditionsUid(),
        "The builder must store the reference value");
    Assertions.assertTrue(fails.isEmpty());
    Assertions.assertThrows(ConstraintException.class, () -> ConditionsVO.tryFrom(null));
    Assertions.assertEquals(TenantTermsOfUseReference.of("one"),
        ConditionsVO.from(TenantTermsOfUseReference.of("one")).getConditions());
    Assertions.assertThrows(ConstraintException.class, () -> ConditionsVO.tryFrom(new Object() {}));
    Assertions.assertEquals("[" + TenantTermsOfUseReference.of("one") + "]",
        ConditionsVO.from(TenantTermsOfUseReference.of("one")).toString());
  }
}
