package net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;

class TenantVOUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test value object contruction for property tenant of tenant terms of use ")
  void test_tenant_v_o_builder() {
    ConstraintFailList fails = new ConstraintFailList();
    Assertions.assertEquals("10", TenantVO.fromReference("10").getReferenceValue(),
        "The builder must store the reference value");
    Assertions.assertEquals("11", TenantVO.tryFromReference("11").getReferenceValue(),
        "The builder must store the reference value");
    Assertions.assertEquals("12", TenantVO.tryFromReference("12", fails).getReferenceValue(),
        "The builder must store the reference value");
    Assertions.assertTrue(fails.isEmpty());
    Assertions.assertThrows(ConstraintException.class, () -> TenantVO.tryFrom(null));
    Assertions.assertEquals(TenantReference.of("one"),
        TenantVO.from(TenantReference.of("one")).getValue());
    Assertions.assertThrows(ConstraintException.class, () -> TenantVO.tryFrom(new Object() {}));
    Assertions.assertEquals("[" + TenantReference.of("one") + "]",
        TenantVO.from(TenantReference.of("one")).toString());
  }
}
