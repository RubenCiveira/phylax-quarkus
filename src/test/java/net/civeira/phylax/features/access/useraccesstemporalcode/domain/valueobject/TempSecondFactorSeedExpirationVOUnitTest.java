package net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject;

import java.time.LocalDateTime;
import java.time.ZoneId;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import net.civeira.phylax.common.exception.ConstraintException;

class TempSecondFactorSeedExpirationVOUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test value object contruction for property temp second factor seed expiration of user access temporal code ")
  void test_temp_second_factor_seed_expiration_v_o_builder() {
    Assertions.assertFalse(TempSecondFactorSeedExpirationVO.nullValue()
        .getTempSecondFactorSeedExpiration().isPresent(), "A empty vo should have a null value");
    Assertions.assertFalse(TempSecondFactorSeedExpirationVO.tryFrom(null)
        .getTempSecondFactorSeedExpiration().isPresent(), "With a null value, no present result");
    Assertions.assertEquals(
        LocalDateTime.of(1980, 8, 20, 0, 0).atZone(ZoneId.of("Europe/Madrid")).toOffsetDateTime(),
        TempSecondFactorSeedExpirationVO.from(LocalDateTime.of(1980, 8, 20, 0, 0)
            .atZone(ZoneId.of("Europe/Madrid")).toOffsetDateTime())
            .getTempSecondFactorSeedExpiration().orElse(null));
    Object falingInstance = new Object() {};
    Assertions.assertThrows(ConstraintException.class,
        () -> TempSecondFactorSeedExpirationVO.tryFrom(falingInstance));
    Assertions.assertEquals(
        "[" + LocalDateTime.of(1980, 8, 20, 0, 0).atZone(ZoneId.of("Europe/Madrid"))
            .toOffsetDateTime() + "]",
        TempSecondFactorSeedExpirationVO.from(LocalDateTime.of(1980, 8, 20, 0, 0)
            .atZone(ZoneId.of("Europe/Madrid")).toOffsetDateTime()).toString());
  }
}
