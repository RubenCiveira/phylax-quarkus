package net.civeira.phylax.features.access.user.domain.valueobject;

import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.common.exception.ConstraintException;

class SecondFactorSeedVOUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test value object contruction for property second factor seed of user ")
  void test_second_factor_seed_v_o_builder() {
    Assertions.assertFalse(
        SecondFactorSeedVO.nullValue().getCypheredSecondFactorSeed(null).isPresent(),
        "A empty vo should have a null value");
    Assertions.assertFalse(
        SecondFactorSeedVO.tryFrom(null).getCypheredSecondFactorSeed(null).isPresent(),
        "With a null value, no present result");
    Assertions.assertEquals("null", SecondFactorSeedVO.nullValue().toString());
    AesCipherService cypher = Mockito.mock(AesCipherService.class);
    Mockito.when(cypher.encryptForAll("one")).thenReturn("cyphered");
    Mockito.when(cypher.decryptForAll("one")).thenReturn(Optional.of("plain"));
    Mockito.when(cypher.decryptForAll("two")).thenReturn(Optional.empty());
    Assertions.assertEquals("one",
        SecondFactorSeedVO.fromCyphered("one").getCypheredSecondFactorSeed(null).orElse(null));
    Assertions.assertEquals("one",
        SecondFactorSeedVO.fromPlain("one").getPlainSecondFactorSeed(null).orElse(null));
    Assertions.assertEquals("plain",
        SecondFactorSeedVO.fromCyphered("one").getPlainSecondFactorSeed(cypher).orElse(null));
    Assertions.assertEquals("cyphered",
        SecondFactorSeedVO.fromPlain("one").getCypheredSecondFactorSeed(cypher).orElse(null));
    Assertions.assertThrows(IllegalStateException.class,
        () -> SecondFactorSeedVO.fromCyphered("two").getPlainSecondFactorSeed(cypher).orElse(null));
    Assertions.assertThrows(ConstraintException.class,
        () -> SecondFactorSeedVO.tryFrom(new Object() {}));
    Assertions.assertEquals("[plain:*****]", SecondFactorSeedVO.fromPlain("small").toString());
    Assertions.assertEquals("[plain:longt*****]",
        SecondFactorSeedVO.fromPlain("longtextlongtext").toString());
    Assertions.assertEquals("[cyphered:" + "one" + "]",
        SecondFactorSeedVO.fromCyphered("one").toString());
  }
}
