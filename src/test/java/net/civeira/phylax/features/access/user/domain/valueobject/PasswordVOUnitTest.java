package net.civeira.phylax.features.access.user.domain.valueobject;

import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.common.exception.ConstraintException;

class PasswordVOUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test value object contruction for property password of user ")
  void test_password_v_o_builder() {
    Assertions.assertThrows(ConstraintException.class, () -> PasswordVO.tryFrom(null));
    AesCipherService cypher = Mockito.mock(AesCipherService.class);
    Mockito.when(cypher.encryptForAll("one")).thenReturn("cyphered");
    Mockito.when(cypher.decryptForAll("one")).thenReturn(Optional.of("plain"));
    Mockito.when(cypher.decryptForAll("two")).thenReturn(Optional.empty());
    Assertions.assertEquals("one", PasswordVO.fromCyphered("one").getCypheredValue(null));
    Assertions.assertEquals("one", PasswordVO.fromPlain("one").getPlainValue(null));
    Assertions.assertEquals("plain", PasswordVO.fromCyphered("one").getPlainValue(cypher));
    Assertions.assertEquals("cyphered", PasswordVO.fromPlain("one").getCypheredValue(cypher));
    Assertions.assertThrows(IllegalStateException.class,
        () -> PasswordVO.fromCyphered("two").getPlainValue(cypher));
    Assertions.assertThrows(ConstraintException.class, () -> PasswordVO.tryFrom(new Object() {}));
    Assertions.assertEquals("[plain:*****]", PasswordVO.fromPlain("small").toString());
    Assertions.assertEquals("[plain:longt*****]",
        PasswordVO.fromPlain("longtextlongtext").toString());
    Assertions.assertEquals("[cyphered:" + "one" + "]", PasswordVO.fromCyphered("one").toString());
  }
}
