package net.civeira.phylax.features.access.scopeassignation.domain.valueobject;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;

class SecurityDomainVOUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test value object contruction for property security domain of scope assignation ")
  void test_security_domain_v_o_builder() {
    ConstraintFailList fails = new ConstraintFailList();
    Assertions.assertEquals("10", SecurityDomainVO.fromReference("10").getSecurityDomainUid(),
        "The builder must store the reference value");
    Assertions.assertEquals("11", SecurityDomainVO.tryFromReference("11").getSecurityDomainUid(),
        "The builder must store the reference value");
    Assertions.assertEquals("12",
        SecurityDomainVO.tryFromReference("12", fails).getSecurityDomainUid(),
        "The builder must store the reference value");
    Assertions.assertTrue(fails.isEmpty());
    Assertions.assertThrows(ConstraintException.class, () -> SecurityDomainVO.tryFrom(null));
    Assertions.assertEquals(SecurityDomainReference.of("one"),
        SecurityDomainVO.from(SecurityDomainReference.of("one")).getSecurityDomain());
    Assertions.assertThrows(ConstraintException.class,
        () -> SecurityDomainVO.tryFrom(new Object() {}));
    Assertions.assertEquals("[" + SecurityDomainReference.of("one") + "]",
        SecurityDomainVO.from(SecurityDomainReference.of("one")).toString());
  }
}
