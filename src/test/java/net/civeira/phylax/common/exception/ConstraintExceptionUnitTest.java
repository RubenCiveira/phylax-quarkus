/* @autogenerated */
package net.civeira.phylax.common.exception;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;
import java.util.Locale;

import org.junit.jupiter.api.Test;

import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

class ConstraintExceptionUnitTest {
  @Test
  void testConstructorWithSingleFail() {
    ConstraintFail fail = new ConstraintFail("ERR001", "field", "wrong", "Invalid value");
    ConstraintException ex = new ConstraintException(fail);

    assertTrue(ex.hasErrors());
    assertFalse(ex.isEmpty());
    assertTrue(ex.includeCode("ERR001"));
    assertTrue(ex.includeViolation(ConstraintFail.class));
  }

  @Test
  void testConstructorWithFailList() {
    ConstraintFail fail1 = new ConstraintFail("CODE1", "f1", "val1");
    ConstraintFail fail2 = new ConstraintFail("CODE2", "f2", "val2");

    ConstraintFailList list = new ConstraintFailList(List.of(fail1, fail2));
    ConstraintException ex = new ConstraintException(list);

    assertTrue(ex.hasErrors());
    assertTrue(ex.includeCode("CODE1"));
    assertTrue(ex.includeCode("CODE2"));
  }

  @Test
  void testConstructorWithCodeFieldValueAndMessage() {
    ConstraintException ex =
        new ConstraintException("CODEX", "email", "not-an-email", "Invalid email format");

    assertTrue(ex.includeCode("CODEX"));
    assertTrue(ex.hasErrors());
  }

  @Test
  void testConstructorWithCodeFieldValueOnly() {
    ConstraintException ex = new ConstraintException("MISSING", "username", null);

    assertTrue(ex.includeCode("MISSING"));
  }

  @Test
  void testGetFailsStreamHasCorrectContent() {
    ConstraintFail fail = new ConstraintFail("CODE", "field", "wrong", "Message");
    ConstraintException ex = new ConstraintException(fail);

    assertEquals(1, ex.getFails().count());
  }

  @Test
  void testLocalizationCombinesCorrectly() {
    ConstraintFail fail1 = new ConstraintFail("CODEX", "field1", "val1");
    ConstraintFail fail2 = new ConstraintFail("CODEX", "field2", "val2");

    ConstraintFailList list = new ConstraintFailList(List.of(fail1, fail2));
    ConstraintException ex = new ConstraintException(list);

    var localized = ex.localize(Locale.ENGLISH, true);

    assertEquals(1, localized.size());
    var entry = localized.iterator().next();
    assertEquals("CODEX", entry.getCode());
    assertTrue(entry.getWrongValues().size() >= 2);
  }
}
