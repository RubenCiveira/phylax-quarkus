/* @autogenerated */
package net.civeira.phylax.common.batch;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import net.civeira.phylax.common.value.validation.AbstractFail;

class BatchStepProgressTest {

  private BatchStepProgress stepProgress;
  private AbstractFail mockFail1;
  private AbstractFail mockFail2;

  @BeforeEach
  void setUp() {
    stepProgress = new BatchStepProgress();
    mockFail1 = mock(AbstractFail.class);
    mockFail2 = mock(AbstractFail.class);
  }

  @Test
  void testAddOkInitializesListAndAdds() {
    stepProgress.addOk("item-1");
    assertEquals(1, stepProgress.getProcessedItems());
    assertNotNull(stepProgress.getOks());
    assertEquals(List.of("item-1"), stepProgress.getOks());
  }

  @Test
  void testAddOkAppendsToExistingList() {
    stepProgress.addOk("item-1");
    stepProgress.addOk("item-2");
    assertEquals(2, stepProgress.getProcessedItems());
    assertEquals(List.of("item-1", "item-2"), stepProgress.getOks());
  }

  @Test
  void testAddWarnsInitializesMapAndAdds() {
    stepProgress.addWarns("warn-1", mockFail1);
    assertEquals(1, stepProgress.getProcessedItems());
    assertNotNull(stepProgress.getWarns());
    assertEquals(1, stepProgress.getWarns().get("warn-1").getFails().size());
  }

  @Test
  void testAddWarnsAddsToExistingCode() {
    stepProgress.addWarns("warn-1", mockFail1);
    stepProgress.addWarns("warn-1", mockFail2);
    assertEquals(2, stepProgress.getProcessedItems());
    List<AbstractFail> fails = stepProgress.getWarns().get("warn-1").getFails();
    assertEquals(2, fails.size());
  }

  @Test
  void testAddWarnsAddsNewCode() {
    stepProgress.addWarns("warn-1", mockFail1);
    stepProgress.addWarns("warn-2", mockFail2);
    assertEquals(2, stepProgress.getProcessedItems());
    Map<String, BatchStepProgress.ErrorInfo> warns = stepProgress.getWarns();
    assertTrue(warns.containsKey("warn-1"));
    assertTrue(warns.containsKey("warn-2"));
  }

  @Test
  void testAddErrorInitializesMapAndAdds() {
    stepProgress.addError("error-1", mockFail1);
    assertEquals(1, stepProgress.getProcessedItems());
    assertNotNull(stepProgress.getErrors());
    assertEquals(1, stepProgress.getErrors().get("error-1").getFails().size());
  }

  @Test
  void testAddErrorAddsToExistingCode() {
    stepProgress.addError("error-1", mockFail1);
    stepProgress.addError("error-1", mockFail2);
    assertEquals(2, stepProgress.getProcessedItems());
    List<AbstractFail> fails = stepProgress.getErrors().get("error-1").getFails();
    assertEquals(2, fails.size());
  }

  @Test
  void testAddErrorAddsNewCode() {
    stepProgress.addError("error-1", mockFail1);
    stepProgress.addError("error-2", mockFail2);
    assertEquals(2, stepProgress.getProcessedItems());
    Map<String, BatchStepProgress.ErrorInfo> errors = stepProgress.getErrors();
    assertTrue(errors.containsKey("error-1"));
    assertTrue(errors.containsKey("error-2"));
  }

  @Test
  void testInitialStatusAndTimestampsAreSet() {
    assertEquals(BatchStepProgress.Status.PROCESSING, stepProgress.getStatus());
    assertNotNull(stepProgress.getStartTime());
    assertNotNull(stepProgress.getEndTime());
  }
}
