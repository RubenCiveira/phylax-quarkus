/* @autogenerated */
package net.civeira.phylax.common.batch;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import net.civeira.phylax.common.value.validation.AbstractFail;

class BatchStepProgressUnitTest {

  private BatchStepProgress progress;
  private AbstractFail fail;

  @BeforeEach
  void setup() {
    progress = new BatchStepProgress();
    fail = mock(AbstractFail.class);
  }

  @Test
  void testAddOkInitializesListAndAddsItem() {
    progress.addOk("item-1");
    assertEquals(1, progress.getProcessedItems());
    assertEquals(List.of("item-1"), progress.getOks());
  }

  @Test
  void testAddOkAddsToExistingList() {
    progress.addOk("item-1");
    progress.addOk("item-2");
    assertEquals(2, progress.getProcessedItems());
    assertEquals(List.of("item-1", "item-2"), progress.getOks());
  }

  @Test
  void testAddWarnsInitializesMapAndAddsItem() {
    progress.addWarns("code-1", fail);
    assertEquals(1, progress.getProcessedItems());
    assertNotNull(progress.getWarns());
    assertEquals(1, progress.getWarns().get("code-1").getFails().size());
  }

  @Test
  void testAddWarnsAddsNewCode() {
    progress.addWarns("code-1", fail);
    AbstractFail fail2 = mock(AbstractFail.class);
    progress.addWarns("code-2", fail2);
    assertEquals(2, progress.getProcessedItems());
    assertEquals(1, progress.getWarns().get("code-2").getFails().size());
  }

  @Test
  void testAddWarnsAppendsToExistingCode() {
    progress.addWarns("code-1", fail);
    AbstractFail fail2 = mock(AbstractFail.class);
    progress.addWarns("code-1", fail2);
    assertEquals(2, progress.getProcessedItems());
    assertEquals(2, progress.getWarns().get("code-1").getFails().size());
  }

  @Test
  void testAddErrorInitializesMapAndAddsItem() {
    progress.addError("code-1", fail);
    assertEquals(1, progress.getProcessedItems());
    assertNotNull(progress.getErrors());
    assertEquals(1, progress.getErrors().get("code-1").getFails().size());
  }

  @Test
  void testAddErrorAddsNewCode() {
    progress.addError("code-1", fail);
    AbstractFail fail2 = mock(AbstractFail.class);
    progress.addError("code-2", fail2);
    assertEquals(2, progress.getProcessedItems());
    assertEquals(1, progress.getErrors().get("code-2").getFails().size());
  }

  @Test
  void testAddErrorAppendsToExistingCode() {
    progress.addError("code-1", fail);
    AbstractFail fail2 = mock(AbstractFail.class);
    progress.addError("code-1", fail2);
    assertEquals(2, progress.getProcessedItems());
    assertEquals(2, progress.getErrors().get("code-1").getFails().size());
  }
}
