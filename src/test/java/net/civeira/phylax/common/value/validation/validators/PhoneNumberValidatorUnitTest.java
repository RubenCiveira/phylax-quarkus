/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class PhoneNumberValidatorUnitTest {

  @Test
  void shouldValidateValidPhoneNumber() {
    PhoneNumberValidator validator = new PhoneNumberValidator("Error");
    assertTrue(validator.validate("1234567890").isValid()); // 10-digit valid number
    assertTrue(validator.validate("123456789012345").isValid()); // 15-digit valid number
  }

  @Test
  void shouldInvalidateTooShortPhoneNumber() {
    PhoneNumberValidator validator = new PhoneNumberValidator("Error");
    assertFalse(validator.validate("123").isValid()); // Too short
    assertFalse(validator.validate("123456789").isValid()); // 9 digits, below minimum
  }

  @Test
  void shouldInvalidateTooLongPhoneNumber() {
    PhoneNumberValidator validator = new PhoneNumberValidator("Error");
    assertFalse(validator.validate("1234567890123456").isValid()); // 16 digits, above max
  }

  @Test
  void shouldInvalidatePhoneNumberWithLetters() {
    PhoneNumberValidator validator = new PhoneNumberValidator("Error");
    assertFalse(validator.validate("123abc7890").isValid()); // Contains letters
    assertFalse(validator.validate("abcdefghij").isValid()); // All letters
  }

  @Test
  void shouldInvalidatePhoneNumberWithSpecialCharacters() {
    PhoneNumberValidator validator = new PhoneNumberValidator("Error");
    assertFalse(validator.validate("+1234567890").isValid()); // Contains '+'
    assertFalse(validator.validate("123-456-7890").isValid()); // Contains '-'
    assertFalse(validator.validate("123.456.7890").isValid()); // Contains '.'
    assertFalse(validator.validate("(123)4567890").isValid()); // Contains brackets
  }

  @Test
  void shouldInvalidatePhoneNumberWithSpaces() {
    PhoneNumberValidator validator = new PhoneNumberValidator("Error");
    assertFalse(validator.validate("123 456 7890").isValid()); // Contains spaces
    assertFalse(validator.validate(" 1234567890 ").isValid()); // Leading/trailing spaces
  }

  @Test
  void shouldInvalidateNullAndEmptyPhoneNumber() {
    PhoneNumberValidator validator = new PhoneNumberValidator("Error");
    assertFalse(validator.validate(null).isValid()); // Null input
    assertFalse(validator.validate("").isValid()); // Empty string
  }

  @Test
  void shouldInvalidatePhoneNumberWithLeadingZeros() {
    PhoneNumberValidator validator = new PhoneNumberValidator("Error");
    assertTrue(validator.validate("0000000000").isValid()); // Technically valid
  }
}
