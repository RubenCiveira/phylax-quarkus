/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;

import org.junit.jupiter.api.Test;

class DecimalNumberValidatorUnitTest {

  @Test
  void shouldValidateValidDecimalNumber() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, BigDecimal.ZERO, BigDecimal.TEN, "Error");
    assertTrue(validator.validate("5.25").isValid());
  }

  @Test
  void shouldInvalidateNumberWithTooManyDecimals() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, BigDecimal.ZERO, BigDecimal.TEN, "Error");
    assertFalse(validator.validate("5.123").isValid());
  }

  @Test
  void shouldInvalidateNonNumericInput() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, BigDecimal.ZERO, BigDecimal.TEN, "Error");
    assertFalse(validator.validate("abc").isValid());
  }

  @Test
  void shouldInvalidateNullInput() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, BigDecimal.ZERO, BigDecimal.TEN, "Error");
    assertFalse(validator.validate(null).isValid());
  }

  @Test
  void shouldInvalidateEmptyStringInput() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, BigDecimal.ZERO, BigDecimal.TEN, "Error");
    assertFalse(validator.validate("").isValid());
  }

  @Test
  void shouldInvalidateNumberExceedingPrecision() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, BigDecimal.ZERO, BigDecimal.TEN, "Error");
    assertFalse(validator.validate("12345.67").isValid());
  }

  @Test
  void shouldInvalidateNumberBelowMinValue() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, new BigDecimal("1.00"), BigDecimal.TEN, "Error");
    assertFalse(validator.validate("0.99").isValid());
  }

  @Test
  void shouldInvalidateNumberAboveMaxValue() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, BigDecimal.ZERO, new BigDecimal("9.99"), "Error");
    assertFalse(validator.validate("10.00").isValid());
  }

  @Test
  void shouldThrowExceptionForInvalidConstructorParameters() {
    // scale negativo
    assertThrows(IllegalArgumentException.class,
        () -> new DecimalNumberValidator(1, -1, BigDecimal.ZERO, BigDecimal.TEN, "Error"));
    // maxDecimals negativo
    assertThrows(IllegalArgumentException.class,
        () -> new DecimalNumberValidator(-1, 5, BigDecimal.ZERO, BigDecimal.TEN, "Error"));
    // maxDecimals > precision
    assertThrows(IllegalArgumentException.class,
        () -> new DecimalNumberValidator(3, 2, BigDecimal.ZERO, BigDecimal.TEN, "Error"));
    // minValue > maxValue
    assertThrows(IllegalArgumentException.class,
        () -> new DecimalNumberValidator(2, 5, BigDecimal.TEN, BigDecimal.ZERO, "Error"));
    // maxDecimals negativo y minValue > maxValue
    assertThrows(IllegalArgumentException.class,
        () -> new DecimalNumberValidator(-1, 5, BigDecimal.TEN, BigDecimal.ZERO, "Error"));
    // maxDecimals > precision y minValue > maxValue
    assertThrows(IllegalArgumentException.class,
        () -> new DecimalNumberValidator(3, 2, BigDecimal.TEN, BigDecimal.ZERO, "Error"));
  }

  @Test
  void shouldValidateWithoutMinValue() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 5, null, BigDecimal.TEN, "Error");
    assertTrue(validator.validate("0.01").isValid()); // No hay mínimo
  }

  @Test
  void shouldValidateWithoutMaxValue() {
    DecimalNumberValidator validator =
        new DecimalNumberValidator(2, 150, BigDecimal.ZERO, null, "Error");
    assertTrue(validator.validate("100000").isValid()); // No hay máximo
  }

  @Test
  void shouldValidateWithoutMinAndMaxValue() {
    DecimalNumberValidator validator = new DecimalNumberValidator(2, 150, null, null, "Error");
    // Sin límites
    assertTrue(validator.validate("99999.99").isValid());
  }
}
