/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class URLValidatorUnitTest {

  @Test
  void shouldValidateCorrectURL() {
    URLValidator validator = new URLValidator("Error");
    assertTrue(validator.validate("https://www.example.com").isValid());
    assertTrue(validator.validate("http://www.example.com").isValid());
    assertTrue(validator.validate("https://www.example.com:8080").isValid());
    assertTrue(validator.validate("https://sub.example.com").isValid());
    assertTrue(validator.validate("https://www.example.com/search?q=test").isValid());
    assertTrue(validator.validate("ftp://example.com").isValid()); // Unsupported scheme
  }

  @Test
  void shouldInvalidateNullOrEmptyURL() {
    URLValidator validator = new URLValidator("Error");
    assertFalse(validator.validate(null).isValid());
    assertFalse(validator.validate("").isValid());
  }

  @Test
  void shouldInvalidateMalformedURLs() {
    URLValidator validator = new URLValidator("Error");
    assertFalse(validator.validate("htp:/invalid-url").isValid()); // Malformed scheme
    assertFalse(validator.validate("https://").isValid()); // Missing domain
    assertFalse(validator.validate("www.example.com").isValid()); // Missing protocol
    assertFalse(validator.validate("https://exa mple.com").isValid()); // Space in URL
    assertFalse(validator.validate("https://example.com:-1").isValid()); // Invalid port
    assertFalse(validator.validate("https://example.com:999999").isValid()); // Invalid port
    assertFalse(validator.validate("https://example.").isValid()); // Missing TLD
    assertFalse(validator.validate("mailto:user@example.com.").isValid()); // No host
    assertTrue(validator.validate("https://miramar").isValid()); // Missing TLD
  }

  @Test
  void shouldValidateURLsWithSpecialCharacters() {
    URLValidator validator = new URLValidator("Error");
    assertTrue(validator.validate("https://www.example.com/path/to/page?name=value&other=value")
        .isValid());
    assertTrue(validator.validate("https://example.com/#fragment").isValid());
    assertTrue(validator.validate("https://example.com/path_with_underscores").isValid());
    assertTrue(validator.validate("https://example.com/~user").isValid());
    assertTrue(validator.validate("https://user:pass@example.com").isValid());
  }
}
