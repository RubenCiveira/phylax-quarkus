/* @autogenerated */
package net.civeira.phylax.common.value;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mockStatic;

import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import net.civeira.phylax.common.value.Uuid.ClockProvider;

class UuidUnitTest {

  @Test
  void shouldGenerateValidUuid() {
    UUID uuid = Uuid.comb();
    assertNotNull(uuid);
    assertTrue(Uuid.isValidGUID(uuid.toString()));
  }

  @Test
  void shouldGenerateUniqueUuidsOnSameTime() {
    try (MockedStatic<ClockProvider> mockedStatic = mockStatic(ClockProvider.class)) {
      // Mockeamos eltiempo
      mockedStatic.when(ClockProvider::currentTime).thenReturn(1672531200000L);
      UUID uuid1 = Uuid.comb();
      UUID uuid2 = Uuid.comb();
      assertNotEquals(uuid1, uuid2);
    }
  }

  @Test
  void shouldGenerateUniqueUuids() {
    UUID uuid1 = Uuid.comb();
    UUID uuid2 = Uuid.comb();
    assertNotEquals(uuid1, uuid2);
  }

  @Test
  void shouldRecognizeValidUuidString() {
    assertTrue(Uuid.isValidGUID("123e4567-e89b-12d3-a456-426614174000"));
  }

  @Test
  void shouldRecognizeInvalidUuidString() {
    assertFalse(Uuid.isValidGUID("invalid-uuid-string"));
  }

  @Test
  void shouldRecognizeNullAsInvalidUuid() {
    assertFalse(Uuid.isValidGUID(null));
  }

}
