/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class BankAccountValidatorUnitTest {

  @Test
  void shouldValidateShortCodes() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertFalse(validator.validate("E").isValid());
  }

  @Test
  void shouldValidateSpecilaCharacters() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertFalse(validator.validate("ES79210@@813610123456789").isValid());
  }


  @Test
  void shouldValidateValidIBAN() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertTrue(validator.validate("ES7921000813610123456789").isValid());
  }

  @Test
  void shouldInvalidateShortIBAN() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertFalse(validator.validate("ES79210008136101234567").isValid());
  }

  @Test
  void shouldValidateIBANWithValidSWIFT() {
    BankAccountValidator validator = new BankAccountValidator(true, "Error");
    assertTrue(validator.validate("ES7921000813610123456789 BBVAESMMXXX").isValid());
  }

  @Test
  void shouldInvalidateIBANWithInvalidSWIFT() {
    BankAccountValidator validator = new BankAccountValidator(true, "Error");
    assertFalse(validator.validate("ES7921000813610123456789 INVALIDSWIFT").isValid());
  }

  @Test
  void shouldInvalidateIBANWithoutSWIFTIfRequired() {
    BankAccountValidator validator = new BankAccountValidator(true, "Error");
    assertFalse(validator.validate("ES7921000813610123456789").isValid());
  }

  @Test
  void shouldInvalidateNullIBAN() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertFalse(validator.validate(null).isValid());
  }

  @Test
  void shouldInvalidateEmptyIBAN() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertFalse(validator.validate("").isValid());
  }

  @Test
  void shouldInvalidateIBANWithInvalidCharacters() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertFalse(validator.validate("ES79-2100-0813-6101-23456789").isValid());
  }

  @Test
  void shouldInvalidateIBANWithInvalidChecksum() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertFalse(validator.validate("ES7921000813610123456788").isValid());
  }

  @Test
  void shouldInvalidateIBANWithUnknownCountry() {
    BankAccountValidator validator = new BankAccountValidator(false, "Error");
    assertFalse(validator.validate("XX7921000813610123456789").isValid());
  }

  @Test
  void shouldInvalidateSWIFTWithWrongCountryCode() {
    BankAccountValidator validator = new BankAccountValidator(true, "Error");
    assertFalse(validator.validate("ES7921000813610123456789 USBAUS33XXX").isValid());
  }

  @Test
  void shouldInvalidateMalformedSWIFT() {
    BankAccountValidator validator = new BankAccountValidator(true, "Error");
    assertFalse(validator.validate("ES7921000813610123456789 A123456").isValid());
  }
}
