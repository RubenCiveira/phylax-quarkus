/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class PasswordValidatorUnitTest {

  @Test
  void shouldValidateValidPassword() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, true, "Error");
    assertTrue(validator.validate("P@ssw0rd1").isValid());
  }

  @Test
  void shouldInvalidateTooShortPassword() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, true, "Error");
    assertFalse(validator.validate("P@1").isValid());
  }

  @Test
  void shouldInvalidatePasswordWithoutNumber() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, true, "Error");
    assertFalse(validator.validate("Password!").isValid()); // Falta número
  }

  @Test
  void shouldInvalidatePasswordWithoutUppercase() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, true, "Error");
    assertFalse(validator.validate("p@ssw0rd1").isValid()); // Falta mayúscula
  }

  @Test
  void shouldInvalidatePasswordWithoutSpecialCharacter() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, true, "Error");
    assertFalse(validator.validate("Passw0rd1").isValid()); // Falta carácter especial
  }

  @Test
  void shouldInvalidatePasswordWithoutLowercase() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, true, "Error");
    assertFalse(validator.validate("P@SSW0RD1").isValid());
  }

  @Test
  void shouldInvalidatePasswordExceedingMaxLength() {
    PasswordValidator validator = new PasswordValidator(8, 10, true, true, true, true, "Error");
    assertFalse(validator.validate("P@ssw0rd123").isValid());
  }

  @Test
  void shouldInvalidateNullPassword() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, true, "Error");
    assertFalse(validator.validate(null).isValid());
  }

  @Test
  void shouldInvalidateEmptyPassword() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, true, "Error");
    assertFalse(validator.validate("").isValid());
  }

  @Test
  void shouldValidatePasswordWithoutLowercaseRequirement() {
    PasswordValidator validator = new PasswordValidator(8, 20, false, true, true, true, "Error");
    assertTrue(validator.validate("P@SSW0RD1").isValid()); // Se permiten sin minúsculas
  }

  @Test
  void shouldValidatePasswordWithoutUppercaseRequirement() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, false, true, true, "Error");
    assertTrue(validator.validate("p@ssw0rd1").isValid()); // Se permiten sin mayúsculas
  }

  @Test
  void shouldValidatePasswordWithoutSpecialCharacterRequirement() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, true, false, "Error");
    assertTrue(validator.validate("Passw0rd1").isValid()); // Se permiten sin caracteres especiales
  }

  @Test
  void shouldValidatePasswordWithoutNumberRequirement() {
    PasswordValidator validator = new PasswordValidator(8, 20, true, true, false, true, "Error");
    assertTrue(validator.validate("PassWord!").isValid()); // Se permiten sin números
  }

  @Test
  void shouldThrowExceptionForInvalidLengthParameters() {
    assertThrows(IllegalArgumentException.class,
        () -> new PasswordValidator(-1, 10, true, true, true, true, "Error")); // minLength negativo
    assertThrows(IllegalArgumentException.class,
        () -> new PasswordValidator(10, 5, true, true, true, true, "Error")); // maxLength menor que
                                                                              // minLength
  }
}
