/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class EmailValidatorUnitTest {

  @Test
  void shouldValidateCorrectEmail() {
    EmailValidator validator = new EmailValidator("Error");
    assertTrue(validator.validate("test@example.com").isValid());
  }

  @Test
  void shouldInvalidateIncorrectEmailWithoutAtSymbol() {
    EmailValidator validator = new EmailValidator("Error");
    assertFalse(validator.validate("invalid-email").isValid());
  }

  @Test
  void shouldInvalidateEmptyEmail() {
    EmailValidator validator = new EmailValidator("Error");
    assertFalse(validator.validate("").isValid());
  }

  @Test
  void shouldInvalidateNullEmail() {
    EmailValidator validator = new EmailValidator("Error");
    assertFalse(validator.validate(null).isValid());
  }

  @Test
  void shouldInvalidateEmailWithoutDomain() {
    EmailValidator validator = new EmailValidator("Error");
    assertFalse(validator.validate("user@").isValid());
  }

  @Test
  void shouldInvalidateEmailWithMultipleAtSymbols() {
    EmailValidator validator = new EmailValidator("Error");
    assertFalse(validator.validate("user@@example.com").isValid());
  }

  @Test
  void shouldInvalidateEmailWithoutTLD() {
    EmailValidator validator = new EmailValidator("Error");
    assertFalse(validator.validate("user@example").isValid());
  }

  @Test
  void shouldInvalidateEmailWithInvalidCharacters() {
    EmailValidator validator = new EmailValidator("Error");
    assertFalse(validator.validate("user!@example.com").isValid());
  }

  @Test
  void shouldValidateEmailWithSubdomain() {
    EmailValidator validator = new EmailValidator("Error");
    assertTrue(validator.validate("user@mail.example.com").isValid());
  }

  @Test
  void shouldValidateEmailWithNumbers() {
    EmailValidator validator = new EmailValidator("Error");
    assertTrue(validator.validate("user123@example.com").isValid());
  }

  @Test
  void shouldValidateEmailWithHyphenInDomain() {
    EmailValidator validator = new EmailValidator("Error");
    assertTrue(validator.validate("user@example-domain.com").isValid());
  }

  @Test
  void shouldValidateEmailWithPlusSign() {
    EmailValidator validator = new EmailValidator("Error");
    assertTrue(validator.validate("user+alias@example.com").isValid());
  }
}
