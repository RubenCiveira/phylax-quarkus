/* @autogenerated */
package net.civeira.phylax.common.value.validation;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class ConstraintFailListUnitTest {

  @Mock
  private ConstraintFail mockFail1;

  @Mock
  private ConstraintFail mockFail2;

  @BeforeEach
  void setUp() {
    MockitoAnnotations.openMocks(this);
  }

  @Test
  void defaultConstructorShouldCreateEmptyList() {
    ConstraintFailList failList = new ConstraintFailList();
    assertTrue(failList.isEmpty(), "La lista debería estar vacía");
    assertFalse(failList.hasErrors(), "La lista no debería tener errores");

    ConstraintFailList failList2 = new ConstraintFailList("c1", "", "");
    assertFalse(failList2.isEmpty(), "La lista debería estar vacía");
    assertTrue(failList2.hasErrors(), "La lista no debería tener errores");
    assertEquals(1, failList2.getFails().count(), "La lista debería contener un solo fallo");


    ConstraintFailList failList3 = new ConstraintFailList("", "", "", "");
    assertFalse(failList3.isEmpty(), "La lista debería estar vacía");
    assertTrue(failList3.hasErrors(), "La lista no debería tener errores");
    assertEquals(1, failList3.getFails().count(), "La lista debería contener un solo fallo");
  }

  @Test
  void constructorWithSingleFailShouldContainOneElement() {
    ConstraintFailList failList = new ConstraintFailList(mockFail1);
    assertFalse(failList.isEmpty(), "La lista no debería estar vacía");
    assertTrue(failList.hasErrors(), "La lista debería tener errores");
    assertEquals(1, failList.getFails().count(), "La lista debería contener un solo fallo");
  }

  @Test
  void constructorWithListShouldContainAllElements() {
    ConstraintFailList failList = new ConstraintFailList(List.of(mockFail1, mockFail2));
    assertFalse(failList.isEmpty(), "La lista no debería estar vacía");
    assertTrue(failList.hasErrors(), "La lista debería tener errores");
    assertEquals(2, failList.getFails().count(), "La lista debería contener dos fallos");
  }

  @Test
  void addShouldIncreaseSize() {
    ConstraintFailList failList = new ConstraintFailList();
    failList.add(mockFail1);
    assertEquals(1, failList.getFails().count(),
        "La lista debería contener un fallo después de añadir uno");
  }
}
