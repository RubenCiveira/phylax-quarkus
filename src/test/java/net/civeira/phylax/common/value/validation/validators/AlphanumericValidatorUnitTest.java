/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class AlphanumericValidatorUnitTest {

  @Test
  void shouldValidateCorrectlyWithAllowedCharacters() {
    AlphanumericValidator validator =
        new AlphanumericValidator(3, 10, true, true, true, false, "Error");
    assertTrue(validator.validate("abc123").isValid());
    assertFalse(validator.validate("abc@123").isValid());
  }

  @Test
  void shouldEnforceMinAndMaxLength() {
    AlphanumericValidator validator =
        new AlphanumericValidator(3, 5, true, true, true, false, "Error");
    assertFalse(validator.validate("a").isValid());
    assertTrue(validator.validate("abc").isValid());
    assertFalse(validator.validate("abcdef").isValid());
  }

  @Test
  void shouldThrowExceptionForInvalidLengthParameters() {
    assertThrows(IllegalArgumentException.class,
        () -> new AlphanumericValidator(-1, 5, true, true, true, false, "Error"));
    assertThrows(IllegalArgumentException.class,
        () -> new AlphanumericValidator(5, 3, true, true, true, false, "Error"));
  }

  @Test
  void shouldValidateUppercaseOnly() {
    AlphanumericValidator validator =
        new AlphanumericValidator(3, 10, false, true, false, false, "Error");
    assertTrue(validator.validate("ABC").isValid());
    assertFalse(validator.validate("abc").isValid());
    assertFalse(validator.validate("123").isValid());
  }

  @Test
  void shouldValidateLowercaseOnly() {
    AlphanumericValidator validator =
        new AlphanumericValidator(3, 10, true, false, false, false, "Error");
    assertTrue(validator.validate("abc").isValid());
    assertFalse(validator.validate("ABC").isValid());
    assertFalse(validator.validate("123").isValid());
  }

  @Test
  void shouldValidateNumbersOnly() {
    AlphanumericValidator validator =
        new AlphanumericValidator(3, 10, false, false, true, false, "Error");
    assertTrue(validator.validate("123").isValid());
    assertFalse(validator.validate("abc").isValid());
    assertFalse(validator.validate("ABC").isValid());
  }

  @Test
  void shouldValidateNull() {
    AlphanumericValidator validator =
        new AlphanumericValidator(3, 10, false, false, true, false, "Error");
    assertFalse(validator.validate(null).isValid());
  }

  @Test
  void shouldValidateSpecialCharactersOnly() {
    assertThrows(IllegalArgumentException.class,
        () -> new AlphanumericValidator(3, 10, false, false, false, false, "Error"));
  }

  @Test
  void shouldValidateMixedCharacterSets() {
    AlphanumericValidator validator =
        new AlphanumericValidator(3, 10, true, true, true, true, "Error");
    assertTrue(validator.validate("Abc123$").isValid());
    assertTrue(validator.validate("a1B!").isValid());
    assertFalse(validator.validate(" ").isValid());
  }
}
