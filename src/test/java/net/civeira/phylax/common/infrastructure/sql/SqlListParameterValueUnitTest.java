/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

import org.junit.jupiter.api.Test;

class SqlListParameterValueUnitTest {

  @Test
  void testStringValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    SqlListParameterValue param = SqlListParameterValue.of("a", "b", "c");

    assertEquals(3, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps); // calls lambda
    }

    verify(ps).setString(1, "a");
    verify(ps).setString(2, "b");
    verify(ps).setString(3, "c");
  }

  @Test
  void testIntegerValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    SqlListParameterValue param = SqlListParameterValue.of(10, 20);

    assertEquals(2, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setInt(1, 10);
    verify(ps).setInt(2, 20);
  }

  @Test
  void testLongValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    SqlListParameterValue param = SqlListParameterValue.of(100L, 200L);

    assertEquals(2, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setLong(1, 100L);
    verify(ps).setLong(2, 200L);
  }

  @Test
  void testDoubleValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    SqlListParameterValue param = SqlListParameterValue.of(1.5, 2.5);

    assertEquals(2, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setDouble(1, 1.5);
    verify(ps).setDouble(2, 2.5);
  }

  @Test
  void testBooleanValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    SqlListParameterValue param = SqlListParameterValue.of(true, false);

    assertEquals(2, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setBoolean(1, true);
    verify(ps).setBoolean(2, false);
  }

  @Test
  void testBigDecimalValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    BigDecimal b1 = new BigDecimal("123.45");
    BigDecimal b2 = new BigDecimal("678.90");
    SqlListParameterValue param = SqlListParameterValue.of(b1, b2);

    assertEquals(2, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setBigDecimal(1, b1);
    verify(ps).setBigDecimal(2, b2);
  }

  @Test
  void testDateValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    Date d1 = Date.valueOf("2023-01-01");
    Date d2 = Date.valueOf("2024-01-01");
    SqlListParameterValue param = SqlListParameterValue.of(d1, d2);

    assertEquals(2, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setDate(1, d1);
    verify(ps).setDate(2, d2);
  }

  @Test
  void testTimeValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    Time t1 = Time.valueOf("10:00:00");
    Time t2 = Time.valueOf("12:00:00");
    SqlListParameterValue param = SqlListParameterValue.of(t1, t2);

    assertEquals(2, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setTime(1, t1);
    verify(ps).setTime(2, t2);
  }

  @Test
  void testTimestampValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    Timestamp ts1 = Timestamp.valueOf("2023-01-01 10:00:00");
    Timestamp ts2 = Timestamp.valueOf("2023-01-02 10:00:00");
    SqlListParameterValue param = SqlListParameterValue.of(ts1, ts2);

    assertEquals(2, param.size());

    for (int i = 0; i < param.size(); i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setTimestamp(1, ts1);
    verify(ps).setTimestamp(2, ts2);
  }

  @Test
  void testLocalDateValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    LocalDate d1 = LocalDate.of(2023, 1, 1);
    LocalDate d2 = LocalDate.of(2024, 1, 1);
    SqlParameterValue param = SqlListParameterValue.of(d1, d2);

    for (int i = 0; i < 2; i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setDate(1, Date.valueOf(d1));
    verify(ps).setDate(2, Date.valueOf(d2));
  }

  @Test
  void testLocalDateTimeValues() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);
    LocalDateTime dt1 = LocalDateTime.of(2023, 1, 1, 10, 0);
    LocalDateTime dt2 = LocalDateTime.of(2023, 1, 2, 12, 0);
    SqlParameterValue param = SqlListParameterValue.of(dt1, dt2);

    for (int i = 0; i < 2; i++) {
      param.accept(i + 1, ps);
    }

    verify(ps).setTimestamp(1, Timestamp.valueOf(dt1));
    verify(ps).setTimestamp(2, Timestamp.valueOf(dt2));
  }

  @Test
  void testStringsFromList() throws SQLException {
    SqlListParameterValue param = SqlListParameterValue.strings(List.of("x", "y"));
    assertEquals(2, param.size());
  }

  @Test
  void testIntegersFromList() throws SQLException {
    SqlListParameterValue param = SqlListParameterValue.integers(List.of(1, 2, 3));
    assertEquals(3, param.size());
  }

  @Test
  void testLongsFromList() throws SQLException {
    SqlListParameterValue param = SqlListParameterValue.longs(List.of(10L, 20L));
    assertEquals(2, param.size());
  }

  @Test
  void testDoublesFromList() throws SQLException {
    SqlListParameterValue param = SqlListParameterValue.doubles(List.of(3.14, 2.71));
    assertEquals(2, param.size());
  }

  @Test
  void testBooleansFromList() throws SQLException {
    SqlListParameterValue param = SqlListParameterValue.booleans(List.of(true, false));
    assertEquals(2, param.size());
  }

  @Test
  void testBigDecimalsFromList() throws SQLException {
    SqlListParameterValue param =
        SqlListParameterValue.bigDecimals(List.of(new BigDecimal("1.1"), new BigDecimal("2.2")));
    assertEquals(2, param.size());
  }

  @Test
  void testDatesFromList() throws SQLException {
    SqlListParameterValue param = SqlListParameterValue
        .dates(List.of(Date.valueOf("2023-01-01"), Date.valueOf("2023-12-31")));
    assertEquals(2, param.size());
  }

  @Test
  void testTimesFromList() throws SQLException {
    SqlListParameterValue param =
        SqlListParameterValue.times(List.of(Time.valueOf("10:00:00"), Time.valueOf("12:00:00")));
    assertEquals(2, param.size());
  }

  @Test
  void testTimestampsFromList() throws SQLException {
    SqlListParameterValue param = SqlListParameterValue.timestamps(List
        .of(Timestamp.valueOf("2023-01-01 10:00:00"), Timestamp.valueOf("2023-01-01 12:00:00")));
    assertEquals(2, param.size());
  }

  @Test
  void testLocalDatesFromList() throws SQLException {
    SqlParameterValue param = SqlListParameterValue
        .localdates(List.of(LocalDate.of(2023, 1, 1), LocalDate.of(2024, 1, 1)));
    assertNotNull(param);
  }

  @Test
  void testLocalDateTimesFromList() throws SQLException {
    SqlParameterValue param = SqlListParameterValue.localdatetimes(
        List.of(LocalDateTime.of(2023, 1, 1, 10, 0), LocalDateTime.of(2023, 1, 2, 12, 0)));
    assertNotNull(param);
  }

}
