/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;

import org.junit.jupiter.api.Test;

class UncheckedSqlExceptionUnitTest {

  private SQLException createSQLException(String sqlState, int errorCode) {
    SQLException ex = new SQLException("Test SQL exception", sqlState, errorCode);
    return spy(ex); // for verifying printStackTrace
  }

  private Connection mockConnection(String productName) throws SQLException {
    DatabaseMetaData metaData = mock(DatabaseMetaData.class);
    when(metaData.getDatabaseProductName()).thenReturn(productName);

    Connection conn = mock(Connection.class);
    when(conn.getMetaData()).thenReturn(metaData);
    return conn;
  }

  @Test
  void testDuplicateKey_Postgres() throws SQLException {
    SQLException ex = createSQLException("23505", 0);
    Connection conn = mockConnection("PostgreSQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotUniqueException);
    verify(ex).printStackTrace();
  }

  @Test
  void testGenericFallback() throws SQLException {
    SQLException ex = createSQLException("unknown", 9999);
    Connection conn = mockConnection("UnknownDB");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
    verify(ex).printStackTrace();
  }

  @Test
  void testConstructorWithOnlySQLException() {
    SQLException cause = new SQLException("cause");
    UncheckedSqlException ex = new UncheckedSqlException(cause);
    assertEquals(cause, ex.getCause());
  }

  @Test
  void testConstructorWithMessageAndCause() {
    SQLException cause = new SQLException("fail");
    UncheckedSqlException ex = new UncheckedSqlException("message", cause);
    assertEquals("message", ex.getMessage());
    assertEquals(cause, ex.getCause());
  }

  @Test
  void testGetDatabaseProductNameThrows() throws SQLException {
    Connection conn = mock(Connection.class);
    when(conn.getMetaData()).thenThrow(new SQLException("meta fail"));

    SQLException ex = createSQLException("00000", 0);

    UncheckedSqlException thrown =
        assertThrows(UncheckedSqlException.class, () -> UncheckedSqlException.exception(conn, ex));

    assertTrue(thrown.getMessage().contains("Unable to retrieve database product name"));
  }

  // --- Referential Integrity Violation (foreign key insert/update)

  @Test
  void testReferentialIntegrity_Postgres() throws SQLException {
    SQLException ex = createSQLException("23506", 0);
    Connection conn = mockConnection("PostgreSQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotExistentReferenceException);
  }

  @Test
  void testReferentialIntegrity_H2() throws SQLException {
    SQLException ex = createSQLException("23506", 0);
    Connection conn = mockConnection("H2");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotExistentReferenceException);
  }

  @Test
  void testReferentialIntegrity_Oracle() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 2291);
    Connection conn = mockConnection("Oracle");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotExistentReferenceException);
  }

  @Test
  void testReferentialIntegrity_SQLServer() throws SQLException {
    SQLException ex = spy(new SQLException("INSERT violates FK", "doesnotmatter", 547));
    Connection conn = mockConnection("Microsoft SQL Server");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotExistentReferenceException);
  }

  @Test
  void testReferentialIntegrity_MySQL() throws SQLException {
    SQLException ex = createSQLException("ignored", 1452);
    Connection conn = mockConnection("MySQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotExistentReferenceException);
  }

  @Test
  void testReferentialIntegrity_MariaDB() throws SQLException {
    SQLException ex = createSQLException("ignored", 1452);
    Connection conn = mockConnection("MariaDB");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotExistentReferenceException);
  }

  @Test
  void testReferentialIntegrity_UnknownDB() throws SQLException {
    SQLException ex = createSQLException("23506", 999);
    Connection conn = mockConnection("CustomDB");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException); // falls back
  }

  // --- Cascade Delete Violation (foreign key on delete restrict)

  @Test
  void testCascadeDelete_Postgres() throws SQLException {
    SQLException ex = createSQLException("23504", 0);
    Connection conn = mockConnection("PostgreSQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotEmptyChildsException);
  }

  @Test
  void testCascadeDelete_H2() throws SQLException {
    SQLException ex = createSQLException("23504", 0);
    Connection conn = mockConnection("H2");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotEmptyChildsException);
  }

  @Test
  void testCascadeDelete_Oracle() throws SQLException {
    SQLException ex = createSQLException("ignored", 2292);
    Connection conn = mockConnection("Oracle");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotEmptyChildsException);
  }

  @Test
  void testCascadeDelete_SQLServer() throws SQLException {
    SQLException ex = spy(new SQLException("DELETE violates FK", "ignored", 547));
    Connection conn = mockConnection("Microsoft SQL Server");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotEmptyChildsException);
  }

  @Test
  void testCascadeDelete_MySQL() throws SQLException {
    SQLException ex = createSQLException("ignored", 1451);
    Connection conn = mockConnection("MySQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotEmptyChildsException);
  }

  @Test
  void testCascadeDelete_MariaDB() throws SQLException {
    SQLException ex = createSQLException("ignored", 1451);
    Connection conn = mockConnection("MariaDB");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotEmptyChildsException);
  }

  @Test
  void testCascadeDelete_UnknownDB() throws SQLException {
    SQLException ex = createSQLException("23504", 123);
    Connection conn = mockConnection("Unknown");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_Oracle_UnknownErrorCode() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 999);
    Connection conn = mockConnection("Oracle");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_SQLServer_UnknownErrorCode() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 999);
    Connection conn = mockConnection("Microsoft SQL Server");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_Postgres_UnknownSQLState() throws SQLException {
    SQLException ex = createSQLException("99999", 0);
    Connection conn = mockConnection("PostgreSQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testReferentialIntegrity_Oracle_InvalidCode() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 1234);
    Connection conn = mockConnection("Oracle");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testCascadeDelete_MySQL_InvalidCode() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 9999);
    Connection conn = mockConnection("MySQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_PostgreSQL_Match() throws SQLException {
    SQLException ex = createSQLException("23505", 0);
    Connection conn = mockConnection("PostgreSQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotUniqueException);
  }

  @Test
  void testDuplicateKey_PostgreSQL_NoMatch() throws SQLException {
    SQLException ex = createSQLException("00000", 0);
    Connection conn = mockConnection("PostgreSQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_H2_Match() throws SQLException {
    SQLException ex = createSQLException("23505", 0);
    Connection conn = mockConnection("H2");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotUniqueException);
  }

  @Test
  void testDuplicateKey_H2_NoMatch() throws SQLException {
    SQLException ex = createSQLException("99999", 0);
    Connection conn = mockConnection("H2");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_Oracle_Match() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 1);
    Connection conn = mockConnection("Oracle");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotUniqueException);
  }

  @Test
  void testDuplicateKey_Oracle_NoMatch() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 999);
    Connection conn = mockConnection("Oracle");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_SQLServer_Code2627() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 2627);
    Connection conn = mockConnection("Microsoft SQL Server");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotUniqueException);
  }

  @Test
  void testDuplicateKey_SQLServer_Code2601() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 2601);
    Connection conn = mockConnection("Microsoft SQL Server");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotUniqueException);
  }

  @Test
  void testDuplicateKey_SQLServer_NoMatch() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 999);
    Connection conn = mockConnection("Microsoft SQL Server");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_MySQL_Match() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 1062);
    Connection conn = mockConnection("MySQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotUniqueException);
  }

  @Test
  void testDuplicateKey_MySQL_NoMatch() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 9999);
    Connection conn = mockConnection("MySQL");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

  @Test
  void testDuplicateKey_MariaDB_Match() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 1062);
    Connection conn = mockConnection("MariaDB");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof NotUniqueException);
  }

  @Test
  void testDuplicateKey_MariaDB_NoMatch() throws SQLException {
    SQLException ex = createSQLException("irrelevant", 8888);
    Connection conn = mockConnection("MariaDB");

    RuntimeException result = UncheckedSqlException.exception(conn, ex);
    assertTrue(result instanceof UncheckedSqlException);
  }

}
