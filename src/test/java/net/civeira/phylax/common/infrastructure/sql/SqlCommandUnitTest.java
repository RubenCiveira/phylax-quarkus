/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class SqlCommandUnitTest {

  private SqlTemplate template;
  private SqlCommand command;

  @BeforeEach
  void setUp() {
    template = mock(SqlTemplate.class);
    command = spy(new SqlCommand(template, "UPDATE users SET active = true WHERE id = :id"));
  }

  @Test
  void testWithReturnsSelf() {
    SqlParameterValue value = SqlParameterValue.of(42);
    SqlCommand returned = command.with("id", value);

    assertSame(command, returned, "with() should return the same SqlCommand instance");
    verify(command).with("id", value);
  }

  @Test
  void testExecuteRunsUpdate() {
    // Arrange
    doReturn(1).when(command).executeUpdate(anyString());

    // Act
    Integer result = command.execute();

    // Assert
    assertEquals(1, result);
    verify(command).executeUpdate("UPDATE users SET active = true WHERE id = :id");
  }
}
