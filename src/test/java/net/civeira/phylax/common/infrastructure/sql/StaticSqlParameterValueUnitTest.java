/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.junit.jupiter.api.Test;

class StaticSqlParameterValueUnitTest {

  @Test
  void testValueDescriptionFromObjectConstructor() {
    StaticSqlParameterValue param = new StaticSqlParameterValue(123, (index, ps) -> {
    });
    assertEquals("123", param.valueDescription());
  }

  @Test
  void testValueDescriptionFromStringConstructor() {
    StaticSqlParameterValue param = new StaticSqlParameterValue("Custom", (index, ps) -> {
    });
    assertEquals("Custom", param.valueDescription());
  }

  @Test
  void testAcceptDelegatesToCustomAccepter() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);

    StaticSqlParameterValue.CustomAccepter accepter =
        mock(StaticSqlParameterValue.CustomAccepter.class);
    StaticSqlParameterValue param = new StaticSqlParameterValue("Test", accepter);

    param.accept(2, ps);
    verify(accepter).accept(2, ps);
  }

  @Test
  void testAcceptThrowsSQLException() throws SQLException {
    PreparedStatement ps = mock(PreparedStatement.class);

    StaticSqlParameterValue.CustomAccepter failingAccepter = (index, statement) -> {
      throw new SQLException("Simulated failure");
    };

    StaticSqlParameterValue param = new StaticSqlParameterValue("Fail", failingAccepter);

    SQLException ex = assertThrows(SQLException.class, () -> param.accept(1, ps));
    assertEquals("Simulated failure", ex.getMessage());
  }
}
