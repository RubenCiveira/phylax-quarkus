/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for the SqlOperator enum.
 */
public class SqlOperatorUnitTest {

  @Test
  public void testFormatWithNullMethod() {
    assertEquals(" param", SqlOperator.EQ.format("param"));
    assertEquals(" param", SqlOperator.GT.format("param"));
    assertEquals(" param", SqlOperator.LT.format("param"));
    assertEquals(" param", SqlOperator.GTEQ.format("param"));
    assertEquals(" param", SqlOperator.LTEQ.format("param"));
    assertEquals(" param", SqlOperator.LIKE.format("param"));
    assertEquals(" param", SqlOperator.IS_NULL.format("param"));
    assertEquals(" param", SqlOperator.IS_NOT_NULL.format("param"));
    assertEquals(" param", SqlOperator.NE.format("param"));
  }

  @Test
  public void testFormatWithEmptyMethod() {
    // IN operator has an empty string as method, so it will wrap the param with ()
    assertEquals(" (param)", SqlOperator.IN.format("param"));
  }

  @Test
  public void testSqlOperatorValues() {
    assertEquals("=", SqlOperator.EQ.value);
    assertEquals(">", SqlOperator.GT.value);
    assertEquals("<", SqlOperator.LT.value);
    assertEquals(">=", SqlOperator.GTEQ.value);
    assertEquals("<=", SqlOperator.LTEQ.value);
    assertEquals("IN", SqlOperator.IN.value);
    assertEquals("LIKE", SqlOperator.LIKE.value);
    assertEquals("", SqlOperator.IS_NULL.value);
    assertEquals("", SqlOperator.IS_NOT_NULL.value);
    assertEquals("!=", SqlOperator.NE.value);
  }

  @Test
  public void testFormatConsistency() {
    for (SqlOperator op : SqlOperator.values()) {
      String param = "value";
      String formatted = op.format(param);
      if (op.method == null) {
        assertEquals(" " + param, formatted);
      } else {
        assertEquals(" " + op.method + "(" + param + ")", formatted);
      }
    }
  }
}
