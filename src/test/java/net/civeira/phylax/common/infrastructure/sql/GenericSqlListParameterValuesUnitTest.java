/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for {@link GenericSqlListParameterValues}.
 */
class GenericSqlListParameterValuesUnitTest {

  @Test
  void testSizeReturnsCorrectLength() {
    GenericSqlListParameterValues<String> param =
        new GenericSqlListParameterValues<>(new String[] {"a", "b", "c"}, (index, value, ps) -> {
        });

    assertEquals(3, param.size());
  }

  @Test
  void testValueDescription() {
    GenericSqlListParameterValues<Integer> param =
        new GenericSqlListParameterValues<>(new Integer[] {1, 2, 3}, (index, value, ps) -> {
        });

    assertEquals("[1,2,3]", param.valueDescription());
  }

  @Test
  void testValueDescriptionEmptyArray() {
    GenericSqlListParameterValues<Integer> param =
        new GenericSqlListParameterValues<>(new Integer[] {}, (index, value, ps) -> {
        });

    assertEquals("[]", param.valueDescription());
  }

  @Test
  void testAcceptCallsLambdaCorrectly() throws SQLException {
    @SuppressWarnings("unchecked")
    GenericSqlListParameterValues.GenericSqlListParameterValue<String> binder =
        mock(GenericSqlListParameterValues.GenericSqlListParameterValue.class);

    String[] values = {"one", "two"};
    PreparedStatement ps = mock(PreparedStatement.class);

    GenericSqlListParameterValues<String> param =
        new GenericSqlListParameterValues<>(values, binder);
    param.accept(1, ps); // index starts at 1

    verify(binder).accept(1, "one", ps);
    verify(binder).accept(2, "two", ps);
  }
}
