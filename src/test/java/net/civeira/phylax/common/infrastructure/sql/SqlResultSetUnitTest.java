/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class SqlResultSetUnitTest {

  private ResultSet mockResultSet;
  private SqlResultSet resultSet;

  @BeforeEach
  public void setUp() {
    mockResultSet = mock(ResultSet.class);
    resultSet = SqlResultSet.builder().set(mockResultSet).childs(new HashMap<>()).build();
  }

  @Test
  public void testGetChildsReturnsResults() {
    CompletableFuture<List<String>> future = CompletableFuture.completedFuture(List.of("a", "b"));
    Map<String, CompletableFuture<?>> childMap = Map.of("related", future);

    SqlResultSet resultSetWithChilds =
        SqlResultSet.builder().set(mockResultSet).childs(childMap).build();

    List<Object> result = resultSetWithChilds.getChilds("related").toCompletableFuture().join();
    assertEquals(2, result.size());
    assertEquals("a", result.get(0));
  }

  @Test
  public void testGetChildsReturnsEmpty() {
    List<Object> result = resultSet.getChilds("nonexistent").toCompletableFuture().join();
    assertTrue(result.isEmpty());
  }

  @Test
  public void testAllDelegatedMethods() throws Exception {
    Calendar cal = Calendar.getInstance();
    Map<String, Class<?>> map = new HashMap<>();

    when(mockResultSet.getCursorName()).thenReturn("cursor");
    assertEquals("cursor", resultSet.getCursorName());

    ResultSetMetaData metaData = mock(ResultSetMetaData.class);
    when(mockResultSet.getMetaData()).thenReturn(metaData);
    assertEquals(metaData, resultSet.getMetaData());

    when(mockResultSet.getObject(1)).thenReturn("value");
    assertEquals("value", resultSet.getObject(1));

    when(mockResultSet.getObject("col")).thenReturn("value");
    assertEquals("value", resultSet.getObject("col"));

    Reader reader = mock(Reader.class);
    when(mockResultSet.getCharacterStream(1)).thenReturn(reader);
    when(mockResultSet.getCharacterStream("col")).thenReturn(reader);
    assertEquals(reader, resultSet.getCharacterStream(1));
    assertEquals(reader, resultSet.getCharacterStream("col"));

    BigDecimal bigDecimal = new BigDecimal("123.45");
    when(mockResultSet.getBigDecimal(1)).thenReturn(bigDecimal);
    when(mockResultSet.getBigDecimal("col")).thenReturn(bigDecimal);
    assertEquals(bigDecimal, resultSet.getBigDecimal(1));
    assertEquals(bigDecimal, resultSet.getBigDecimal("col"));

    when(mockResultSet.getRow()).thenReturn(1);
    assertEquals(1, resultSet.getRow());

    when(mockResultSet.getFetchDirection()).thenReturn(ResultSet.FETCH_FORWARD);
    assertEquals(ResultSet.FETCH_FORWARD, resultSet.getFetchDirection());

    when(mockResultSet.getFetchSize()).thenReturn(100);
    assertEquals(100, resultSet.getFetchSize());

    when(mockResultSet.getConcurrency()).thenReturn(ResultSet.CONCUR_READ_ONLY);
    assertEquals(ResultSet.CONCUR_READ_ONLY, resultSet.getConcurrency());

    when(mockResultSet.getObject(1, map)).thenReturn("mapped");
    assertEquals("mapped", resultSet.getObject(1, map));

    Ref ref = mock(Ref.class);
    when(mockResultSet.getRef(1)).thenReturn(ref);
    when(mockResultSet.getRef("col")).thenReturn(ref);
    assertEquals(ref, resultSet.getRef(1));
    assertEquals(ref, resultSet.getRef("col"));

    Blob blob = mock(Blob.class);
    when(mockResultSet.getBlob(1)).thenReturn(blob);
    when(mockResultSet.getBlob("col")).thenReturn(blob);
    assertEquals(blob, resultSet.getBlob(1));
    assertEquals(blob, resultSet.getBlob("col"));

    Clob clob = mock(Clob.class);
    when(mockResultSet.getClob(1)).thenReturn(clob);
    when(mockResultSet.getClob("col")).thenReturn(clob);
    assertEquals(clob, resultSet.getClob(1));
    assertEquals(clob, resultSet.getClob("col"));

    Array array = mock(Array.class);
    when(mockResultSet.getArray(1)).thenReturn(array);
    when(mockResultSet.getArray("col")).thenReturn(array);
    assertEquals(array, resultSet.getArray(1));
    assertEquals(array, resultSet.getArray("col"));

    when(mockResultSet.getObject("col", map)).thenReturn("mappedLabel");
    assertEquals("mappedLabel", resultSet.getObject("col", map));

    Date date = new Date(System.currentTimeMillis());
    when(mockResultSet.getDate(1, cal)).thenReturn(date);
    when(mockResultSet.getDate("col", cal)).thenReturn(date);
    assertEquals(date, resultSet.getDate(1, cal));
    assertEquals(date, resultSet.getDate("col", cal));

    Time time = new Time(System.currentTimeMillis());
    when(mockResultSet.getTime(1, cal)).thenReturn(time);
    when(mockResultSet.getTime("col", cal)).thenReturn(time);
    assertEquals(time, resultSet.getTime(1, cal));
    assertEquals(time, resultSet.getTime("col", cal));

    Timestamp timestamp = new Timestamp(System.currentTimeMillis());
    when(mockResultSet.getTimestamp(1, cal)).thenReturn(timestamp);
    when(mockResultSet.getTimestamp("col", cal)).thenReturn(timestamp);
    assertEquals(timestamp, resultSet.getTimestamp(1, cal));
    assertEquals(timestamp, resultSet.getTimestamp("col", cal));

    URL url = new URI("http://example.com").toURL();
    when(mockResultSet.getURL(1)).thenReturn(url);
    when(mockResultSet.getURL("col")).thenReturn(url);
    assertEquals(url, resultSet.getURL(1));
    assertEquals(url, resultSet.getURL("col"));

    RowId rowId = mock(RowId.class);
    when(mockResultSet.getRowId(1)).thenReturn(rowId);
    when(mockResultSet.getRowId("col")).thenReturn(rowId);
    assertEquals(rowId, resultSet.getRowId(1));
    assertEquals(rowId, resultSet.getRowId("col"));

    when(mockResultSet.getHoldability()).thenReturn(ResultSet.HOLD_CURSORS_OVER_COMMIT);
    assertEquals(ResultSet.HOLD_CURSORS_OVER_COMMIT, resultSet.getHoldability());

    NClob nclob = mock(NClob.class);
    when(mockResultSet.getNClob(1)).thenReturn(nclob);
    when(mockResultSet.getNClob("col")).thenReturn(nclob);
    assertEquals(nclob, resultSet.getNClob(1));
    assertEquals(nclob, resultSet.getNClob("col"));

    when(mockResultSet.getNString(1)).thenReturn("nstring");
    when(mockResultSet.getNString("col")).thenReturn("nstring");
    assertEquals("nstring", resultSet.getNString(1));
    assertEquals("nstring", resultSet.getNString("col"));

    Reader nReader = mock(Reader.class);
    when(mockResultSet.getNCharacterStream(1)).thenReturn(nReader);
    when(mockResultSet.getNCharacterStream("col")).thenReturn(nReader);
    assertEquals(nReader, resultSet.getNCharacterStream(1));
    assertEquals(nReader, resultSet.getNCharacterStream("col"));

    when(mockResultSet.getObject(1, String.class)).thenReturn("typedValue");
    when(mockResultSet.getObject("col", String.class)).thenReturn("typedValue");
    assertEquals("typedValue", resultSet.getObject(1, String.class));
    assertEquals("typedValue", resultSet.getObject("col", String.class));
  }

  @Test
  public void testBasicDelegatedColumnIndexAndLabelMethods() throws Exception {
    when(mockResultSet.getString(1)).thenReturn("string-val");
    assertEquals("string-val", resultSet.getString(1));

    when(mockResultSet.getBoolean(1)).thenReturn(true);
    assertTrue(resultSet.getBoolean(1));

    when(mockResultSet.getByte(1)).thenReturn((byte) 5);
    assertEquals(5, resultSet.getByte(1));

    when(mockResultSet.getShort(1)).thenReturn((short) 12);
    assertEquals(12, resultSet.getShort(1));

    when(mockResultSet.getInt(1)).thenReturn(42);
    assertEquals(42, resultSet.getInt(1));

    when(mockResultSet.getLong(1)).thenReturn(1000L);
    assertEquals(1000L, resultSet.getLong(1));

    when(mockResultSet.getFloat(1)).thenReturn(1.5f);
    assertEquals(1.5f, resultSet.getFloat(1), 0.0001);

    when(mockResultSet.getDouble(1)).thenReturn(2.5d);
    assertEquals(2.5d, resultSet.getDouble(1), 0.0001);

    byte[] bytes = new byte[] {1, 2, 3};
    when(mockResultSet.getBytes(1)).thenReturn(bytes);
    assertArrayEquals(bytes, resultSet.getBytes(1));

    Date date = new Date(System.currentTimeMillis());
    when(mockResultSet.getDate(1)).thenReturn(date);
    assertEquals(date, resultSet.getDate(1));

    Time time = new Time(System.currentTimeMillis());
    when(mockResultSet.getTime(1)).thenReturn(time);
    assertEquals(time, resultSet.getTime(1));

    Timestamp ts = new Timestamp(System.currentTimeMillis());
    when(mockResultSet.getTimestamp(1)).thenReturn(ts);
    assertEquals(ts, resultSet.getTimestamp(1));

    InputStream ascii = mock(InputStream.class);
    when(mockResultSet.getAsciiStream(1)).thenReturn(ascii);
    assertEquals(ascii, resultSet.getAsciiStream(1));

    InputStream binary = mock(InputStream.class);
    when(mockResultSet.getBinaryStream(1)).thenReturn(binary);
    assertEquals(binary, resultSet.getBinaryStream(1));

    // Label-based
    when(mockResultSet.getString("col")).thenReturn("label-val");
    assertEquals("label-val", resultSet.getString("col"));

    when(mockResultSet.getBoolean("col")).thenReturn(false);
    assertFalse(resultSet.getBoolean("col"));

    when(mockResultSet.getByte("col")).thenReturn((byte) 10);
    assertEquals(10, resultSet.getByte("col"));

    when(mockResultSet.getShort("col")).thenReturn((short) 99);
    assertEquals(99, resultSet.getShort("col"));

    when(mockResultSet.getInt("col")).thenReturn(7);
    assertEquals(7, resultSet.getInt("col"));

    when(mockResultSet.getLong("col")).thenReturn(9999L);
    assertEquals(9999L, resultSet.getLong("col"));

    when(mockResultSet.getFloat("col")).thenReturn(3.14f);
    assertEquals(3.14f, resultSet.getFloat("col"), 0.0001);

    when(mockResultSet.getDouble("col")).thenReturn(6.28d);
    assertEquals(6.28d, resultSet.getDouble("col"), 0.0001);

    when(mockResultSet.getBytes("col")).thenReturn(bytes);
    assertArrayEquals(bytes, resultSet.getBytes("col"));

    when(mockResultSet.getDate("col")).thenReturn(date);
    assertEquals(date, resultSet.getDate("col"));

    when(mockResultSet.getTime("col")).thenReturn(time);
    assertEquals(time, resultSet.getTime("col"));

    when(mockResultSet.getTimestamp("col")).thenReturn(ts);
    assertEquals(ts, resultSet.getTimestamp("col"));

    when(mockResultSet.getAsciiStream("col")).thenReturn(ascii);
    assertEquals(ascii, resultSet.getAsciiStream("col"));

    when(mockResultSet.getBinaryStream("col")).thenReturn(binary);
    assertEquals(binary, resultSet.getBinaryStream("col"));
  }
}
