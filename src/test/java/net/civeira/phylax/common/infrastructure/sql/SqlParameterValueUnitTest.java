/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class SqlParameterValueUnitTest {

  private PreparedStatement ps;

  @BeforeEach
  void setUp() {
    ps = mock(PreparedStatement.class);
  }

  @Test
  void testString() throws SQLException {
    SqlParameterValue param = SqlParameterValue.of("hello");
    param.accept(1, ps);
    verify(ps).setString(1, "hello");
    assertEquals("hello", param.valueDescription());
  }

  @Test
  void testNullString() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullString();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.VARCHAR);
    assertEquals("NULL", param.valueDescription());
  }

  @Test
  void testLong() throws SQLException {
    SqlParameterValue param = SqlParameterValue.of(42L);
    param.accept(1, ps);
    verify(ps).setLong(1, 42L);
  }

  @Test
  void testNullLong() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullLong();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.NUMERIC);
  }

  @Test
  void testInt() throws SQLException {
    SqlParameterValue param = SqlParameterValue.of(7);
    param.accept(1, ps);
    verify(ps).setInt(1, 7);
  }

  @Test
  void testNullInteger() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullInteger();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.INTEGER);
  }

  @Test
  void testDouble() throws SQLException {
    SqlParameterValue param = SqlParameterValue.of(3.14);
    param.accept(1, ps);
    verify(ps).setDouble(1, 3.14);
  }

  @Test
  void testNullDouble() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullDouble();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.DOUBLE);
  }

  @Test
  void testFloat() throws SQLException {
    SqlParameterValue param = SqlParameterValue.of(2.71f);
    param.accept(1, ps);
    verify(ps).setFloat(1, 2.71f);
  }

  @Test
  void testNullFloat() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullFloat();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.FLOAT);
  }

  @Test
  void testBoolean() throws SQLException {
    SqlParameterValue param = SqlParameterValue.of(true);
    param.accept(1, ps);
    verify(ps).setBoolean(1, true);
  }

  @Test
  void testNullBoolean() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullBoolean();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.BOOLEAN);
  }

  @Test
  void testByte() throws SQLException {
    SqlParameterValue param = SqlParameterValue.of((byte) 8);
    param.accept(1, ps);
    verify(ps).setByte(1, (byte) 8);
  }

  @Test
  void testNullByte() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullByte();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.SMALLINT);
  }

  @Test
  void testShort() throws SQLException {
    SqlParameterValue param = SqlParameterValue.of((short) 16);
    param.accept(1, ps);
    verify(ps).setShort(1, (short) 16);
  }

  @Test
  void testNullShort() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullShort();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.SMALLINT);
  }

  @Test
  void testBigDecimal() throws SQLException {
    BigDecimal value = new BigDecimal("123.45");
    SqlParameterValue param = SqlParameterValue.of(value);
    param.accept(1, ps);
    verify(ps).setBigDecimal(1, value);
  }

  @Test
  void testNullBigDecimal() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullBigDecimal();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.BIGINT);
  }

  @Test
  void testDate() throws SQLException {
    Date date = Date.valueOf("2024-01-01");
    SqlParameterValue param = SqlParameterValue.of(date);
    param.accept(1, ps);
    verify(ps).setDate(1, date);
  }

  @Test
  void testNullDate() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullDate();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.DATE);
  }

  @Test
  void testTime() throws SQLException {
    Time time = Time.valueOf("12:34:56");
    SqlParameterValue param = SqlParameterValue.of(time);
    param.accept(1, ps);
    verify(ps).setTime(1, time);
  }

  @Test
  void testNullTime() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullTime();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.TIME);
  }

  @Test
  void testTimestamp() throws SQLException {
    Timestamp ts = Timestamp.valueOf("2024-01-01 12:00:00");
    SqlParameterValue param = SqlParameterValue.of(ts);
    param.accept(1, ps);
    verify(ps).setTimestamp(1, ts);
  }

  @Test
  void testNullTimestamp() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullTimestamp();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.TIMESTAMP);
  }

  @Test
  void testByteArray() throws SQLException {
    byte[] bytes = new byte[] {1, 2, 3};
    SqlParameterValue param = SqlParameterValue.of(bytes);
    param.accept(1, ps);
    verify(ps).setBytes(1, bytes);
  }

  @Test
  void testBinaryStream() throws SQLException {
    InputStream stream = new ByteArrayInputStream("abc".getBytes());
    SqlParameterValue param = SqlParameterValue.ofBinary(stream);
    param.accept(1, ps);
    verify(ps).setBinaryStream(eq(1), any(InputStream.class));
  }

  @Test
  void testTextStream() throws SQLException {
    InputStream stream = new ByteArrayInputStream("text".getBytes());
    SqlParameterValue param = SqlParameterValue.ofText(stream);
    param.accept(1, ps);
    verify(ps).setAsciiStream(eq(1), any(InputStream.class));
  }

  @Test
  void testNullStream() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullStream();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.BINARY);
  }

  @Test
  void testLocalDate() throws SQLException {
    LocalDate date = LocalDate.of(2023, 12, 25);
    SqlParameterValue param = SqlParameterValue.of(date);
    param.accept(1, ps);
    verify(ps).setDate(1, Date.valueOf(date));
  }

  @Test
  void testNullLocalDate() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullLocalDate();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.DATE);
  }

  @Test
  void testLocalDateTime() throws SQLException {
    LocalDateTime dateTime = LocalDateTime.of(2023, 12, 25, 10, 15);
    SqlParameterValue param = SqlParameterValue.of(dateTime);
    param.accept(1, ps);
    verify(ps).setTimestamp(1, Timestamp.valueOf(dateTime));
  }

  @Test
  void testNullLocalDateTime() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullLocalDateTime();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.TIMESTAMP);
  }

  @Test
  void testOffsetDateTime() throws SQLException {
    OffsetDateTime offsetDateTime = OffsetDateTime.parse("2023-12-25T10:15:30+01:00");
    SqlParameterValue param = SqlParameterValue.of(offsetDateTime);
    param.accept(1, ps);
    verify(ps).setTimestamp(1, Timestamp.valueOf(offsetDateTime.toLocalDateTime()));
  }

  @Test
  void testNullOffsetDateTime() throws SQLException {
    SqlParameterValue param = SqlParameterValue.ofNullOffsetDateTime();
    param.accept(1, ps);
    verify(ps).setNull(1, Types.TIMESTAMP);
  }
}
