/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.jupiter.api.Test;

class PartialWhereUnitTest {

  @Test
  void testEmptyIsEmpty() {
    PartialWhere empty = PartialWhere.empty();
    assertTrue(empty.isEmpty());
  }

  @Test
  void testWhereSingleCondition() {
    SqlParameterValue value = SqlParameterValue.of("test");
    PartialWhere where = PartialWhere.where("field", SqlOperator.EQ, value);
    assertFalse(where.isEmpty());
  }

  @Test
  void testWhereWithOn() {
    SqlParameterValue value = SqlParameterValue.of("value");
    PartialWhere where = PartialWhere.where("t", "id", SqlOperator.NE, value);
    assertFalse(where.isEmpty());
  }

  @Test
  void testAndMultiplePartials() {
    PartialWhere p1 = PartialWhere.where("a", SqlOperator.EQ, SqlParameterValue.of(1));
    PartialWhere p2 = PartialWhere.where("b", SqlOperator.EQ, SqlParameterValue.of(2));
    PartialWhere and = PartialWhere.and(p1, p2);

    assertFalse(and.isEmpty());
  }

  @Test
  void testAndWithOptionals() {
    Optional<PartialWhere> p1 =
        Optional.of(PartialWhere.where("x", SqlOperator.LT, SqlParameterValue.of(1)));
    Optional<PartialWhere> p2 =
        Optional.of(PartialWhere.where("y", SqlOperator.GT, SqlParameterValue.of(2)));
    PartialWhere and = PartialWhere.and(p1, p2);

    assertFalse(and.isEmpty());
  }

  @Test
  void testAndWithEmptyOptional() {
    Optional<PartialWhere> p1 = Optional.empty();
    PartialWhere and = PartialWhere.and(p1);

    assertTrue(and.isEmpty());
  }

  @Test
  void testOrWithOptionals() {
    Optional<PartialWhere> p1 =
        Optional.of(PartialWhere.where("a", SqlOperator.LT, SqlParameterValue.of(5)));
    Optional<PartialWhere> p2 = Optional.empty();
    PartialWhere or = PartialWhere.or(p1, p2);

    assertFalse(or.isEmpty());
  }

  @Test
  void testOrWithEmptyOptionals() {
    Optional<PartialWhere> p1 = Optional.empty();
    Optional<PartialWhere> p2 = Optional.empty();
    PartialWhere or = PartialWhere.or(p1, p2);

    assertTrue(or.isEmpty());
  }

  @Test
  void testOrMultiplePartials() {
    PartialWhere p1 = PartialWhere.where("a", SqlOperator.EQ, SqlParameterValue.of(1));
    PartialWhere p2 = PartialWhere.where("b", SqlOperator.EQ, SqlParameterValue.of(2));
    PartialWhere or = PartialWhere.or(p1, p2);

    assertFalse(or.isEmpty());
  }

  @Test
  void testNotCondition() {
    PartialWhere p = PartialWhere.where("x", SqlOperator.GT, SqlParameterValue.of(10));
    PartialWhere not = PartialWhere.not(p);
    assertFalse(not.isEmpty());
  }

  @Test
  void testNotOptionalPresent() {
    Optional<PartialWhere> p =
        Optional.of(PartialWhere.where("x", SqlOperator.LT, SqlParameterValue.of(100)));
    PartialWhere not = PartialWhere.not(p);

    assertFalse(not.isEmpty());
  }

  @Test
  void testNotOptionalEmpty() {
    Optional<PartialWhere> p = Optional.empty();
    PartialWhere not = PartialWhere.not(p);

    assertTrue(not.isEmpty());
  }

  @SuppressWarnings({"unchecked", "rawtypes"})
  @Test
  void testAppendWithSingleCondition() {
    SchematicQuery query = mock(SchematicQuery.class);
    AbstractSqlParametrized inner = mock(AbstractSqlParametrized.class);

    when(query.getParametrized()).thenReturn(inner);
    when(query.escape(any())).thenAnswer(inv -> inv.getArguments()[0]);

    SqlParameterValue value = SqlParameterValue.of("v");
    PartialWhere where = PartialWhere.where("t", "name", SqlOperator.EQ, value);

    String sql = where.append(0, query);
    assertTrue(sql.contains(":_field_1"));
    verify(inner).with("_field_1", value); // Param name will be without underscore in mock
  }

  @SuppressWarnings({"unchecked", "rawtypes"})
  @Test
  void testAppendWithNestedConditions() {
    SchematicQuery query = mock(SchematicQuery.class);
    AbstractSqlParametrized inner = mock(AbstractSqlParametrized.class);
    when(query.getParametrized()).thenReturn(inner);
    when(query.escape(any())).thenAnswer(inv -> inv.getArguments()[0]);

    PartialWhere a = PartialWhere.where("a", SqlOperator.EQ, SqlParameterValue.of(1));
    PartialWhere b = PartialWhere.where("b", SqlOperator.EQ, SqlParameterValue.of(2));
    PartialWhere and = PartialWhere.and(a, b);

    String sql = and.append(0, query);
    assertTrue(sql.contains("a ="));
    assertTrue(sql.contains("b ="));
    assertTrue(sql.contains("and"));
    verify(inner, atLeastOnce()).with(any(), any());
  }

  @Test
  void testAppendWithEmpty() {
    SchematicQuery query = mock(SchematicQuery.class);
    PartialWhere empty = PartialWhere.empty();

    String sql = empty.append(0, query);
    assertEquals("", sql);
  }

  @Test
  void testAndWithEmptyPartials() {
    PartialWhere empty1 = PartialWhere.empty();
    PartialWhere empty2 = PartialWhere.empty();

    PartialWhere and = PartialWhere.and(empty1, empty2);
    assertTrue(and.isEmpty());
  }

  @Test
  void testOrWithEmptyPartials() {
    PartialWhere empty1 = PartialWhere.empty();
    PartialWhere empty2 = PartialWhere.empty();

    PartialWhere or = PartialWhere.or(empty1, empty2);
    assertTrue(or.isEmpty());
  }

  @Test
  void testAndOptionalsWithEmptyInternals() {
    Optional<PartialWhere> p1 = Optional.of(PartialWhere.empty());
    Optional<PartialWhere> p2 = Optional.of(PartialWhere.empty());

    PartialWhere and = PartialWhere.and(p1, p2);
    assertTrue(and.isEmpty());
  }

  @Test
  void testOrOptionalsWithEmptyInternals() {
    Optional<PartialWhere> p1 = Optional.of(PartialWhere.empty());
    Optional<PartialWhere> p2 = Optional.of(PartialWhere.empty());

    PartialWhere or = PartialWhere.or(p1, p2);
    assertTrue(or.isEmpty());
  }

  @Test
  void testNotWithEmptyPartial() {
    PartialWhere empty = PartialWhere.empty();
    PartialWhere not = PartialWhere.not(empty);

    assertTrue(not.isEmpty());
  }

  @Test
  void testNotOptionalWithEmptyInternal() {
    Optional<PartialWhere> emptyOpt = Optional.of(PartialWhere.empty());
    PartialWhere not = PartialWhere.not(emptyOpt);

    assertTrue(not.isEmpty());
  }

  @Test
  @SuppressWarnings("unchecked")
  void testAppendSkipsEmptyNestedPartial() {
    // Arrange
    SchematicQuery query = mock(SchematicQuery.class);
    when(query.getParametrized()).thenReturn(mock(AbstractSqlParametrized.class));

    // Outer PartialWhere (manually built)
    PartialWhere outer = PartialWhere.empty();
    // Simular un param[] con un PartialWhere vac√≠o
    outer.params.add(new Object[] {PartialWhere.empty()});

    // Act
    String result = outer.append(0, query);

    // Assert
    assertEquals("", result); // Nothing should be appended
  }
}
