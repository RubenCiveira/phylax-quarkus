/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * Unit tests for the SqlQuery class.
 */
public class SqlQueryUnitTest {

  private SqlTemplate mockTemplate;
  private SqlConverter<String> mockConverter;
  private SqlResult<String> mockResult;
  private final String baseSql = "SELECT * FROM test";

  @BeforeEach
  @SuppressWarnings("unchecked")
  public void setup() {
    mockTemplate = mock(SqlTemplate.class);
    mockConverter = mock(SqlConverter.class);
    mockResult = mock(SqlResult.class);

    when(mockTemplate.sqlWithQueryLock(baseSql)).thenReturn(baseSql + " FOR UPDATE");
  }

  @Test
  public void testForUpdateAddsLock() {
    SqlQuery<String> query = new SqlQuery<>(mockTemplate, baseSql);
    query = query.forUpdate();

    assertNotNull(query);
    query.query(mockConverter);

    verify(mockTemplate).sqlWithQueryLock(baseSql);
  }

  @Test
  public void testForQueryDisablesLock() {
    SqlQuery<String> query = new SqlQuery<>(mockTemplate, baseSql);
    query = query.forUpdate().forQuery();

    query.query(mockConverter);

    verify(mockTemplate, never()).sqlWithQueryLock(anyString());
  }

  @Test
  public void testWithParameterReturnsSelf() {
    SqlQuery<String> query = new SqlQuery<>(mockTemplate, baseSql);
    SqlParameterValue paramValue = mock(SqlParameterValue.class);

    SqlQuery<String> returned = query.with("id", paramValue);
    assertSame(query, returned);
  }

  @Test
  public void testQueryReturnsResult() {
    SqlQuery<String> query = spy(new SqlQuery<>(mockTemplate, baseSql));
    doReturn(mockResult).when(query).executeQuery(eq(baseSql), any());

    SqlResult<String> result = query.query(mockConverter);

    assertSame(mockResult, result);
    verify(query).executeQuery(baseSql, mockConverter);
  }
}
