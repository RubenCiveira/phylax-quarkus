/* @autogenerated */
package net.civeira.phylax.testing.mock;

import java.io.Closeable;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.LogRecord;

public class LoggerChecker implements Closeable {

  /**
   * Try to get log from Slf4j lombok annotation or private static final org.slf4j.Logger log =
   * org.slf4j.LoggerFactory.getLogger(LogExample.class);
   * 
   * it use it as a jboss in quarkus managed logger
   * 
   * @param instance
   * @return
   */
  public static LoggerChecker bind(Object instance) {
    try {
      Field declaredField = instance.getClass().getDeclaredField("log");
      declaredField.setAccessible(true);
      Object obj = declaredField.get(null);

      Field loggerField = org.slf4j.impl.Slf4jLogger.class.getDeclaredField("logger");
      loggerField.setAccessible(true);
      Object logger = loggerField.get(obj);

      return new LoggerChecker((org.jboss.logmanager.Logger) logger);
    } catch (Exception ex) {
      throw new RuntimeException(ex);
    }
  }

  private final java.util.logging.Level current;
  private final org.jboss.logmanager.Logger manager;
  private final List<LogRecord> records = new ArrayList<>();

  private LoggerChecker(org.jboss.logmanager.Logger manager) {
    this.manager = manager;
    this.current = this.manager.getLevel();
    this.manager.setLevel(org.jboss.logmanager.Level.OFF);
    this.manager.addHandler(new java.util.logging.Handler() {
      public void publish(LogRecord record) {
        records.add(record);
      }

      public void flush() {}

      public void close() throws SecurityException {}
    });
  }

  public void reset() {
    records.clear();
  }

  public void close() {
    manager.setLevel(current);
  }

  public void setLevelToOff() {
    manager.setLevel(org.jboss.logmanager.Level.OFF);
  }

  public void setLevelToFatal() {
    manager.setLevel(org.jboss.logmanager.Level.FATAL);
  }

  public void setLevelToError() {
    manager.setLevel(org.jboss.logmanager.Level.ERROR);
  }

  public void setLevelToWarn() {
    manager.setLevel(org.jboss.logmanager.Level.WARN);
  }

  public void setLevelToInfo() {
    manager.setLevel(org.jboss.logmanager.Level.INFO);
  }

  public void setLevelToDebug() {
    manager.setLevel(org.jboss.logmanager.Level.DEBUG);
  }

  public void setLevelToTrace() {
    manager.setLevel(org.jboss.logmanager.Level.TRACE);
  }

  public void setLevelToAll() {
    manager.setLevel(org.jboss.logmanager.Level.ALL);
  }

  public boolean containsFatal(String message) {
    return contains(message, org.jboss.logmanager.Level.FATAL);
  }

  public boolean containsError(String message) {
    return contains(message, org.jboss.logmanager.Level.ERROR);
  }

  public boolean containsWarning(String message) {
    return contains(message, org.jboss.logmanager.Level.WARN);
  }

  public boolean containsInfo(String message) {
    return contains(message, org.jboss.logmanager.Level.INFO);
  }

  public boolean containsDebug(String message) {
    return contains(message, org.jboss.logmanager.Level.DEBUG);
  }

  public boolean containsTrace(String message) {
    return contains(message, org.jboss.logmanager.Level.TRACE);
  }

  public int logCount() {
    return this.records.size();
  }

  private boolean contains(String message, java.util.logging.Level level) {
    return this.records.stream().anyMatch(event -> event.getLevel().intValue() == level.intValue()
        && event.getMessage().contains(message));
  }
}
