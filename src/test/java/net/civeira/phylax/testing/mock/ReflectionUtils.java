/* @autogenerated */
package net.civeira.phylax.testing.mock;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ReflectionUtils {

  public static <T> T runMethod(Object instance, String name, Object... params) throws Exception {
    @SuppressWarnings("rawtypes")
    Class[] types = new Class[params.length];
    for (int i = 0; i < types.length; i++) {
      types[i] = params[i].getClass();
    }
    return runMethod(instance, name, params, types);
  }

  @SuppressWarnings({"unchecked", "rawtypes"})
  public static <T> T runMethod(Object instance, String name, Object[] params, Class[] types)
      throws Exception {
    try {
      Class<? extends Object> class1 = instance.getClass();
      Method declaredMethod = class1.getDeclaredMethod(name, types);
      declaredMethod.setAccessible(true);
      return (T) declaredMethod.invoke(instance, params);
    } catch (NoSuchMethodException | SecurityException | IllegalAccessException
        | IllegalArgumentException e1) {
      throw new IllegalStateException(e1);
    } catch (InvocationTargetException e) {
      throw (Exception) e.getCause();
    }
  }

  public static void writeProperty(Object instance, String name, Object value) {
    try {
      Class<? extends Object> class1 = instance.getClass();
      Field field = class1.getDeclaredField(name);
      field.setAccessible(true);
      field.set(instance, value);
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    }
  }

  @SuppressWarnings("unchecked")
  public static <T> T readProperty(Object instance, String name) {
    try {
      Class<? extends Object> class1 = instance.getClass();
      Field field = class1.getDeclaredField(name);
      field.setAccessible(true);
      return (T) field.get(instance);
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    }
  }

}
