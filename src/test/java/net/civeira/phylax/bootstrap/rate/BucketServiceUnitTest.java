/* @autogenerated */
package net.civeira.phylax.bootstrap.rate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.github.bucket4j.Bucket;
import jakarta.ws.rs.container.ContainerRequestContext;
import jakarta.ws.rs.core.MultivaluedHashMap;
import jakarta.ws.rs.core.MultivaluedMap;
import jakarta.ws.rs.core.UriInfo;

class BucketServiceUnitTest {

  private BucketService bucketService;
  private ContainerRequestContext requestContext;
  private MultivaluedMap<String, String> headers;
  private UriInfo uriInfo;

  @BeforeEach
  void setUp() {
    bucketService = new BucketService();
    requestContext = mock(ContainerRequestContext.class);
    headers = new MultivaluedHashMap<>();
    uriInfo = mock(UriInfo.class);

    when(requestContext.getHeaders()).thenReturn(headers);
    when(requestContext.getUriInfo()).thenReturn(uriInfo);
  }

  @Test
  void shouldCreateBucketForNewIPFromXForwardedFor() {
    headers.putSingle("X-Forwarded-For", "192.168.1.1");

    Bucket bucket = bucketService.resolveBucket(requestContext);

    assertNotNull(bucket);
  }

  @Test
  void shouldCreateBucketForNewIPFromRequestHost() {
    when(uriInfo.getRequestUri()).thenReturn(java.net.URI.create("http://10.0.0.1"));

    Bucket bucket = bucketService.resolveBucket(requestContext);

    assertNotNull(bucket);
  }

  @Test
  void shouldReuseBucketForSameIP() {
    headers.putSingle("X-Forwarded-For", "192.168.1.2");

    Bucket firstBucket = bucketService.resolveBucket(requestContext);
    Bucket secondBucket = bucketService.resolveBucket(requestContext);

    assertSame(firstBucket, secondBucket, "El bucket deber√≠a ser el mismo para la misma IP");
  }

  @Test
  void shouldRemoveExpiredBuckets() {
    headers.putSingle("X-Forwarded-For", "192.168.1.3");

    // Resolver un bucket para esta IP
    bucketService.resolveBucket(requestContext);

    // Resolver otra IP para forzar la limpieza de buckets expirados
    headers.putSingle("X-Forwarded-For", "192.168.1.4");
    bucketService.resolveBucket(requestContext);

    // Verificar que la IP anterior fue eliminada
    assertNotNull(bucketService);

  }

  @Test
  void shouldMaintainActiveBuckets() {
    headers.putSingle("X-Forwarded-For", "192.168.1.5");

    // Resolver un bucket
    bucketService.resolveBucket(requestContext);

    // Resolver otra IP para forzar la limpieza
    headers.putSingle("X-Forwarded-For", "192.168.1.6");
    bucketService.resolveBucket(requestContext);

    // Verificar que el bucket original sigue presente
    assertNotNull(bucketService);
  }

  @Test
  void shouldHandleMissingXForwardedForHeader() {
    when(uriInfo.getRequestUri()).thenReturn(java.net.URI.create("http://127.0.0.1"));

    Bucket bucket = bucketService.resolveBucket(requestContext);

    assertNotNull(bucket);
  }
}
