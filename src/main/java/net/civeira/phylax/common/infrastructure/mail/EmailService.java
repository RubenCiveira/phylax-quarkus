/* autogenerated */
package net.civeira.phylax.common.infrastructure.mail;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.io.FileUtils;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.quarkus.mailer.Mail;
import io.quarkus.mailer.Mailer;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;

@ApplicationScoped
@RequiredArgsConstructor
public class EmailService {

  private static final Logger LOGGER = LoggerFactory.getLogger(EmailService.class);

  private final Mailer mailer;
  @ConfigProperty(name = "mailer.thread-pool", defaultValue = "5")
  private final int poolSize;
  @ConfigProperty(name = "mailer.auth-methods",
      defaultValue = "DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN")
  private final String mailAuthMethod;
  @ConfigProperty(name = "mailer.host", defaultValue = "")
  private final String mailHost;
  @ConfigProperty(name = "mailer.port", defaultValue = "857")
  private final int mailPort;
  @ConfigProperty(name = "mailer.start-tls", defaultValue = "REQUIRED")
  private final String mailStartTls;
  @ConfigProperty(name = "mailer.from", defaultValue = "")
  private final String mailFrom;
  @ConfigProperty(name = "mailer.username", defaultValue = "")
  private final String mailUsername;
  @ConfigProperty(name = "mailer.password", defaultValue = "")
  private final String mailPassword;

  private ExecutorService executor;

  public void delaySendMessages(EmailMessage... message) {
    delaySendMessages(Optional.empty(), message);
  }

  public synchronized void delaySendMessages(Optional<MailConfiguration> config,
      EmailMessage... message) {
    if (null == executor) {
      executor = Executors.newFixedThreadPool(10);
    }
    for (final EmailMessage emailMessage : message) {
      executor.submit(() -> sendMessage(emailMessage, config));
    }
  }

  public void sendMessage(EmailMessage message) {
    sendMessage(message, Optional.empty());
  }

  public void sendMessage(EmailMessage message, Optional<MailConfiguration> config) {
    try {
      String to = message.getTargetName() + " <" + message.getTargetAddress() + ">";
      Mail mail = null == message.getHtmlContent()
          ? Mail.withText(to, message.getSubject(), message.getContent())
          : Mail.withHtml(to, message.getSubject(), message.getHtmlContent());

      attached(mail, message.getEmbbeds(), true);
      attached(mail, message.getAttacheds(), false);
      if (null != message.getHtmlContent()) {
        mail.setText(
            null == message.getContent() ? message.getHtmlContent() : message.getContent());
      }
      /*
       * @ConfigProperty(name = "quarkus.mailer.from", defaultValue = "5") private final String
       * mailFrom;
       * 
       */
      System.setProperty("quarkus.mailer.host", mailHost);
      System.setProperty("quarkus.mailer.from", mailFrom);
      System.setProperty("quarkus.mailer.port", String.valueOf(mailPort));
      System.setProperty("quarkus.mailer.username", mailUsername);
      System.setProperty("quarkus.mailer.password", mailPassword);
      System.setProperty("quarkus.mailer.start-tls", mailStartTls);
      System.setProperty("quarkus.mailer.auth-methods", mailAuthMethod);

      config.ifPresent(conf -> {
        if (conf.isUseTtls()) {
          System.setProperty("quarkus.mailer.start-tls", "REQUIRED");
          System.setProperty("quarkus.mailer.auth-methods",
              "DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN");
        } else {
          System.setProperty("quarkus.mailer.start-tls", "NONE");
          System.setProperty("quarkus.mailer.auth-methods",
              "DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN");
        }
        System.setProperty("quarkus.mailer.host", conf.getSmtpHost());
        System.setProperty("quarkus.mailer.port", String.valueOf(conf.getSmtpPort()));
        System.setProperty("quarkus.mailer.username", conf.getSmtpLogin());
        System.setProperty("quarkus.mailer.password", conf.getSmtpPass());
        System.setProperty("quarkus.mailer.from",
            conf.getFromName() + "<" + conf.getFromEmail() + ">");
      });
      mailer.send(mail);
      System.err.println(mailFrom);
      System.err.println(this.mailHost);
      System.err.println(this.mailUsername);
      System.err.println(this.mailPassword);
      System.err.println("GOGOGOGGO");
      message.getSendedObserver().ifPresent(MailSended::ok);
    } catch (Exception ex) {
      message.getFailObserver().ifPresent(obs -> obs.fail(ex));
      LOGGER.error("Imposible enviar email {} a {} <{}> por {}", message.getSubject(),
          message.getTargetName(), message.getTargetAddress(), ex.getMessage());
    }
  }

  private void attached(Mail mail, List<Attach> attachs, boolean inline) {
    for (Attach attach : attachs) {
      attach.getFichero().ifPresent(file -> {
        String contentType = null;
        if (inline) {
          mail.addInlineAttachment(file.getName(), file, contentType, "<" + attach.getCid() + ">");
        } else {
          mail.addAttachment(file.getName(), file, contentType);
        }
      });
      attach.getDatasource().ifPresent(datasource -> {
        try {
          File file = Files.createTempFile("mail", ".bin").toFile();
          FileUtils.copyInputStreamToFile(datasource.getInputStream(), file);
          if (inline) {
            mail.addInlineAttachment(datasource.getName(), file, datasource.getContentType(),
                "<" + attach.getCid() + ">");
          } else {
            mail.addAttachment(datasource.getName(), file, datasource.getContentType());
          }
          file.delete();
        } catch (IOException ex) {
          LOGGER.error("Unable to retrieve attach datasource " + datasource.getName(), ex);
        }
      });
    }
  }
}
