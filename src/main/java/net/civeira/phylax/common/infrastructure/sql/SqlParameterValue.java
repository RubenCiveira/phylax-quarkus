/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;

/**
 * Represents a parameter value to be used in a {@link PreparedStatement}.
 * <p>
 * This interface abstracts the process of binding a parameter to a SQL statement, allowing for
 * dynamic or static values, including {@code null}s and various data types.
 * </p>
 */
public interface SqlParameterValue {
  /**
   * Creates a {@link SqlParameterValue} for a non-null {@code String} value.
   *
   * @param value the string value
   * @return a parameter wrapping the given string
   */
  static SqlParameterValue of(String value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setString(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} string.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code VARCHAR}
   */
  static SqlParameterValue ofNullString() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.VARCHAR));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@code long} value.
   *
   * @param value the long value
   * @return a parameter wrapping the given long
   */
  static SqlParameterValue of(long value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setLong(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} long value.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code NUMERIC}
   */
  static SqlParameterValue ofNullLong() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.NUMERIC));
  }

  /**
   * Creates a {@link SqlParameterValue} for an {@code int} value.
   *
   * @param value the integer value
   * @return a parameter wrapping the given integer
   */
  static SqlParameterValue of(int value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setInt(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} integer value.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code INTEGER}
   */
  static SqlParameterValue ofNullInteger() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.INTEGER));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@code double} value.
   *
   * @param value the double value
   * @return a parameter wrapping the given double
   */
  static SqlParameterValue of(double value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setDouble(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} double value.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code DOUBLE}
   */
  static SqlParameterValue ofNullDouble() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.DOUBLE));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@code float} value.
   *
   * @param value the float value
   * @return a parameter wrapping the given float
   */
  static SqlParameterValue of(float value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setFloat(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} float value.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code FLOAT}
   */
  static SqlParameterValue ofNullFloat() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.FLOAT));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@code boolean} value.
   *
   * @param value the boolean value
   * @return a parameter wrapping the given boolean
   */
  static SqlParameterValue of(boolean value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setBoolean(index, value));
  }


  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} boolean value.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code BOOLEAN}
   */
  static SqlParameterValue ofNullBoolean() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.BOOLEAN));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@code byte} value.
   *
   * @param value the byte value
   * @return a parameter wrapping the given byte
   */
  static SqlParameterValue of(byte value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setByte(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} byte value.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code SMALLINT}
   */
  static SqlParameterValue ofNullByte() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.SMALLINT));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@code short} value.
   *
   * @param value the short value
   * @return a parameter wrapping the given short
   */
  static SqlParameterValue of(short value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setShort(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} short value.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code SMALLINT}
   */
  static SqlParameterValue ofNullShort() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.SMALLINT));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@link BigDecimal} value.
   *
   * @param value the BigDecimal value
   * @return a parameter wrapping the given BigDecimal
   */
  static SqlParameterValue of(BigDecimal value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setBigDecimal(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} BigDecimal value.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code BIGINT}
   */
  static SqlParameterValue ofNullBigDecimal() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.BIGINT));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@link java.sql.Date} value.
   *
   * @param value the SQL date value
   * @return a parameter wrapping the given date
   */
  static SqlParameterValue of(Date value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setDate(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} SQL date.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code DATE}
   */
  static SqlParameterValue ofNullDate() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.DATE));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@link java.sql.Time} value.
   *
   * @param value the SQL time value
   * @return a parameter wrapping the given time
   */
  static SqlParameterValue of(Time value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setTime(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} SQL time.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code TIME}
   */
  static SqlParameterValue ofNullTime() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.TIME));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@link java.sql.Timestamp} value.
   *
   * @param value the SQL timestamp
   * @return a parameter wrapping the given timestamp
   */
  static SqlParameterValue of(Timestamp value) {
    return new StaticSqlParameterValue(value, (index, ps) -> ps.setTimestamp(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} SQL timestamp.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code TIMESTAMP}
   */
  static SqlParameterValue ofNullTimestamp() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.TIMESTAMP));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} binary stream.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code BINARY}
   */
  static SqlParameterValue ofNullStream() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.BINARY));
  }

  /**
   * Creates a {@link SqlParameterValue} for a byte array.
   *
   * @param value the byte array
   * @return a parameter wrapping the given byte array
   */
  static SqlParameterValue of(byte[] value) {
    return new StaticSqlParameterValue("byte[]", (index, ps) -> ps.setBytes(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} for a binary {@link InputStream}.
   *
   * @param value the input stream representing binary data
   * @return a parameter wrapping the given binary stream
   */
  static SqlParameterValue ofBinary(InputStream value) {
    return new StaticSqlParameterValue("<stream>", (index, ps) -> ps.setBinaryStream(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} for a text {@link InputStream}.
   *
   * @param value the input stream representing ASCII text
   * @return a parameter wrapping the given text stream
   */
  static SqlParameterValue ofText(InputStream value) {
    return new StaticSqlParameterValue("<text>", (index, ps) -> ps.setAsciiStream(index, value));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@link java.time.LocalDate} value.
   *
   * @param value the local date
   * @return a parameter wrapping the given date
   */
  static SqlParameterValue of(LocalDate value) {
    return new StaticSqlParameterValue(value,
        (index, ps) -> ps.setDate(index, Date.valueOf(value)));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} local date.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code DATE}
   */
  static SqlParameterValue ofNullLocalDate() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.DATE));
  }

  /**
   * Creates a {@link SqlParameterValue} for a {@link java.time.LocalDateTime} value.
   *
   * @param value the local date-time
   * @return a parameter wrapping the given date-time
   */
  static SqlParameterValue of(LocalDateTime value) {
    return new StaticSqlParameterValue(value,
        (index, ps) -> ps.setTimestamp(index, Timestamp.valueOf(value)));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} local date-time.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code TIMESTAMP}
   */
  static SqlParameterValue ofNullLocalDateTime() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.TIMESTAMP));
  }

  /**
   * Creates a {@link SqlParameterValue} for an {@link java.time.OffsetDateTime} value.
   *
   * @param value the offset date-time
   * @return a parameter wrapping the given offset date-time (stored as timestamp)
   */
  static SqlParameterValue of(OffsetDateTime value) {
    return new StaticSqlParameterValue(value,
        (index, ps) -> ps.setTimestamp(index, Timestamp.valueOf(value.toLocalDateTime())));
  }

  /**
   * Creates a {@link SqlParameterValue} representing a {@code NULL} offset date-time.
   *
   * @return a parameter representing a SQL {@code NULL} of type {@code TIMESTAMP}
   */
  static SqlParameterValue ofNullOffsetDateTime() {
    return new StaticSqlParameterValue("NULL", (index, ps) -> ps.setNull(index, Types.TIMESTAMP));
  }

  /**
   * Returns a human-readable description of the value, used primarily for debugging or logging.
   *
   * @return a description of the parameter value
   */
  String valueDescription();

  /**
   * Applies this parameter value to the specified index in a {@link PreparedStatement}.
   *
   * @param index the index of the parameter (1-based)
   * @param ps the prepared statement
   * @throws SQLException if an error occurs while setting the parameter
   */
  void accept(int index, PreparedStatement ps) throws SQLException;
}
