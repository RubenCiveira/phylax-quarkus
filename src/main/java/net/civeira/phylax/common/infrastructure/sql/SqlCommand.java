/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

/**
 * Represents an executable SQL command (e.g., INSERT, UPDATE, DELETE) with parameter support.
 * <p>
 * This class allows parameter binding and execution through a template engine, and is meant to be
 * used with SQL statements that do not return result sets.
 * </p>
 */
public final class SqlCommand extends AbstractSqlCommand<SqlCommand> {
  /**
   * The raw SQL statement to be executed.
   */
  private final String sql;


  /**
   * Constructs a new {@code SqlCommand} using the given SQL template and statement.
   *
   * @param template the SQL template engine used to prepare the final query
   * @param sql the SQL statement as a raw string
   */
  /* default */ SqlCommand(SqlTemplate template, String sql) {
    super(template);
    this.sql = sql;
  }

  /**
   * Binds a named parameter to this command.
   *
   * @param name the parameter name
   * @param consumer the parameter value object
   * @return this {@code SqlCommand} instance for fluent usage
   */
  @Override
  public SqlCommand with(String name, SqlParameterValue consumer) {
    super.with(name, consumer);
    return this;
  }

  /**
   * Executes the SQL command (e.g., INSERT, UPDATE, DELETE).
   *
   * @return the number of affected rows, or {@code null} if execution failed
   */
  @Override
  public Integer execute() {
    return executeUpdate(this.sql);
  }
}
