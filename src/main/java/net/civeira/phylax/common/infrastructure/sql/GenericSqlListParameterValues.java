/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * A generic implementation of {@link SqlListParameterValue} for handling arrays of any data type,
 * with logic for binding values to a {@link PreparedStatement}.
 *
 * @param <T> the type of the values in the list
 */
class GenericSqlListParameterValues<T> implements SqlListParameterValue {
  /**
   * A functional interface that defines how to bind a single value of type {@code T} to a
   * {@link PreparedStatement}.
   *
   * @param <T> the value type to bind
   */
  public static interface GenericSqlListParameterValue<T> {
    /**
     * Binds the given value to the {@link PreparedStatement} at the specified index.
     *
     * @param index the parameter index (1-based)
     * @param value the value to bind
     * @param ps the prepared statement to bind the value to
     * @throws SQLException if a database access error occurs
     */
    public abstract void accept(int index, T value, PreparedStatement ps) throws SQLException;
  }

  /**
   * The array of values to be bound to the SQL statement.
   */
  private final T[] data;
  /**
   * The lambda or strategy used to bind each individual value to the statement.
   */
  private final GenericSqlListParameterValues.GenericSqlListParameterValue<T> value;

  /**
   * Constructs a new list parameter value from the given data and binding logic.
   *
   * @param data the array of values to bind
   * @param value the function to apply each value to a {@link PreparedStatement}
   */
  public GenericSqlListParameterValues(T[] data,
      GenericSqlListParameterValues.GenericSqlListParameterValue<T> value) {
    this.data = data;
    this.value = value;
  }

  /**
   * Returns a human-readable string representation of the list values, used primarily for debugging
   * or logging.
   *
   * @return a string representing the list values
   */
  @Override
  public String valueDescription() {
    StringBuilder val = new StringBuilder();
    for (T in : data) {
      val.append("," + in);
    }
    return val.isEmpty() ? "[]" : "[" + val.substring(1) + "]";
  }

  /**
   * Applies the binding logic to all values in the list, using the provided
   * {@link PreparedStatement}.
   *
   * @param index the starting index for parameter binding (1-based)
   * @param ps the prepared statement
   * @throws SQLException if a database access error occurs
   */
  @Override
  public void accept(int index, PreparedStatement ps) throws SQLException {
    for (int i = 0; i < data.length; i++) {
      this.value.accept(index + i, data[i], ps);
    }
  }

  /**
   * Returns the number of values in the list.
   *
   * @return the size of the parameter list
   */
  @Override
  public int size() {
    return data.length;
  }
}
