/* @autogenerated */
package net.civeira.phylax.common.infrastructure.store;

import java.io.IOException;
import java.util.Optional;

/**
 * Interface for handling file storage in a repository.
 * <p>
 * Provides methods to temporarily store, retrieve, commit, replace, and delete files.
 * </p>
 */
public interface FileStore {

  /**
   * Copies the source data stream into a temporary storage and returns a temporary key to locate
   * the file later.
   * <p>
   * The temporary storage may be automatically cleaned periodically, so this should only be used
   * for short-term operations.
   * </p>
   *
   * @param source The binary content to store temporarily.
   * @return A {@link RepositoryLink} representing the temporary storage location.
   */
  RepositoryLink tempStore(BinaryContent source);

  /**
   * Retrieves a temporary file from storage.
   * <p>
   * The repository automatically deletes temporary files after a certain period.
   * </p>
   *
   * @param pathParam The key identifying the temporary file.
   * @return An {@link Optional} containing the {@link BinaryContent} if found, or empty if not.
   * @throws IOException If there is an issue accessing the file.
   */
  Optional<BinaryContent> retrieveTemp(String pathParam);

  /**
   * Retrieves a file from storage.
   *
   * @param key The key of the file to retrieve.
   * @return An {@link Optional} containing the {@link BinaryContent} if the file exists, or empty
   *         if not.
   */
  Optional<BinaryContent> retrieveFile(String key);

  /**
   * Moves a temporary file to permanent storage.
   * <p>
   * Files in permanent storage will not be deleted automatically unless explicitly removed.
   * </p>
   *
   * @param key The key of the temporary file.
   * @return A {@link RepositoryLink} pointing to the file's permanent storage location.
   */
  RepositoryLink commitContent(String key);

  /**
   * Moves a temporary file to permanent storage, replacing an existing file.
   * <p>
   * Files in permanent storage will not be deleted automatically unless explicitly removed.
   * </p>
   *
   * @param key The key of the temporary file.
   * @param link The {@link RepositoryLink} of the file to be replaced.
   * @return A {@link RepositoryLink} pointing to the newly stored file.
   */
  RepositoryLink commitReplace(String key, RepositoryLink link);

  /**
   * Replaces an existing file in storage with new content.
   *
   * @param key The key of the existing file.
   * @param content The new binary content to replace the existing file.
   * @return A {@link RepositoryLink} representing the updated file location.
   */
  RepositoryLink replaceContent(String key, BinaryContent content);

  /**
   * Deletes a file from the repository.
   *
   * @param key The key of the file to delete.
   */
  void deleteFile(String key);
}
