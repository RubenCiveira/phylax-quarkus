/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

/**
 * Represents SQL operators used for building query conditions. Each operator includes a SQL symbol
 * and an optional method to wrap parameters.
 */
public enum SqlOperator {
  /** Equal operator (=) */
  EQ("=", null),

  /** Not equal operator (!=) */
  NE("!=", null),

  /** Greater than operator (>) */
  GT(">", null),

  /** Less than operator (<) */
  LT("<", null),

  /** Greater than or equal operator (>=) */
  GTEQ(">=", null),

  /** Less than or equal operator (<=) */
  LTEQ("<=", null),

  /** IN operator (IN), typically used with a method to wrap the parameter */
  IN("IN", ""),

  /** LIKE operator (LIKE), used for pattern matching */
  LIKE("LIKE", null),

  /** IS NULL operator, checks for null values */
  IS_NULL("", null),

  /** IS NOT NULL operator, checks for non-null values */
  IS_NOT_NULL("", null);

  /**
   * The SQL symbol or keyword representing the operator.
   */
  /* default */ final String value;

  /**
   * Optional method name to wrap the parameter when formatting. If null, the parameter is used
   * directly.
   */
  /* default */ final String method;

  /**
   * Constructs a new SqlOperator with the given SQL symbol and method.
   *
   * @param value the SQL symbol (e.g., "=", "<", "IN")
   * @param method an optional method name to wrap the parameter (e.g., for IN clauses)
   */
  private SqlOperator(String value, String method) {
    this.value = value;
    this.method = method;
  }

  /**
   * Formats the input parameter for this SQL operator. If a method is specified, wraps the
   * parameter using that method.
   *
   * @param param the parameter to be formatted
   * @return the formatted SQL string with operator and parameter
   */
  public String format(String param) {
    return " " + (method == null ? param : method + "(" + param + ")");
  }
}
