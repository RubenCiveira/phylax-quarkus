/* @autogenerated */
package net.civeira.phylax.common.infrastructure.connector;

import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

/**
 * Interface representing a remote query that allows setting headers, query parameters, and path
 * parameters for a remote request. It also provides methods to define response processors.
 */
public interface RemoteQuery {

  /**
   * Adds a single header to the request.
   *
   * @param name The name of the header.
   * @param value The value of the header.
   * @return The current instance of {@link RemoteQuery} for method chaining.
   */
  RemoteQuery header(String name, String value);

  /**
   * Adds a header with multiple values to the request.
   *
   * @param name The name of the header.
   * @param values The list of values associated with the header.
   * @return The current instance of {@link RemoteQuery} for method chaining.
   */
  RemoteQuery header(String name, List<String> values);

  /**
   * Adds multiple headers to the request.
   *
   * @param headers A map containing header names as keys and lists of values as values.
   * @return The current instance of {@link RemoteQuery} for method chaining.
   */
  RemoteQuery headers(Map<String, List<String>> headers);

  /**
   * Adds a query parameter to the request URL.
   *
   * @param name The name of the query parameter.
   * @param value The value of the query parameter.
   * @return The current instance of {@link RemoteQuery} for method chaining.
   */
  RemoteQuery queryParam(String name, String value);

  /**
   * Adds multiple query parameters to the request URL.
   *
   * @param params A map containing query parameter names as keys and their respective values.
   * @return The current instance of {@link RemoteQuery} for method chaining.
   */
  RemoteQuery queryParam(Map<String, String> params);

  /**
   * Adds a path parameter to the request URL.
   *
   * @param name The name of the path parameter.
   * @param value The value of the path parameter.
   * @return The current instance of {@link RemoteQuery} for method chaining.
   */
  RemoteQuery pathParam(String name, String value);

  /**
   * Adds multiple path parameters to the request URL.
   *
   * @param params A map containing path parameter names as keys and their respective values.
   * @return The current instance of {@link RemoteQuery} for method chaining.
   */
  RemoteQuery pathParam(Map<String, String> params);

  /**
   * Defines a processor to handle the response of the request.
   *
   * @param <T> The type of the response object.
   * @param type The class type of the expected response.
   * @param consumer A consumer function to process the response.
   * @return A {@link RemoteConnection} instance representing the processed request.
   */
  <T> RemoteConnection processor(Class<T> type, Consumer<T> consumer);

  /**
   * Defines a processor that executes a {@link Runnable} upon receiving the response.
   *
   * @param runnable A runnable task to be executed after the request is processed.
   * @return A {@link RemoteConnection} instance representing the processed request.
   */
  RemoteConnection processor(Runnable runnable);
}
