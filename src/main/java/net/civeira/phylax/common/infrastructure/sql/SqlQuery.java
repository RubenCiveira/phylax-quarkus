/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

/**
 * Represents a typed SQL query that can be configured and executed. Allows parameter binding and
 * execution with or without locking (FOR UPDATE).
 *
 * @param <T> The type of the object to map the result to.
 */
public final class SqlQuery<T> extends AbstractSqlQuery<T, SqlQuery<T>> {

  /**
   * The SQL string to be executed.
   */
  private final String sql;

  /**
   * The SQL template engine used to build and execute the query.
   */
  private final SqlTemplate template;

  /**
   * Flag indicating whether the query should be executed with a row lock (FOR UPDATE).
   */
  private boolean lock = false;

  /**
   * Constructs a new SqlQuery.
   *
   * @param template the SQL template engine used to prepare the final query
   * @param sql the SQL statement as a string
   */
  /* default */ SqlQuery(SqlTemplate template, String sql) {
    super(template);
    this.sql = sql;
    this.template = template;
  }

  /**
   * Enables row locking for this query (i.e., adds FOR UPDATE).
   *
   * @return the current SqlQuery instance with locking enabled
   */
  public SqlQuery<T> forUpdate() {
    lock = true;
    return this;
  }

  /**
   * Disables row locking for this query.
   *
   * @return the current SqlQuery instance with locking disabled
   */
  public SqlQuery<T> forQuery() {
    lock = false;
    return this;
  }

  /**
   * Adds a named parameter to the query.
   *
   * @param name the name of the parameter
   * @param consumer the value provider for the parameter
   * @return the current SqlQuery instance
   */
  @Override
  public SqlQuery<T> with(String name, SqlParameterValue consumer) {
    super.with(name, consumer);
    return this;
  }

  /**
   * Executes the SQL query using the given converter. Applies locking if {@code forUpdate()} was
   * called.
   *
   * @param converter the result converter
   * @return the result of the query execution
   */
  @Override
  public SqlResult<T> query(SqlConverter<T> converter) {
    return executeQuery(lock ? template.sqlWithQueryLock(sql) : sql, converter);
  }
}
