/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * A simple implementation of {@link SqlParameterValue} that wraps a static value and a custom
 * binder to a {@link PreparedStatement}.
 * <p>
 * This class is intended for internal use and is not exposed publicly. It is primarily used by the
 * static factory methods in {@link SqlParameterValue}.
 */
/* default */ class StaticSqlParameterValue implements SqlParameterValue {

  /**
   * Functional interface for accepting a value into a {@link PreparedStatement}.
   */
  /* default */ static interface CustomAccepter {
    /**
     * Applies a value to the given {@code index} of the {@code PreparedStatement}.
     *
     * @param index the 1-based index of the parameter
     * @param ps the prepared statement
     * @throws SQLException if an error occurs while setting the value
     */
    void accept(int index, PreparedStatement ps) throws SQLException;
  }

  private final String value;
  private final CustomAccepter accepter;

  /**
   * Constructs a {@code StaticSqlParameterValue} using an object to describe the value. The
   * {@code toString()} representation of the value is used for logging purposes.
   *
   * @param value the value to describe
   * @param accepter the logic for applying this value to a prepared statement
   */
  public StaticSqlParameterValue(Object value, CustomAccepter accepter) {
    this.value = String.valueOf(value);
    this.accepter = accepter;
  }

  /**
   * Constructs a {@code StaticSqlParameterValue} with a custom string representation.
   *
   * @param value a string description of the value
   * @param accepter the logic for applying this value to a prepared statement
   */
  public StaticSqlParameterValue(String value, CustomAccepter accepter) {
    this.value = value;
    this.accepter = accepter;
  }

  /**
   * Returns a string description of the parameter value, typically for logging.
   *
   * @return the string representation of the value
   */
  @Override
  public String valueDescription() {
    return value;
  }

  /**
   * Applies the parameter value to the given index in the provided {@code PreparedStatement}.
   *
   * @param index the 1-based index of the parameter
   * @param ps the prepared statement
   * @throws SQLException if an error occurs while binding the parameter
   */
  @Override
  public void accept(int index, PreparedStatement ps) throws SQLException {
    accepter.accept(index, ps);
  }

}
