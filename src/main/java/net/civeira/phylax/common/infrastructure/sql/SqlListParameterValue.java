/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Represents a SQL parameter that contains a list of values.
 * <p>
 * This interface is designed for use in SQL statements that require multiple values, such as
 * {@code IN (...)}, allowing dynamic binding of lists of typed parameters.
 * </p>
 * <p>
 * Static factory methods are provided for a wide range of common types, enabling safe and
 * convenient construction of {@link SqlListParameterValue} instances.
 * </p>
 */
public interface SqlListParameterValue extends SqlParameterValue {
  /**
   * Creates a list parameter from an array of {@link String} values.
   *
   * @param values the string values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(String... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setString(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of strings.
   *
   * @param values the list of string values
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue strings(List<String> values) {
    return of(values.toArray(new String[0]));
  }

  /**
   * Creates a list parameter from an array of {@link Integer} values.
   *
   * @param values the integer values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(Integer... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setInt(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of integers.
   *
   * @param values the list of integer values
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue integers(List<Integer> values) {
    return of(values.toArray(new Integer[0]));
  }

  /**
   * Creates a list parameter from an array of {@link Long} values.
   *
   * @param values the long values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(Long... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setLong(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of longs.
   *
   * @param values the list of long values
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue longs(List<Long> values) {
    return of(values.toArray(new Long[0]));
  }

  /**
   * Creates a list parameter from an array of {@link Double} values.
   *
   * @param values the double values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(Double... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setDouble(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of doubles.
   *
   * @param values the list of double values
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue doubles(List<Double> values) {
    return of(values.toArray(new Double[0]));
  }

  /**
   * Creates a list parameter from an array of {@link Boolean} values.
   *
   * @param values the boolean values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(Boolean... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setBoolean(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of booleans.
   *
   * @param values the list of boolean values
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue booleans(List<Boolean> values) {
    return of(values.toArray(new Boolean[0]));
  }

  /**
   * Creates a list parameter from an array of {@link BigDecimal} values.
   *
   * @param values the big decimal values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(BigDecimal... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setBigDecimal(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of big decimals.
   *
   * @param values the list of big decimal values
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue bigDecimals(List<BigDecimal> values) {
    return of(values.toArray(new BigDecimal[0]));
  }

  /**
   * Creates a list parameter from an array of {@link Date} values.
   *
   * @param values the SQL date values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(Date... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setDate(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of SQL dates.
   *
   * @param values the list of SQL dates
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue dates(List<Date> values) {
    return of(values.toArray(new Date[0]));
  }

  /**
   * Creates a list parameter from an array of {@link Time} values.
   *
   * @param values the SQL time values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(Time... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setTime(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of SQL times.
   *
   * @param values the list of SQL times
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue times(List<Time> values) {
    return of(values.toArray(new Time[0]));
  }

  /**
   * Creates a list parameter from an array of {@link Timestamp} values.
   *
   * @param values the SQL timestamp values to bind
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue of(Timestamp... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setTimestamp(index, value));
  }

  /**
   * Creates a list parameter from a {@link List} of SQL timestamps.
   *
   * @param values the list of SQL timestamps
   * @return a {@link SqlListParameterValue} instance
   */
  static SqlListParameterValue timestamps(List<Timestamp> values) {
    return of(values.toArray(new Timestamp[0]));
  }

  /**
   * Creates a list parameter from an array of {@link LocalDate} values.
   *
   * @param values the LocalDate values to bind
   * @return a {@link SqlParameterValue} instance
   */
  static SqlParameterValue of(LocalDate... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setDate(index, Date.valueOf(value)));
  }

  /**
   * Creates a list parameter from a {@link List} of {@link LocalDate}.
   *
   * @param values the list of LocalDate values
   * @return a {@link SqlParameterValue} instance
   */
  static SqlParameterValue localdates(List<LocalDate> values) {
    return of(values.toArray(new LocalDate[0]));
  }

  /**
   * Creates a list parameter from an array of {@link LocalDateTime} values.
   *
   * @param values the LocalDateTime values to bind
   * @return a {@link SqlParameterValue} instance
   */
  static SqlParameterValue of(LocalDateTime... values) {
    return new GenericSqlListParameterValues<>(values,
        (index, value, ps) -> ps.setTimestamp(index, Timestamp.valueOf(value)));
  }

  /**
   * Creates a list parameter from a {@link List} of {@link LocalDateTime}.
   *
   * @param values the list of LocalDateTime values
   * @return a {@link SqlParameterValue} instance
   */
  static SqlParameterValue localdatetimes(List<LocalDateTime> values) {
    return of(values.toArray(new LocalDateTime[0]));
  }

  /**
   * Returns the number of elements in the list parameter.
   *
   * @return the number of individual parameter values
   */
  int size();
}
