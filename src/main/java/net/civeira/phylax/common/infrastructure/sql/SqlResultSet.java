/* @autogenerated */
package net.civeira.phylax.common.infrastructure.sql;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import lombok.Builder;
import lombok.NonNull;

/**
 * Wrapper class around {@link ResultSet} that adds support for child result mappings.
 * <p>
 * Child results are usually the result of batched subqueries associated with each row in the main
 * result set, helping to avoid the N+1 query problem by retrieving them efficiently and
 * asynchronously.
 */
@Builder
public class SqlResultSet {

  /**
   * The underlying JDBC {@link ResultSet} from which column values are read.
   */
  @NonNull
  private final ResultSet set;

  /**
   * Map of child results retrieved from batched subqueries.
   * <p>
   * Keys are relationship names, and values are {@link CompletableFuture}s containing lists of
   * results associated with this row.
   */
  @Builder.Default
  private Map<String, CompletableFuture<?>> childs = new HashMap<>();

  /**
   * Retrieves the child results associated with this row under the given relationship name.
   * <p>
   * These results are populated externally through batch queries that return related records for
   * multiple rows, and then mapped to each individual row by identifier.
   *
   * @param name the name of the child relationship
   * @param <S> the type of the child elements
   * @return a {@link CompletionStage} with a list of results for the given relationship, or an
   *         empty list if no results were associated
   */
  @SuppressWarnings("unchecked")
  public <S> CompletionStage<List<S>> getChilds(String name) {
    return childs.containsKey(name) ? (CompletionStage<List<S>>) ((Object) childs.get(name))
        : CompletableFuture.completedFuture(List.of());
  }

  /**
   * Retrieves the value of the designated column as a {@code String}.
   *
   * @param columnIndex the column index (1-based)
   * @return the column value as a String
   * @throws SQLException if a database access error occurs
   */
  public String getString(int columnIndex) throws SQLException {
    return set.getString(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code boolean}.
   *
   * @param columnIndex the column index
   * @return the column value as a boolean
   * @throws SQLException if a database access error occurs
   */
  public boolean getBoolean(int columnIndex) throws SQLException {
    return set.getBoolean(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code byte}.
   *
   * @param columnIndex the column index
   * @return the column value as a byte
   * @throws SQLException if a database access error occurs
   */
  public byte getByte(int columnIndex) throws SQLException {
    return set.getByte(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code short}.
   *
   * @param columnIndex the column index
   * @return the column value as a short
   * @throws SQLException if a database access error occurs
   */
  public short getShort(int columnIndex) throws SQLException {
    return set.getShort(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code int}.
   *
   * @param columnIndex the column index
   * @return the column value as a int
   * @throws SQLException if a database access error occurs
   */
  public int getInt(int columnIndex) throws SQLException {
    return set.getInt(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code long}.
   *
   * @param columnIndex the column index
   * @return the column value as a long
   * @throws SQLException if a database access error occurs
   */
  public long getLong(int columnIndex) throws SQLException {
    return set.getLong(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code float}.
   *
   * @param columnIndex the column index
   * @return the column value as a float
   * @throws SQLException if a database access error occurs
   */
  public float getFloat(int columnIndex) throws SQLException {
    return set.getFloat(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code double}.
   *
   * @param columnIndex the column index
   * @return the column value as a double
   * @throws SQLException if a database access error occurs
   */
  public double getDouble(int columnIndex) throws SQLException {
    return set.getDouble(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code byte[]}.
   *
   * @param columnIndex the column index
   * @return the column value as a byte array
   * @throws SQLException if a database access error occurs
   */
  public byte[] getBytes(int columnIndex) throws SQLException {
    return set.getBytes(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code Date}.
   *
   * @param columnIndex the column index
   * @return the column value as a date
   * @throws SQLException if a database access error occurs
   */
  public Date getDate(int columnIndex) throws SQLException {
    return set.getDate(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code Time}.
   *
   * @param columnIndex the column index
   * @return the column value as a time
   * @throws SQLException if a database access error occurs
   */
  public Time getTime(int columnIndex) throws SQLException {
    return set.getTime(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code Timestamp}.
   *
   * @param columnIndex the column index
   * @return the column value as a timestamp
   * @throws SQLException if a database access error occurs
   */
  public Timestamp getTimestamp(int columnIndex) throws SQLException {
    return set.getTimestamp(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code InputStream}.
   *
   * @param columnIndex the column index
   * @return the column value as a text stream
   * @throws SQLException if a database access error occurs
   */
  public InputStream getAsciiStream(int columnIndex) throws SQLException {
    return set.getAsciiStream(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code InputStream}.
   *
   * @param columnIndex the column index
   * @return the column value as a binary stream
   * @throws SQLException if a database access error occurs
   */
  public InputStream getBinaryStream(int columnIndex) throws SQLException {
    return set.getBinaryStream(columnIndex);
  }

  /**
   * Retrieves the value of the designated column as a {@code String}.
   *
   * @param columnLabel the column label
   * @return the column value as a string
   * @throws SQLException if a database access error occurs
   */
  public String getString(String columnLabel) throws SQLException {
    return set.getString(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code boolean}.
   *
   * @param columnLabel the column label
   * @return the column value as a boolean
   * @throws SQLException if a database access error occurs
   */
  public boolean getBoolean(String columnLabel) throws SQLException {
    return set.getBoolean(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code byte}.
   *
   * @param columnLabel the column label
   * @return the column value as a byte
   * @throws SQLException if a database access error occurs
   */
  public byte getByte(String columnLabel) throws SQLException {
    return set.getByte(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code short}.
   *
   * @param columnLabel the column label
   * @return the column value as a short
   * @throws SQLException if a database access error occurs
   */
  public short getShort(String columnLabel) throws SQLException {
    return set.getShort(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code int}.
   *
   * @param columnLabel the column label
   * @return the column value as a int
   * @throws SQLException if a database access error occurs
   */
  public int getInt(String columnLabel) throws SQLException {
    return set.getInt(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code long}.
   *
   * @param columnLabel the column label
   * @return the column value as a long
   * @throws SQLException if a database access error occurs
   */
  public long getLong(String columnLabel) throws SQLException {
    return set.getLong(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code float}.
   *
   * @param columnLabel the column label
   * @return the column value as a float
   * @throws SQLException if a database access error occurs
   */
  public float getFloat(String columnLabel) throws SQLException {
    return set.getFloat(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code double}.
   *
   * @param columnLabel the column label
   * @return the column value as a double
   * @throws SQLException if a database access error occurs
   */
  public double getDouble(String columnLabel) throws SQLException {
    return set.getDouble(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code byte[]}.
   *
   * @param columnLabel the column label
   * @return the column value as a byte array
   * @throws SQLException if a database access error occurs
   */
  public byte[] getBytes(String columnLabel) throws SQLException {
    return set.getBytes(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code Date}.
   *
   * @param columnLabel the column label
   * @return the column value as a date
   * @throws SQLException if a database access error occurs
   */
  public Date getDate(String columnLabel) throws SQLException {
    return set.getDate(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code Time}.
   *
   * @param columnLabel the column label
   * @return the column value as a time
   * @throws SQLException if a database access error occurs
   */
  public Time getTime(String columnLabel) throws SQLException {
    return set.getTime(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code Timestamp}.
   *
   * @param columnLabel the column label
   * @return the column value as a timestamp
   * @throws SQLException if a database access error occurs
   */
  public Timestamp getTimestamp(String columnLabel) throws SQLException {
    return set.getTimestamp(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code InputStream}.
   *
   * @param columnLabel the column label
   * @return the column value as a text stream
   * @throws SQLException if a database access error occurs
   */
  public InputStream getAsciiStream(String columnLabel) throws SQLException {
    return set.getAsciiStream(columnLabel);
  }

  /**
   * Retrieves the value of the designated column as a {@code InputStream}.
   *
   * @param columnLabel the column label
   * @return the column value as a binary stream
   * @throws SQLException if a database access error occurs
   */
  public InputStream getBinaryStream(String columnLabel) throws SQLException {
    return set.getBinaryStream(columnLabel);
  }

  /**
   * Retrieves the name of the SQL cursor used for this ResultSet.
   *
   * @return the cursor name
   * @throws SQLException if a database access error occurs
   */
  public String getCursorName() throws SQLException {
    return set.getCursorName();
  }

  /**
   * Retrieves the number, types, and properties of this ResultSet's columns.
   *
   * @return the metadata of the result set
   * @throws SQLException if a database access error occurs
   */
  public ResultSetMetaData getMetaData() throws SQLException {
    return set.getMetaData();
  }

  /**
   * Retrieves the value of the specified column as an Object.
   *
   * @param columnIndex the column index (1-based)
   * @return the column value as an Object
   * @throws SQLException if a database access error occurs
   */
  public Object getObject(int columnIndex) throws SQLException {
    return set.getObject(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as an Object.
   *
   * @param columnLabel the column label
   * @return the column value as an Object
   * @throws SQLException if a database access error occurs
   */
  public Object getObject(String columnLabel) throws SQLException {
    return set.getObject(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a character stream.
   *
   * @param columnIndex the column index (1-based)
   * @return the character stream
   * @throws SQLException if a database access error occurs
   */
  public Reader getCharacterStream(int columnIndex) throws SQLException {
    return set.getCharacterStream(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a character stream.
   *
   * @param columnLabel the column label
   * @return the character stream
   * @throws SQLException if a database access error occurs
   */
  public Reader getCharacterStream(String columnLabel) throws SQLException {
    return set.getCharacterStream(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a {@link BigDecimal}.
   *
   * @param columnIndex the column index (1-based)
   * @return the column value as a BigDecimal
   * @throws SQLException if a database access error occurs
   */
  public BigDecimal getBigDecimal(int columnIndex) throws SQLException {
    return set.getBigDecimal(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a {@link BigDecimal}.
   *
   * @param columnLabel the column label
   * @return the column value as a BigDecimal
   * @throws SQLException if a database access error occurs
   */
  public BigDecimal getBigDecimal(String columnLabel) throws SQLException {
    return set.getBigDecimal(columnLabel);
  }

  /**
   * Returns the current row number.
   *
   * @return the current row number
   * @throws SQLException if a database access error occurs
   */
  public int getRow() throws SQLException {
    return set.getRow();
  }

  /**
   * Gets the fetch direction for this ResultSet.
   *
   * @return the current fetch direction
   * @throws SQLException if a database access error occurs
   */
  public int getFetchDirection() throws SQLException {
    return set.getFetchDirection();
  }

  /**
   * Returns the fetch size for this ResultSet.
   *
   * @return the number of rows that should be fetched
   * @throws SQLException if a database access error occurs
   */
  public int getFetchSize() throws SQLException {
    return set.getFetchSize();
  }

  /**
   * Returns the concurrency mode of this ResultSet.
   *
   * @return the concurrency level
   * @throws SQLException if a database access error occurs
   */
  public int getConcurrency() throws SQLException {
    return set.getConcurrency();
  }

  /**
   * Retrieves the value of the specified column using a custom type mapping.
   *
   * @param columnIndex the column index
   * @param map the mapping of SQL types to Java classes
   * @return the column value as an Object
   * @throws SQLException if a database access error occurs
   */
  public Object getObject(int columnIndex, Map<String, Class<?>> map) throws SQLException {
    return set.getObject(columnIndex, map);
  }

  /**
   * Retrieves the value of the specified column as a {@link Ref}.
   *
   * @param columnIndex the column index
   * @return the column value as a Ref
   * @throws SQLException if a database access error occurs
   */
  public Ref getRef(int columnIndex) throws SQLException {
    return set.getRef(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a {@link Blob}.
   *
   * @param columnIndex the column index
   * @return the column value as a Blob
   * @throws SQLException if a database access error occurs
   */
  public Blob getBlob(int columnIndex) throws SQLException {
    return set.getBlob(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a {@link Clob}.
   *
   * @param columnIndex the column index
   * @return the column value as a Clob
   * @throws SQLException if a database access error occurs
   */
  public Clob getClob(int columnIndex) throws SQLException {
    return set.getClob(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a SQL {@link Array}.
   *
   * @param columnIndex the column index
   * @return the column value as an Array
   * @throws SQLException if a database access error occurs
   */
  public Array getArray(int columnIndex) throws SQLException {
    return set.getArray(columnIndex);
  }

  /**
   * Retrieves the value of the specified column using a custom type mapping.
   *
   * @param columnLabel the column label
   * @param map the mapping of SQL types to Java classes
   * @return the column value as an Object
   * @throws SQLException if a database access error occurs
   */
  public Object getObject(String columnLabel, Map<String, Class<?>> map) throws SQLException {
    return set.getObject(columnLabel, map);
  }

  /**
   * Retrieves the value of the specified column as a {@link Ref}.
   *
   * @param columnLabel the column label
   * @return the column value as a Ref
   * @throws SQLException if a database access error occurs
   */
  public Ref getRef(String columnLabel) throws SQLException {
    return set.getRef(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a {@link Blob}.
   *
   * @param columnLabel the column label
   * @return the column value as a Blob
   * @throws SQLException if a database access error occurs
   */
  public Blob getBlob(String columnLabel) throws SQLException {
    return set.getBlob(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a {@link Clob}.
   *
   * @param columnLabel the column label
   * @return the column value as a Clob
   * @throws SQLException if a database access error occurs
   */
  public Clob getClob(String columnLabel) throws SQLException {
    return set.getClob(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a SQL {@link Array}.
   *
   * @param columnLabel the column label
   * @return the column value as an Array
   * @throws SQLException if a database access error occurs
   */
  public Array getArray(String columnLabel) throws SQLException {
    return set.getArray(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a {@link Date} using a calendar.
   *
   * @param columnIndex the column index
   * @param cal the calendar used to interpret the date
   * @return the column value as a Date
   * @throws SQLException if a database access error occurs
   */
  public Date getDate(int columnIndex, Calendar cal) throws SQLException {
    return set.getDate(columnIndex, cal);
  }

  /**
   * Retrieves the value of the specified column as a {@link Date} using a calendar.
   *
   * @param columnLabel the column label
   * @param cal the calendar used to interpret the date
   * @return the column value as a Date
   * @throws SQLException if a database access error occurs
   */
  public Date getDate(String columnLabel, Calendar cal) throws SQLException {
    return set.getDate(columnLabel, cal);
  }

  /**
   * Retrieves the value of the specified column as a {@link Time} using a calendar.
   *
   * @param columnIndex the column index
   * @param cal the calendar used to interpret the time
   * @return the column value as a Time
   * @throws SQLException if a database access error occurs
   */
  public Time getTime(int columnIndex, Calendar cal) throws SQLException {
    return set.getTime(columnIndex, cal);
  }

  /**
   * Retrieves the value of the specified column as a {@link Time} using a calendar.
   *
   * @param columnLabel the column label
   * @param cal the calendar used to interpret the time
   * @return the column value as a Time
   * @throws SQLException if a database access error occurs
   */
  public Time getTime(String columnLabel, Calendar cal) throws SQLException {
    return set.getTime(columnLabel, cal);
  }

  /**
   * Retrieves the value of the specified column as a {@link Timestamp} using a calendar.
   *
   * @param columnIndex the column index
   * @param cal the calendar used to interpret the timestamp
   * @return the column value as a Timestamp
   * @throws SQLException if a database access error occurs
   */
  public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {
    return set.getTimestamp(columnIndex, cal);
  }

  /**
   * Retrieves the value of the specified column as a {@link Timestamp} using a calendar.
   *
   * @param columnLabel the column label
   * @param cal the calendar used to interpret the timestamp
   * @return the column value as a Timestamp
   * @throws SQLException if a database access error occurs
   */
  public Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException {
    return set.getTimestamp(columnLabel, cal);
  }

  /**
   * Retrieves the value of the specified column as a {@link URL}.
   *
   * @param columnIndex the column index
   * @return the column value as a URL
   * @throws SQLException if a database access error occurs
   */
  public URL getURL(int columnIndex) throws SQLException {
    return set.getURL(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a {@link URL}.
   *
   * @param columnLabel the column label
   * @return the column value as a URL
   * @throws SQLException if a database access error occurs
   */
  public URL getURL(String columnLabel) throws SQLException {
    return set.getURL(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a {@link RowId}.
   *
   * @param columnIndex the column index
   * @return the column value as a RowId
   * @throws SQLException if a database access error occurs
   */
  public RowId getRowId(int columnIndex) throws SQLException {
    return set.getRowId(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a {@link RowId}.
   *
   * @param columnLabel the column label
   * @return the column value as a RowId
   * @throws SQLException if a database access error occurs
   */
  public RowId getRowId(String columnLabel) throws SQLException {
    return set.getRowId(columnLabel);
  }

  /**
   * Returns the holdability of this ResultSet (e.g., whether cursors remain open after commit).
   *
   * @return the holdability mode
   * @throws SQLException if a database access error occurs
   */
  public int getHoldability() throws SQLException {
    return set.getHoldability();
  }

  /**
   * Retrieves the value of the specified column as a {@link NClob}.
   *
   * @param columnIndex the column index
   * @return the column value as an NClob
   * @throws SQLException if a database access error occurs
   */
  public NClob getNClob(int columnIndex) throws SQLException {
    return set.getNClob(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a {@link NClob}.
   *
   * @param columnLabel the column label
   * @return the column value as an NClob
   * @throws SQLException if a database access error occurs
   */
  public NClob getNClob(String columnLabel) throws SQLException {
    return set.getNClob(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a Unicode string.
   *
   * @param columnIndex the column index
   * @return the column value as a string
   * @throws SQLException if a database access error occurs
   */
  public String getNString(int columnIndex) throws SQLException {
    return set.getNString(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a Unicode string.
   *
   * @param columnLabel the column label
   * @return the column value as a string
   * @throws SQLException if a database access error occurs
   */
  public String getNString(String columnLabel) throws SQLException {
    return set.getNString(columnLabel);
  }

  /**
   * Retrieves the value of the specified column as a character stream containing Unicode text.
   *
   * @param columnIndex the column index
   * @return the character stream
   * @throws SQLException if a database access error occurs
   */
  public Reader getNCharacterStream(int columnIndex) throws SQLException {
    return set.getNCharacterStream(columnIndex);
  }

  /**
   * Retrieves the value of the specified column as a character stream containing Unicode text.
   *
   * @param columnLabel the column label
   * @return the character stream
   * @throws SQLException if a database access error occurs
   */
  public Reader getNCharacterStream(String columnLabel) throws SQLException {
    return set.getNCharacterStream(columnLabel);
  }

  /**
   * Retrieves the value of the specified column and maps it to the given type.
   *
   * @param columnIndex the column index
   * @param type the target Java class
   * @param <T> the result type
   * @return the column value mapped to the given type
   * @throws SQLException if a database access error occurs
   */
  public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
    return set.getObject(columnIndex, type);
  }

  /**
   * Retrieves the value of the specified column and maps it to the given type.
   *
   * @param columnLabel the column label
   * @param type the target Java class
   * @param <T> the result type
   * @return the column value mapped to the given type
   * @throws SQLException if a database access error occurs
   */
  public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
    return set.getObject(columnLabel, type);
  }
}
