/* @autogenerated */
package net.civeira.phylax.common.infrastructure.connector;

import java.util.List;
import java.util.stream.Stream;

/**
 * Interface representing a remote connector that allows communication with external services.
 * Provides methods for performing HTTP-like requests (GET, POST, PUT, DELETE, PATCH).
 */
public interface RemoteConnector {

  /**
   * Performs a GET request to the specified target.
   *
   * @param target The target URL or endpoint.
   * @return A {@link RemoteQuery} representing the GET request.
   */
  RemoteQuery get(String target);

  /**
   * Performs a DELETE request to the specified target.
   *
   * @param target The target URL or endpoint.
   * @return A {@link RemoteQuery} representing the DELETE request.
   */
  RemoteQuery delete(String target);

  /**
   * Performs a POST request to the specified target with the provided parameters.
   *
   * @param target The target URL or endpoint.
   * @param params The request payload or body.
   * @return A {@link RemoteQuery} representing the POST request.
   */
  RemoteQuery post(String target, Object params);

  /**
   * Performs a PUT request to the specified target with the provided parameters.
   *
   * @param target The target URL or endpoint.
   * @param params The request payload or body.
   * @return A {@link RemoteQuery} representing the PUT request.
   */
  RemoteQuery put(String target, Object params);

  /**
   * Performs a PATCH request to the specified target with the provided parameters.
   *
   * @param target The target URL or endpoint.
   * @param params The request payload or body.
   * @return A {@link RemoteQuery} representing the PATCH request.
   */
  RemoteQuery patch(String target, Object params);

  /**
   * Sends and wait multiple remote connection requests.
   *
   * @param request One or more {@link RemoteConnection} objects representing the requests.
   */
  void send(RemoteConnection... request);

  /**
   * Sends and wait a batch of remote connection requests.
   *
   * @param request A list of {@link RemoteConnection} objects to be sent.
   */
  void send(List<RemoteConnection> request);

  /**
   * Sends and wait a stream of remote connection requests.
   *
   * @param request A stream of {@link RemoteConnection} objects to be processed.
   */
  void send(Stream<RemoteConnection> request);
}
