/* @autogenerated */
package net.civeira.phylax.common.value.validation;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

/**
 * Represents a collection of validation failures. This class provides methods to store, retrieve,
 * and check for validation errors.
 */
public class AbstractFailList {
  private List<AbstractFail> fails = new ArrayList<>();

  /**
   * Creates an empty failure list.
   */
  public AbstractFailList() {
    this(new ArrayList<>());
  }

  /**
   * Creates a failure list containing a single failure.
   *
   * @param fail The initial failure to be added to the list.
   */
  public AbstractFailList(AbstractFail fail) {
    this(new ArrayList<>(List.of(fail)));
  }

  /**
   * Creates a failure list from an existing collection of failures.
   *
   * @param fails The list of failures to initialize with.
   */
  public AbstractFailList(List<? extends AbstractFail> fails) {
    this.fails = new ArrayList<>(fails);
  }

  /**
   * Retrieves a stream of all failures in the list.
   *
   * @return A {@link Stream} of {@link AbstractFail} instances.
   */
  public Stream<? extends AbstractFail> getFails() {
    return fails.stream();
  }

  /**
   * Checks whether the failure list contains any errors.
   *
   * @return {@code true} if the list contains at least one failure, otherwise {@code false}.
   */
  public boolean hasErrors() {
    return !fails.isEmpty();
  }

  /**
   * Checks whether the failure list is empty.
   *
   * @return {@code true} if the list contains no failures, otherwise {@code false}.
   */
  public boolean isEmpty() {
    return fails.isEmpty();
  }

  /**
   * Adds a single failure to the list.
   *
   * @param fail The failure instance to add.
   */
  public void add(AbstractFail fail) {
    fails.add(fail);
  }

  /**
   * Merges another failure list into this one.
   *
   * @param list The {@link AbstractFailList} containing failures to add.
   * @param <T> The type extending {@link AbstractFailList}.
   */
  public <T extends AbstractFailList> void add(T list) {
    fails.addAll(list.getFails().toList());
  }

  /**
   * Checks if the list contains any failure of a specific type.
   *
   * @param type The class type of the failure to check.
   * @param <T> The type of the failure extending {@link AbstractFail}.
   * @return {@code true} if any failure in the list matches the given type, otherwise
   *         {@code false}.
   */
  public <T extends AbstractFail> boolean includeViolation(Class<T> type) {
    return fails.stream().anyMatch(fail -> type.isAssignableFrom(fail.getClass()));
  }

  /**
   * Checks if the list contains a failure with a specific error code.
   *
   * @param code The error code to search for.
   * @return {@code true} if any failure in the list has the specified code, otherwise
   *         {@code false}.
   */
  public boolean includeCode(String code) {
    return fails.stream().anyMatch(fail -> code.equals(fail.getCode()));
  }
}
