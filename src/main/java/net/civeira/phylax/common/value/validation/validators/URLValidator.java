/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;

import net.civeira.phylax.common.value.validation.ValidationResult;
import net.civeira.phylax.common.value.validation.Validator;

/**
 * Validates URLs to ensure they are properly formatted and meet specific criteria. This validator
 * checks if the URL is valid, the port (if provided) is within range, and the host has a valid
 * Top-Level Domain (TLD).
 */
public class URLValidator implements Validator<String> {

  /** The error message returned when validation fails. */
  private final String errorMessage;

  /**
   * Constructs a URLValidator with a custom error message.
   *
   * @param errorMessage The message to return in case of a validation failure.
   */
  public URLValidator(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  /**
   * Validates a given URL string. The validation checks the following:
   * <ul>
   * <li>The URL is not null or empty.</li>
   * <li>The URL follows a valid syntax.</li>
   * <li>If a port is provided, it must be within the valid range (0-65535).</li>
   * <li>The host must not be null and must have a valid Top-Level Domain (TLD).</li>
   * </ul>
   *
   * @param url The URL string to validate.
   * @return A {@link ValidationResult} indicating whether the URL is valid.
   */
  @Override
  public ValidationResult validate(String url) {
    if (url == null || url.isEmpty()) {
      return new ValidationResult(errorMessage);
    }
    try {
      URI uri = new URI(url);
      uri.toURL(); // General URL validation

      // Validate the port if specified
      int port = uri.getPort();
      if (port > 65535) { // -1 means no explicit port was provided
        return new ValidationResult(errorMessage);
      }

      // Validate the host and ensure it has a valid Top-Level Domain (TLD)
      String host = uri.getHost();
      if (host == null || host.endsWith(".")) {
        return new ValidationResult(errorMessage);
      }

      return new ValidationResult();
    } catch (IllegalArgumentException | MalformedURLException | URISyntaxException e) {
      return new ValidationResult(errorMessage);
    }
  }
}
