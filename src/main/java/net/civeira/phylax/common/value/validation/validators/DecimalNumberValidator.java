/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import java.math.BigDecimal;

import net.civeira.phylax.common.value.validation.ValidationResult;
import net.civeira.phylax.common.value.validation.Validator;

/**
 * Validator for decimal numbers with configurable precision, scale, and range constraints. This
 * validator ensures that a given number conforms to the defined rules, including maximum decimal
 * places, total precision, and minimum/maximum value constraints.
 */
public class DecimalNumberValidator implements Validator<String> {
  private final int maxDecimals;
  private final int precision;
  private final BigDecimal minValue;
  private final BigDecimal maxValue;
  private final String errorMessage;

  /**
   * Constructs a DecimalNumberValidator with the specified constraints.
   *
   * @param maxDecimals The maximum allowed number of decimal places.
   * @param precision The total number of digits allowed, including decimals.
   * @param minValue The minimum valid value (nullable for no lower bound).
   * @param maxValue The maximum valid value (nullable for no upper bound).
   * @param errorMessage The error message to return when validation fails.
   * @throws IllegalArgumentException If maxDecimals is negative, precision is less than 1,
   *         maxDecimals is greater than precision, or minValue is greater than maxValue.
   */
  public DecimalNumberValidator(int maxDecimals, int precision, BigDecimal minValue,
      BigDecimal maxValue, String errorMessage) {
    if (maxDecimals < 0 || precision < 1 || maxDecimals > precision) {
      throw new IllegalArgumentException("Invalid parameters for decimal number validator.");
    }
    if (minValue != null && maxValue != null && minValue.compareTo(maxValue) > 0) {
      throw new IllegalArgumentException("minValue cannot be greater than maxValue.");
    }
    this.maxDecimals = maxDecimals;
    this.precision = precision;
    this.minValue = minValue;
    this.maxValue = maxValue;
    this.errorMessage = errorMessage;
  }

  /**
   * Validates whether the given number string adheres to the defined constraints.
   *
   * @param numberStr The number string to validate.
   * @return A ValidationResult indicating success or failure.
   */
  @Override
  public ValidationResult validate(String numberStr) {
    if (numberStr == null || numberStr.isEmpty()) {
      return new ValidationResult(errorMessage);
    }
    try {
      BigDecimal number = new BigDecimal(numberStr);
      if (number.scale() > maxDecimals) {
        return new ValidationResult(errorMessage);
      }
      // Ensure total precision does not exceed the allowed value
      if (number.precision() > precision) {
        return new ValidationResult(errorMessage);
      }
      boolean isLower = minValue != null && number.compareTo(minValue) < 0;
      boolean isUpper = maxValue != null && number.compareTo(maxValue) > 0;
      // Validate range constraints
      if (isLower || isUpper) {
        return new ValidationResult(errorMessage);
      }
      return new ValidationResult();
    } catch (NumberFormatException e) {
      return new ValidationResult(errorMessage);
    }
  }
}
