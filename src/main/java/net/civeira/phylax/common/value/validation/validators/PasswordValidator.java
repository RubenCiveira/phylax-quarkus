/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import java.util.regex.Pattern;

import net.civeira.phylax.common.value.validation.ValidationResult;
import net.civeira.phylax.common.value.validation.Validator;

/**
 * Validator for passwords, ensuring compliance with specified security rules.
 */
public class PasswordValidator implements Validator<String> {
  private final int minLength;
  private final int maxLength;
  private final boolean requireLowercase;
  private final boolean requireUppercase;
  private final boolean requireNumbers;
  private final boolean requireSpecialChars;
  private final String errorMessage;
  private final Pattern pattern;

  /**
   * Constructs a PasswordValidator with the specified constraints.
   *
   * @param minLength The minimum allowed length for the password.
   * @param maxLength The maximum allowed length for the password.
   * @param requireLowercase Whether at least one lowercase letter is required.
   * @param requireUppercase Whether at least one uppercase letter is required.
   * @param requireNumbers Whether at least one numeric digit is required.
   * @param requireSpecialChars Whether at least one special character is required.
   * @param errorMessage The error message to return if validation fails.
   * @throws IllegalArgumentException if minLength is negative or maxLength is smaller than
   *         minLength.
   */
  public PasswordValidator(int minLength, int maxLength, boolean requireLowercase,
      boolean requireUppercase, boolean requireNumbers, boolean requireSpecialChars,
      String errorMessage) {
    if (minLength < 0 || maxLength < minLength) {
      throw new IllegalArgumentException("Invalid length parameters.");
    }
    this.minLength = minLength;
    this.maxLength = maxLength;
    this.requireLowercase = requireLowercase;
    this.requireUppercase = requireUppercase;
    this.requireNumbers = requireNumbers;
    this.requireSpecialChars = requireSpecialChars;
    this.errorMessage = errorMessage;
    this.pattern = Pattern.compile(buildRegex());
  }

  /**
   * Builds the regular expression pattern for password validation based on the specified
   * constraints.
   *
   * @return The regex pattern as a string.
   */
  private String buildRegex() {
    StringBuilder regex = new StringBuilder("^");

    if (requireLowercase) {
      regex.append("(?=.*[a-z])");
    }
    if (requireUppercase) {
      regex.append("(?=.*[A-Z])");
    }
    if (requireNumbers) {
      regex.append("(?=.*\\d)");
    }
    if (requireSpecialChars) {
      regex.append("(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?])");
    }

    // Ensure password length constraints
    regex.append(".{").append(minLength).append(",").append(maxLength).append("}$");

    return regex.toString();
  }

  /**
   * Validates whether a given password meets the specified constraints.
   *
   * @param password The password to validate.
   * @return A ValidationResult indicating success or failure.
   */
  @Override
  public ValidationResult validate(String password) {
    if (password == null || !pattern.matcher(password).matches()) {
      return new ValidationResult(errorMessage);
    }
    return new ValidationResult();
  }
}
