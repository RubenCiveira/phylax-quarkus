/* @autogenerated */
package net.civeira.phylax.common.value.validation.validators;

import net.civeira.phylax.common.value.validation.ValidationResult;
import net.civeira.phylax.common.value.validation.Validator;

/**
 * Validator for credit card numbers. Ensures the card number consists only of digits and passes the
 * Luhn algorithm check.
 */
public class CreditCardValidator implements Validator<String> {
  private final String errorMessage;

  /**
   * Constructs a CreditCardValidator.
   *
   * @param errorMessage The error message to return when validation fails.
   */
  public CreditCardValidator(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  /**
   * Validates a credit card number.
   *
   * @param cardNumber The credit card number as a string.
   * @return A ValidationResult indicating success or failure.
   */
  @Override
  public ValidationResult validate(String cardNumber) {
    if (cardNumber == null || cardNumber.isEmpty() || !cardNumber.matches("\\d+")) {
      return new ValidationResult(errorMessage);
    }
    if (!isValidLuhn(cardNumber)) {
      return new ValidationResult(errorMessage);
    }
    return new ValidationResult();
  }

  /**
   * Checks if a given credit card number is valid using the Luhn algorithm.
   *
   * @param cardNumber The credit card number as a string.
   * @return True if the card number is valid according to Luhn's algorithm, false otherwise.
   */
  private boolean isValidLuhn(String cardNumber) {
    int sum = 0;
    boolean alternate = false;
    for (int i = cardNumber.length() - 1; i >= 0; i--) {
      int n = Character.getNumericValue(cardNumber.charAt(i));
      if (alternate) {
        n *= 2;
        if (n > 9) {
          n -= 9;
        }
      }
      sum += n;
      alternate = !alternate;
    }
    return (sum % 10 == 0);
  }
}
