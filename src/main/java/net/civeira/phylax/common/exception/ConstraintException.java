/* @autogenerated */
package net.civeira.phylax.common.exception;

import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Exception representing one or more constraint validation failures in domain or application logic.
 *
 * <p>
 * This exception is a concrete implementation of {@link AbstractFailsException} that specifically
 * wraps {@link ConstraintFail} or {@link ConstraintFailList} instances. It is intended to be thrown
 * when input data, user commands, or internal state violate defined constraints.
 * </p>
 *
 * <p>
 * Each instance of this exception can carry detailed information about one or more failed
 * constraints, including the field, value, and reason for the failure. The errors can later be
 * localized for user-facing responses via the parent class methods.
 * </p>
 *
 * <p>
 * Typical use cases include validation of DTOs, API requests, configuration values, or domain
 * invariants.
 * </p>
 *
 * @see ConstraintFail
 * @see ConstraintFailList
 * @see AbstractFailsException
 */
public class ConstraintException extends AbstractFailsException {
  private static final long serialVersionUID = -6393019970767107758L;

  /**
   * Constructs a {@code ConstraintException} with a single constraint failure.
   *
   * @param fail the constraint failure to include in the exception
   */
  public ConstraintException(ConstraintFail fail) {
    super(fail);
  }

  /**
   * Constructs a {@code ConstraintException} with a list of constraint failures.
   *
   * @param fails a list of multiple constraint violations
   */
  public ConstraintException(ConstraintFailList fails) {
    super(fails);
  }

  /**
   * Constructs a {@code ConstraintException} with the given error metadata.
   *
   * @param code the error code identifying the type of constraint violation
   * @param field the field or property associated with the violation
   * @param wrongValue the value that caused the failure
   * @param errorMessage a human-readable error message describing the problem
   */
  public ConstraintException(String code, String field, Object wrongValue, String errorMessage) {
    super(new ConstraintFail(code, field, wrongValue, errorMessage));
  }

  /**
   * Constructs a {@code ConstraintException} with minimal violation information.
   *
   * @param code the error code identifying the type of constraint violation
   * @param field the field or property associated with the violation
   * @param wrongValue the value that caused the failure
   */
  public ConstraintException(String code, String field, Object wrongValue) {
    super(new ConstraintFail(code, field, wrongValue));
  }

}
