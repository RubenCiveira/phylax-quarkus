/* @autogenerated */
package net.civeira.phylax.common.exception;

import net.civeira.phylax.common.value.validation.ExecutionFail;

/**
 * Exception representing an execution-time failure during application or business logic processing.
 *
 * <p>
 * This exception is used to signal a failure that occurs during the execution of a process, task,
 * or workflow step â€” typically after all input validation has passed. It wraps an
 * {@link ExecutionFail}, which provides structured information about the failure, including an
 * error code and a human-readable message.
 * </p>
 *
 * <p>
 * Unlike {@link ConstraintException}, which represents input or precondition violations,
 * {@code ExecutionException} is intended for post-validation failures such as processing errors,
 * business rule violations, or external service issues.
 * </p>
 *
 * <p>
 * Failures can later be localized and transformed into user-friendly messages using the parent
 * class methods like {@code localize(...)}.
 * </p>
 *
 * @see ExecutionFail
 * @see AbstractFailsException
 */
public class ExecutionException extends AbstractFailsException {
  private static final long serialVersionUID = -6393019970767107758L;

  /**
   * Constructs an {@code ExecutionException} with a single {@link ExecutionFail} instance.
   *
   * @param fail the execution failure to include in the exception
   */
  public ExecutionException(ExecutionFail fail) {
    super(fail);
  }

  /**
   * Constructs an {@code ExecutionException} with the given error code and message.
   *
   * @param code the error code identifying the type of execution failure
   * @param errorMessage a human-readable message describing the failure
   */
  public ExecutionException(String code, String errorMessage) {
    super(new ExecutionFail(code, errorMessage));
  }
}
