/* @autogenerated */
package net.civeira.phylax.common.exception;

/**
 * Exception thrown when a requested resource cannot be found.
 *
 * <p>
 * This exception represents a typical "not found" condition, such as when a database record, file,
 * or domain object is missing or inaccessible. It can also be used to signal that a required
 * precondition (such as a paid subscription) has not been fulfilled, and thus the resource is
 * considered unavailable.
 * </p>
 *
 * <p>
 * This is a runtime (unchecked) exception and may be used in service layers, repositories, or API
 * controllers to indicate missing data or entities.
 * </p>
 *
 * @see RuntimeException
 */
public class NotFoundException extends RuntimeException {
  private static final long serialVersionUID = 895104693033357772L;

  /**
   * Constructs a {@code NotFoundException} with no detail message or cause.
   */
  public NotFoundException() {
    super();
  }

  /**
   * Constructs a {@code NotFoundException} with a specified detail message.
   *
   * @param message the detail message explaining the reason for the exception
   */
  public NotFoundException(final String message, final Throwable cause) {
    super(message, cause);
  }

  /**
   * Constructs a {@code NotFoundException} with a specified cause.
   *
   * @param cause the underlying cause of the exception
   */
  public NotFoundException(final String message) {
    super(message);
  }

  /**
   * Constructs a {@code NotFoundException} with both a detail message and a cause.
   *
   * @param message the detail message
   * @param cause the underlying cause of the exception
   */
  public NotFoundException(final Throwable cause) {
    super(cause);
  }
}
