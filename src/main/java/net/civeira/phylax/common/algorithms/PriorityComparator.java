/* @autogenerated */
package net.civeira.phylax.common.algorithms;

import java.util.Comparator;

import jakarta.annotation.Priority;

/**
 * A comparator that compares objects based on the {@link Priority} annotation present on their
 * class.
 *
 * <p>
 * This comparator allows sorting of objects by the value defined in their {@code @Priority}
 * annotation. Objects whose classes do not define this annotation are considered to have a default
 * priority of 0.
 * </p>
 *
 * <p>
 * It is particularly useful in scenarios where processing or execution order needs to be determined
 * based on annotations rather than explicit configuration.
 * </p>
 *
 * <p>
 * Note: This comparator uses the priority of the object's <em>class</em>, not the object itself, so
 * it assumes that all instances of a class share the same priority.
 * </p>
 *
 * @param <T> the type of objects being compared
 */
public class PriorityComparator<T> implements Comparator<T> {

  /**
   * Compares two objects based on the value of their class-level {@link Priority} annotation.
   *
   * @param one the first object to be compared
   * @param other the second object to be compared
   * @return a negative integer, zero, or a positive integer as the first argument has less than,
   *         equal to, or greater priority than the second
   */
  @Override
  public int compare(T one, T other) {
    Priority p1 = one.getClass().getAnnotation(Priority.class);
    Priority p2 = other.getClass().getAnnotation(Priority.class);
    return Integer.compare(p1 == null ? 0 : p1.value(), p2 == null ? 0 : p2.value());
  }
}
