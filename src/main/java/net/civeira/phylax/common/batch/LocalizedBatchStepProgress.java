/* @autogenerated */
package net.civeira.phylax.common.batch;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import io.quarkus.runtime.annotations.RegisterForReflection;
import lombok.Builder;
import lombok.Data;
import net.civeira.phylax.common.batch.BatchStepProgress.ErrorInfo;
import net.civeira.phylax.common.batch.BatchStepProgress.Status;
import net.civeira.phylax.common.value.validation.AbstractFail.LocalizedFail;

/**
 * A localized representation of a single batch step's progress, suitable for user interfaces or
 * APIs.
 *
 * <p>
 * This class provides translated error and warning messages, while retaining all step execution
 * metadata.
 * </p>
 */
@Data
@Builder
@RegisterForReflection
public class LocalizedBatchStepProgress {

  /**
   * Localized representation of validation or processing errors for a specific item.
   */
  @Data
  @Builder
  @RegisterForReflection
  public static class LocalizedErrorInfo {
    /** The identifier of the item associated with the errors or warnings. */
    private String item;
    /** List of localized validation or processing errors. */
    private List<LocalizedFail> fails;

  }

  /** The name or identifier of the batch step. */
  private final String name;

  /** Optional error message associated with the batch step. */
  private final String error;

  /** Current execution status of the batch step. */
  private final Status status;

  /** Timestamp when the step execution started. */
  private final Instant startTime;

  /** Timestamp when the step execution ended. */
  private final Instant endTime;

  /** Total number of items expected to be processed in this step. */
  private final long totalItems;

  /** Number of items that have already been processed. */
  private final long processedItems;

  /** List of successfully processed item identifiers. */
  private final List<String> oks;

  /** Localized warnings for specific items, including message and item identifiers. */
  private final List<LocalizedErrorInfo> warns;

  /** Localized errors for specific items, including message and item identifiers. */
  private final List<LocalizedErrorInfo> errors;

  /**
   * Creates a localized view of a {@link BatchStepProgress} using the given locale.
   *
   * @param step the original batch step progress
   * @param locale the locale to use for translations
   * @return a localized version of the step progress
   */
  public static LocalizedBatchStepProgress from(BatchStepProgress step, Locale locale) {
    return LocalizedBatchStepProgress.builder().name(step.getName()).error(step.getError())
        .status(step.getStatus()).startTime(step.getStartTime()).endTime(step.getEndTime())
        .totalItems(step.getTotalItems()).processedItems(step.getProcessedItems())
        .errors(mapMap(step.getErrors(), locale)).warns(mapMap(step.getWarns(), locale))
        .oks(step.getOks()).build();
  }

  /**
   * Converts an {@link ErrorInfo} instance into a localized error info object.
   *
   * @param info the error information to localize
   * @param locale the target locale
   * @return the localized error info
   */
  public static LocalizedErrorInfo from(ErrorInfo info, Locale locale) {
    return LocalizedErrorInfo.builder().fails(null == info.getFails() ? null
        : info.getFails().stream().map(fail -> fail.localize(locale, true)).toList()).build();
  }

  /**
   * Helper method to convert a map of error data into a list of localized error entries.
   *
   * @param map the original map from item identifiers to error info
   * @param locale the target locale for translation
   * @return list of localized error info entries
   */
  private static List<LocalizedErrorInfo> mapMap(Map<String, ErrorInfo> map, Locale locale) {
    if (null == map) {
      return List.of();
    } else {
      List<LocalizedErrorInfo> result = new ArrayList<>();
      map.entrySet().forEach(entry -> {
        LocalizedErrorInfo localize = from(entry.getValue(), locale);
        localize.setItem(entry.getKey());
        result.add(localize);
      });
      return result;
    }
  }
}
