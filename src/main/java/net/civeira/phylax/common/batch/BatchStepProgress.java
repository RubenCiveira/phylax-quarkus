/* @autogenerated */
package net.civeira.phylax.common.batch;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import io.quarkus.runtime.annotations.RegisterForReflection;
import lombok.Data;
import net.civeira.phylax.common.value.validation.AbstractFail;

/**
 * Represents progress tracking information for a single batch step.
 *
 * <p>
 * Includes the execution state, timing, item-level tracking, and success, warning, and error
 * results for items processed in the step.
 * </p>
 */
@Data
@RegisterForReflection
public class BatchStepProgress {
  /**
   * Execution status of a step.
   */
  public enum Status {
    /** The batch job has not started yet. */
    PENDING,

    /** The batch job is currently in progress but not yet completed. */
    PROCESSING,

    /** The batch job has completed successfully without errors. */
    FINISHED,

    /** The batch job was aborted or ended due to an error. */
    FAILED
  }

  /**
   * Encapsulates validation or processing failures associated with a specific item.
   */
  @Data
  @RegisterForReflection
  public static class ErrorInfo {
    /** List of validation or runtime failures associated with a single item. */
    private List<AbstractFail> fails;

    /**
     * Constructs an error info container with an initial failure.
     *
     * @param constraint the initial failure to add
     */
    public ErrorInfo(AbstractFail constraint) {
      fails = new ArrayList<>();
      fails.add(constraint);
    }

    /**
     * Adds a new failure to the error list.
     *
     * @param runtime the failure to add
     */
    public void add(AbstractFail runtime) {
      fails.add(runtime);
    }
  }

  /** Name or identifier of the batch step. */
  private String name;

  /** Current execution status of the step. */
  private Status status = Status.PROCESSING;

  /** Optional error message if the step failed. */
  private String error;

  /** Timestamp indicating when the step started. */
  private Instant startTime = Instant.now();

  /** Timestamp indicating when the step ended. */
  private Instant endTime = Instant.now();

  /** Total number of items expected to be processed. */
  private long totalItems = 0;

  /** Number of items that have already been processed. */
  private long processedItems = 0;

  /** List of successfully processed item identifiers. */
  private List<String> oks;

  /** Map of items with warnings, grouped by item ID or code. */
  private Map<String, ErrorInfo> warns;

  /** Map of items with errors, grouped by item ID or code. */
  private Map<String, ErrorInfo> errors;

  /**
   * Adds a successful item to the progress report.
   *
   * @param reference the item reference
   */
  public void addOk(String referencia) {
    if (null == oks) {
      oks = new ArrayList<>(Arrays.asList(referencia));
    } else {
      oks.add(referencia);
    }
    ++processedItems;
  }

  /**
   * Adds a warning result for a specific item.
   *
   * @param code the item reference or error code
   * @param warning the warning details
   */
  public void addWarns(String codigo, AbstractFail referencia) {
    if (null == warns) {
      warns = new HashMap<>();
      warns.put(codigo, new ErrorInfo(referencia));
    } else if (!warns.containsKey(codigo)) {
      warns.put(codigo, new ErrorInfo(referencia));
    } else {
      warns.get(codigo).add(referencia);
    }
    ++processedItems;
  }

  /**
   * Adds an error result for a specific item.
   *
   * @param code the item reference or error code
   * @param error the error details
   */
  public void addError(String codigo, AbstractFail referencia) {
    if (null == errors) {
      errors = new HashMap<>();
      errors.put(codigo, new ErrorInfo(referencia));
    } else if (!errors.containsKey(codigo)) {
      errors.put(codigo, new ErrorInfo(referencia));
    } else {
      errors.get(codigo).add(referencia);
    }
    ++processedItems;
  }
}
