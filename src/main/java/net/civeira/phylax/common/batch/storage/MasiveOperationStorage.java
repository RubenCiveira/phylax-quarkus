/* @autogenerated */
package net.civeira.phylax.common.batch.storage;

import java.time.Instant;
import java.util.Optional;

import net.civeira.phylax.common.batch.BatchProgress;

/**
 * Interface for persisting and retrieving the execution state of large-scale or long-running batch
 * operations.
 *
 * <p>
 * This service is intended to support resumable, user-specific batch tasks. Implementations can
 * store and retrieve {@link BatchProgress} information based on a unique task identifier and user
 * (actor), allowing interrupted or partial executions to be resumed or monitored.
 * </p>
 *
 * <p>
 * Typical use cases include batch jobs that operate on large datasets, user-triggered exports, or
 * scheduled processing with checkpointing support.
 * </p>
 */
public interface MasiveOperationStorage {


  /**
   * Stores the current progress of a batch operation.
   *
   * @param task the unique identifier for the batch task
   * @param actor the user or system actor responsible for the task
   * @param result the current progress of the operation to be saved
   */
  public void save(String taks, String actor, BatchProgress result);

  /**
   * Restores the last known progress of a batch task, if available.
   *
   * @param task the unique identifier for the batch task
   * @param actor the user or actor requesting the restoration
   * @return an {@link Optional} containing the restored {@link BatchProgress}, or empty if no
   *         progress was found
   */
  public Optional<BatchProgress> restores(String task, String actor);

  /**
   * Marks a batch task as completed, storing its completion timestamp.
   *
   * @param taskUid the unique identifier of the task to finalize
   * @param until the point in time when the task was considered completed
   * @param actor the user or system actor responsible for the task
   */
  public void finish(String taskUid, Instant until, String actor);
}
