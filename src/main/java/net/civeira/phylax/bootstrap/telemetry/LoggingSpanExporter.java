/* @autogenerated */
package net.civeira.phylax.bootstrap.telemetry;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.jboss.logging.Logger;
import org.jboss.logging.MDC;

import io.opentelemetry.sdk.common.CompletableResultCode;
import io.opentelemetry.sdk.trace.data.SpanData;
import io.opentelemetry.sdk.trace.export.SpanExporter;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class LoggingSpanExporter implements SpanExporter {

  private static final Logger LOGGER = Logger.getLogger(LoggingSpanExporter.class);

  @Override
  public CompletableResultCode export(Collection<SpanData> spans) {
    List<String> attributes = new ArrayList<>();
    for (SpanData span : spans) {
      MDC.put("span.name", span.getName());
      MDC.put("span.spanId", span.getSpanId());
      MDC.put("span.traceId", span.getTraceId());
      span.getAttributes().forEach((key, value) -> {
        String name = "span.attributes." + key.getKey();
        MDC.put(name, String.valueOf(value));
        attributes.add(name);
      });
      MDC.put("span.parentSpanId", span.getParentSpanId());
      MDC.put("span.status", span.getStatus().getStatusCode().name());
      MDC.put("span.kind", span.getKind().name());
      MDC.put("span.startEpochNanos", span.getStartEpochNanos());
      MDC.put("span.endEpochNanos", span.getEndEpochNanos());
      LOGGER.info(span.getName());
    }
    MDC.remove("span.name");
    MDC.remove("span.spanId");
    MDC.remove("span.traceId");
    MDC.remove("span.parentSpanId");
    MDC.remove("span.status");
    MDC.remove("span.kind");
    MDC.remove("span.startEpochNanos");
    MDC.remove("span.endEpochNanos");
    attributes.forEach(MDC::remove);
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode flush() {
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode shutdown() {
    return CompletableResultCode.ofSuccess();
  }
}
