/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html;

import java.security.SecureRandom;
import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.ResponseBuilder;
import lombok.Builder;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.features.oauth.authentication.domain.gateway.TemporalKeysGateway;

@RequestScoped
@RequiredArgsConstructor
public class SecureHtmlBuilder {
  @Getter
  public static class Snipped {
    private final String code;
    private final String[] dependecy;

    private Snipped(String code, String... dependency) {
      this.code = code;
      this.dependecy = dependency;
    }
  }

  @Getter
  @Builder
  public static class EncrytFieldTransfer {
    public final String to;
    public final String from;
  }

  private final TemporalKeysGateway adapter;
  private final AesCipherService cipher;
  private final SecureRandom random = new SecureRandom(); // Compliant for security-sensitive use
                                                          // cases


  public Snipped addSignAndSend(String name, String form) {
    return addSign(name, true, form);
  }

  public Snipped addSign(String name) {
    return addSign(name, false, null);
  }

  public String decrypt(String value) {
    String secret = adapter.getCurrentKey();
    System.err.println("ESTOY DESENCRIPTANDO CON " + secret);
    return cipher.decrypt(value, secret).orElse("");
  }

  public Snipped focusOn(String name) {
    return new Snipped("document.getElementById('" + name + "').focus();");
  }

  public Snipped cypher(List<EncrytFieldTransfer> fields, String form) {
    String secret = adapter.getCurrentKey();

    StringBuilder group = new StringBuilder();
    fields.forEach(field -> {

      String uid = "q" + random.nextInt(1000) + Math.abs((field.getFrom()).hashCode());
      group.append(
          "" + "  let plainPassword" + uid + " = document.getElementById('" + field.getFrom()
              + "').value;\r\n" + "  let encryptedPassword" + uid + " = await encrypt(plainPassword"
              + uid + ", '" + secret + "');" + "\r\n" + "  document.getElementById('"
              + field.getFrom() + "').value = '';\r\n" + "  document.getElementById('"
              + field.getTo() + "').value = encryptedPassword" + uid + ";" + "\r\n" + "");
    });
    return new Snipped("" + "document.getElementById('" + form
        + "').addEventListener('submit', async function(event) {\r\n"
        // + " event.preventDefault();\r\n"
        + group.toString()
        // + " this.submit();\r\n"
        + "});" + "", "oauth.min.js");
  }

  public String configureScripts(Snipped... spnippeds) {
    String imp = "";
    String code = "";
    for (Snipped snipped : spnippeds) {
      if (null != snipped.getDependecy()) {
        for (String dep : snipped.getDependecy()) {
          String row = "" + "<script src=\"/oauth/assets/" + dep + "\"></script>\r\n" + "";
          if (!imp.contains(row)) {
            imp += row;
          }
        }
        if (!code.contains(snipped.getCode())) {
          code += snipped.getCode();
        }
      }
    }
    return "" + imp + "<script>"
        + "document.addEventListener('DOMContentLoaded', async function(event) {\r\n" + code + "});"
        + "</script>" + "";
  }

  private Snipped addSign(String name, boolean send, String form) {
    String secret = adapter.getCurrentKey();
    return new Snipped(
        "" + "  const token = await signToken('" + secret + "');\r\n"
            + "  document.getElementById(\"" + name + "\").value = token;"
            + (send ? "document.getElementById(\"" + form + "\").submit();" : "") + "" + "",
        "jsrsasign-jwths-min.js", "oauth.min.js");
  }

  public Optional<String> verifyToken(String token) {
    return adapter.verifyToken(token);
  }

  public Response secureHtmlResponse(ResponseBuilder builder) {
    return builder.build();
  }

  public Response secureRedirectResponse(ResponseBuilder builder) {
    return builder.build();
  }

}
