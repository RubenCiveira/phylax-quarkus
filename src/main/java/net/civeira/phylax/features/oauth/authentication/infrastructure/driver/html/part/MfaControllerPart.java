/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.part;

import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.function.Function;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.MultivaluedMap;
import jakarta.ws.rs.core.NewCookie;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.ResponseBuilder;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.authentication.application.spi.DecoratePageSpi;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserLoginSpi;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationChallege;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationResult;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.FrontAcessController;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.FrontAcessController.StepResult;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.SecureHtmlBuilder;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;

@RequestScoped
@RequiredArgsConstructor
public class MfaControllerPart {
  private final SecureHtmlBuilder securer;
  private final UserLoginSpi loginApi;
  private final DecoratePageSpi decorator;

  public AuthenticationChallege getChallenge() {
    return AuthenticationChallege.MFA;
  }

  public Response doPaintMfaForm(Locale locale, NewCookie session) {
    return securer.secureHtmlResponse(doPaintMfaFormContent(locale, null).cookie(session));
  }

  private ResponseBuilder doPaintMfaFormContent(Locale locale, String msg) {
    String js = securer.configureScripts(securer.addSign("sign"), securer.focusOn("mfa_code"));

    String title = FrontAcessController.i18n(locale, "mfa.title");
    String error = FrontAcessController.i18n(locale, "mfa.error-format", msg);

    String help = FrontAcessController.i18n(locale, "mfa.help");
    String code = FrontAcessController.i18n(locale, "mfa.code");
    String send = FrontAcessController.i18n(locale, "mfa.send");

    String backLabel = FrontAcessController.i18n(locale, "mfa.back-label");
    String backText = FrontAcessController.i18n(locale, "mfa.back-text",
        "<input class=\"inline\" type=\"submit\" value=\"" + backLabel + "\" />");

    return Response
        .ok(decorator.getFullPage("MFA", js + "<h1>" + title + "</h1>" + "<p>" + help + "</p>"
            + (null == msg ? "" : "<p class=\"error\"> " + error + "</p>")
            + "<form method=\"POST\">" + "<input type=\"hidden\" name=\"csid\" id=\"sign\" />"
            + "<label>" + code + "<input type=\"text\" name=\"mfa_code\" id=\"mfa_code\" value=\""
            + "\" /></label>" + "<input type=\"hidden\" name=\"step\" value=\"mfa\" />"

            + "<input class=\"primary-button action-button\" type=\"submit\" value=\"" + send
            + "\" />" + "</form>"

            + "<form method=\"POST\">" + "<input type=\"hidden\" name=\"step\" value=\"start\" />"
            + "<p>" + backText + "</p>" + "</form>" + "", locale))
        .type(FrontAcessController.TEXT_HTML);
  }

  public Optional<Response> process(String step, Optional<String> oUser,
      ClientDetails clientDetails, AuthRequest request, MultivaluedMap<String, String> paramMap,
      Function<StepResult, Response> resolver, List<AuthenticationChallege> challenges) {
    if ("mfa".equals(step) && oUser.isPresent()) {
      return Optional
          .of(doExecMfa(clientDetails, request, paramMap, oUser.get(), resolver, challenges));
    } else {
      return Optional.empty();
    }
  }

  private Response doExecMfa(ClientDetails clientDetails, AuthRequest request,
      MultivaluedMap<String, String> paramMap, String username,
      Function<StepResult, Response> resolver, List<AuthenticationChallege> challenges) {
    AuthenticationResult validateMfa = loginApi.validateMfa(request, username,
        FrontAcessController.first(paramMap, "mfa_code"), clientDetails, challenges);
    if (validateMfa.isRight()) {
      return resolver.apply(StepResult.builder().username(username).clientDetails(clientDetails)
          .request(request).build());
    } else {
      return securer
          .secureHtmlResponse(doPaintMfaFormContent(request.getLocale(), "MFA incorrecto"));
    }
  }
}
