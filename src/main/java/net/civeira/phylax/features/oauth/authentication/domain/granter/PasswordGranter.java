/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.domain.granter;

import java.util.List;
import java.util.Map;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserLoginSpi;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationResult;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;

@RequestScoped
@RequiredArgsConstructor
public class PasswordGranter implements TokenGranter {
  private final UserLoginSpi loginApi;

  @Override
  public boolean canHandle(String grantType) {
    return "password".equals(grantType);
  }

  @Override
  public AuthenticationResult autenticate(final AuthRequest request, ClientDetails client,
      Map<String, List<String>> paramMap) {
    if (client.isProtectedWithSecret()) {
      return loginApi.validateUserData(request, first(paramMap, "username"),
          first(paramMap, "password"), client, List.of());
    } else {
      return AuthenticationResult.notAllowed(request.getTenant(), "",
          "Password autentication is only allowed for autenticated clients");
    }
  }

  private String first(Map<String, List<String>> paramMap, String key) {
    return paramMap.containsKey(key) || paramMap.get(key).size() > 0 ? paramMap.get(key).get(0)
        : null;
  }
}
