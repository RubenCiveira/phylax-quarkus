/* @autogenerated */
package net.civeira.phylax.features.oauth.rbac.infrastructure.driven.rest;

import java.util.List;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.HeaderParam;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.rbac.application.spi.PartyVerifier;
import net.civeira.phylax.features.oauth.rbac.application.spi.RbacStore;
import net.civeira.phylax.features.oauth.rbac.domain.PropertyList;
import net.civeira.phylax.features.oauth.rbac.domain.ScopeList;

@Path("")
@RequestScoped
@RequiredArgsConstructor
public class ResourceRegister {
  private final PartyVerifier verifier;
  private final RbacStore schemaStore;

  @POST
  @Path("authz/protection/resource/scope")
  public Response registerScopes(@HeaderParam("API-Key") final String apiKey,
      final List<ScopeList> paramMap) {
    return verifier.findOptional(apiKey).map(trust -> {
      schemaStore.registerScopes(trust, paramMap);
      return Response.noContent().build();
    }).orElseGet(() -> Response.status(403, "Client not allowed.").build());
  }

  @POST
  @Path("authz/protection/resource/schema")
  public Response registerSchemas(@HeaderParam("API-Key") final String apiKey,
      final List<PropertyList> paramMap) {
    return verifier.findOptional(apiKey).map(trust -> {
      schemaStore.registerSchema(trust, paramMap);
      return Response.noContent().build();
    }).orElseGet(() -> Response.status(403, "Client not allowed.").build());
  }
}
