/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.infrastructure.driven;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Optional;

import javax.sql.DataSource;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.authentication.domain.gateway.SessionStoreGateway;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationData;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationMode;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;

@RequestScoped
@RequiredArgsConstructor
public class SessionStoreJdbcAdapter implements SessionStoreGateway {
  private final DataSource source;
  private final ObjectMapper mapper;

  @Override
  public Optional<SessionInfo> loadSession(String state) {
    cleanTemp();
    try (Connection connection = source.getConnection()) {
      try (PreparedStatement prepareStatement = connection.prepareStatement(
          "SELECT client_id, grant_type, auth_data, csid FROM _oauth_sessions where session=? and expiration > ?")) {
        prepareStatement.setString(1, state);
        prepareStatement.setTimestamp(2, new Timestamp(System.currentTimeMillis()));
        try (ResultSet executeQuery = prepareStatement.executeQuery()) {
          if (executeQuery.next()) {
            String authJson = executeQuery.getString(3);
            AuthenticationData auth = mapper.readValue(authJson, AuthenticationData.class);
            auth.setMode(AuthenticationMode.SESSION);
            return Optional.of(SessionInfo.builder().clientId(executeQuery.getString(1))
                .grant(executeQuery.getString(2)).validationData(auth)
                .csid(executeQuery.getString(4)).build());
          }
        }
      }
    } catch (SQLException | JsonProcessingException ex) {
      throw new IllegalStateException(ex);
    }
    return Optional.empty();
  }

  @Override
  public void saveSession(String state, ClientDetails clientDetails, String grant,
      AuthenticationData validationData, String csid) {
    try (Connection conn = source.getConnection();
        PreparedStatement stat = conn.prepareStatement(
            "INSERT INTO _oauth_sessions (session, expiration, client_id, grant_type, auth_data, csid) VALUES (?, ?, ?, ?, ?, ?)")) {
      stat.setString(1, state);
      stat.setTimestamp(2, new Timestamp(System.currentTimeMillis() + 360000000));
      stat.setString(3, clientDetails.getClientId());
      stat.setString(4, grant);
      stat.setString(5, mapper.writeValueAsString(validationData));
      stat.setString(6, csid);
      stat.execute();
    } catch (SQLException | JsonProcessingException ex) {
      throw new IllegalStateException(ex);
    }
  }

  @Override
  public void deleteSession(String state) {
    try (Connection conn = source.getConnection();
        PreparedStatement stat =
            conn.prepareStatement("DELETE FROM _oauth_sessions where session = ?")) {
      stat.setString(1, state);
      stat.execute();
    } catch (SQLException ex) {
      throw new IllegalStateException(ex);
    }
  }

  @Override
  public void updateSession(String newState, String oldState) {
    try (Connection conn = source.getConnection();
        PreparedStatement stat = conn.prepareStatement(
            "UPDATE _oauth_sessions set session=?, expiration = ? where session = ?")) {
      stat.setString(1, newState);
      stat.setTimestamp(2, new Timestamp(System.currentTimeMillis() + 360000000));
      stat.setString(3, oldState);
      stat.execute();
    } catch (SQLException ex) {
      throw new IllegalStateException(ex);
    }
  }

  private void cleanTemp() {
    try (Connection connection = source.getConnection()) {
      try (PreparedStatement prepareStatement =
          connection.prepareStatement("DELETE FROM _oauth_sessions where expiration < ?")) {
        prepareStatement.setTimestamp(1, new Timestamp(System.currentTimeMillis() - 60000));
        prepareStatement.execute();
      }
    } catch (SQLException ex) {
      throw new IllegalStateException(ex);
    }
  }
}
