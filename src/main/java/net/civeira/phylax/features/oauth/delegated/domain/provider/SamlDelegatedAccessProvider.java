/* @autogenerated */
package net.civeira.phylax.features.oauth.delegated.domain.provider;

import java.io.ByteArrayInputStream;
import java.io.StringWriter;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.time.Instant;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.xml.XMLConstants;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.quarkus.runtime.annotations.RegisterForReflection;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedAccessExternalProvider;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedProviderDescription;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedRequestDetails;

@Slf4j
@RequiredArgsConstructor
public class SamlDelegatedAccessProvider implements DelegatedAccessExternalProvider {

  @Data
  @RegisterForReflection
  public static class SamlData {
    private String name;
    private String code;
    private String email;
  }

  private final String id;
  private final String idpSsoTargetUrl;
  private final String issuer;
  private final String certificate;
  private final boolean automatic;

  @Override
  public RequestInfo request(AuthRequest request, DelegatedRequestDetails detail) {
    try {
      String samlRequest = generateAuthRequest(detail.getExternalUrl());
      String encodedSamlRequest = URLEncoder.encode(samlRequest, StandardCharsets.UTF_8.toString());

      RequestInfo info = new RequestInfo();
      info.setTitle("Redirigiendo por saml");
      info.setMessage("Vamos a ir a su login de saml");
      info.setTargetUrl(idpSsoTargetUrl + "?SAMLRequest=" + encodedSamlRequest);
      info.setWithPost(false);
      info.setParams(new HashMap<>());
      return info;
    } catch (Exception ex) {
      log.error("Unable to prepare saml request");
      throw new IllegalStateException("Wrong saml config", ex);
    }
  }

  @Override
  public ResponseInfo response(AuthRequest request, DelegatedRequestDetails detail,
      Map<String, String[]> params) {
    ObjectMapper mapper = new ObjectMapper();
    try {
      SamlData processResponse =
          processResponse(params.get("SAMLResponse")[0], loadCertificate(certificate), id);
      ResponseInfo info = new ResponseInfo();
      info.setInnerToken(mapper.writeValueAsString(processResponse));
      return info;
    } catch (Exception ex) {
      log.error("Unable to acept response", ex);
      return null;
    }
  }

  @Override
  public UserData userInfo(AuthRequest request, DelegatedRequestDetails detail, String innerToken) {
    ObjectMapper mapper = new ObjectMapper();
    try {
      SamlData data = mapper.readValue(innerToken, SamlData.class);
      return UserData.builder().code(data.getCode()).name(data.getName()).email(data.getEmail())
          .build();
    } catch (JsonProcessingException e) {
      log.error("Unable to read saml response", e);
      return null;
    }
  }

  @Override
  public String getId(AuthRequest request) {
    return id;
  }

  @Override
  public DelegatedProviderDescription info(AuthRequest request) {
    DelegatedProviderDescription pd = new DelegatedProviderDescription();
    pd.setId(id);
    pd.setName("SAML");
    pd.setLogo("/oauth/assets/socials/saml.png");
    pd.setAutomatic(automatic);
    return pd;
  }

  private String generateAuthRequest(String assertionConsumerServiceUrl)
      throws ParserConfigurationException, TransformerException {
    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
    Document document = documentBuilder.newDocument();

    Element root =
        document.createElementNS("urn:oasis:names:tc:SAML:2.0:protocol", "samlp:AuthnRequest");
    root.setAttribute("ID", "_" + UUID.randomUUID().toString());
    root.setAttribute("Version", "2.0");
    root.setAttribute("IssueInstant", Instant.now().toString());
    root.setAttribute("ProtocolBinding", "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST");
    root.setAttribute("AssertionConsumerServiceURL", assertionConsumerServiceUrl);
    root.setAttribute("Destination", idpSsoTargetUrl);
    document.appendChild(root);

    Element issuerElement =
        document.createElementNS("urn:oasis:names:tc:SAML:2.0:assertion", "saml:Issuer");
    issuerElement.setTextContent(issuer);
    root.appendChild(issuerElement);

    TransformerFactory transformerFactory = TransformerFactory.newInstance();
    transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
    transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");

    // Si se usa Xalan como implementación, es necesario establecer también:
    transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

    Transformer transformer = transformerFactory.newTransformer();
    StringWriter writer = new StringWriter();
    transformer.transform(new DOMSource(document), new StreamResult(writer));

    String authRequestXml = writer.toString();
    return Base64.getEncoder().encodeToString(authRequestXml.getBytes());
  }

  private static X509Certificate loadCertificate(String pemCertificate) throws Exception {
    String pemContent = pemCertificate.replace("-----BEGIN CERTIFICATE-----", "")
        .replace("-----END CERTIFICATE-----", "").replaceAll("\\s+", "");
    byte[] decoded = java.util.Base64.getDecoder().decode(pemContent);
    CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
    return (X509Certificate) certificateFactory
        .generateCertificate(new ByteArrayInputStream(decoded));
  }

  private SamlData processResponse(String samlResponse, X509Certificate certificate,
      String expectedAudience) throws Exception {
    SamlData result = new SamlData();
    // Decodificar la respuesta SAML desde Base64
    byte[] decodedBytes = Base64.getDecoder().decode(samlResponse);
    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
    documentBuilderFactory.setNamespaceAware(true);
    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
    Document document = documentBuilder.parse(new ByteArrayInputStream(decodedBytes));

    // Verificar la firma del XML
    if (!verifySignature(document, certificate)) {
      throw new SecurityException("Invalid SAML Response signature");
    }

    // Obtener el elemento raíz y las afirmaciones (Assertions)
    Element root = document.getDocumentElement();
    NodeList assertionList =
        root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion");

    if (assertionList.getLength() > 0) {
      Element assertion = (Element) assertionList.item(0);

      // Validar NotBefore y NotOnOrAfter
      validateTimeConditions(assertion);

      // Validar Audience
      validateAudience(assertion, expectedAudience);

      // Extraer el Subject y el NameID
      NodeList subjectList =
          assertion.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject");
      if (subjectList.getLength() > 0) {
        Element subject = (Element) subjectList.item(0);
        NodeList nameIdList =
            subject.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID");

        if (nameIdList.getLength() > 0) {
          String userId = nameIdList.item(0).getTextContent();
          result.setCode(userId);
          result.setName(userId);
          result.setEmail(userId);
        }
      }

      // Extraer los atributos del AttributeStatement
      NodeList attributeStatementList = assertion
          .getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AttributeStatement");
      if (attributeStatementList.getLength() > 0) {
        Element attributeStatement = (Element) attributeStatementList.item(0);
        NodeList attributeList = attributeStatement
            .getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Attribute");

        for (int i = 0; i < attributeList.getLength(); i++) {
          Element attribute = (Element) attributeList.item(i);
          String attributeName = attribute.getAttribute("Name");

          // Dependiendo de tu configuración en Okta, estos nombres pueden variar
          if ("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
              .equals(attributeName)) { // Email
            NodeList attributeValueList = attribute
                .getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AttributeValue");
            if (attributeValueList.getLength() > 0) {
              result.setEmail(attributeValueList.item(0).getTextContent());
            }
          } else if ("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
              .equals(attributeName)) { // Full Name
            NodeList attributeValueList = attribute
                .getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AttributeValue");
            if (attributeValueList.getLength() > 0) {
              result.setName(attributeValueList.item(0).getTextContent());
            }
          }
        }
      }
    }

    return result;
  }

  private boolean verifySignature(Document document, X509Certificate certificate)
      throws XMLSignatureException, MarshalException {
    NodeList signatureNodeList = document.getElementsByTagNameNS(XMLSignature.XMLNS, "Signature");
    if (signatureNodeList.getLength() == 0) {
      throw new XMLSignatureException("No XML Digital Signature found, document is discarded");
    }

    // Agregar la ID del documento al contexto de validación
    Element documentElement = document.getDocumentElement();
    documentElement.setIdAttribute("ID", true);

    DOMValidateContext valContext =
        new DOMValidateContext(certificate.getPublicKey(), signatureNodeList.item(0));
    valContext.setProperty("org.jcp.xml.dsig.secureValidation", Boolean.TRUE);

    XMLSignatureFactory signatureFactory = XMLSignatureFactory.getInstance("DOM");
    XMLSignature signature = signatureFactory.unmarshalXMLSignature(valContext);

    return signature.validate(valContext);
  }

  private void validateTimeConditions(Element assertion) throws XMLSignatureException {
    NodeList conditionsList =
        assertion.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Conditions");
    if (conditionsList.getLength() == 0) {
      throw new XMLSignatureException("No Conditions element found in SAML assertion");
    }

    Element conditions = (Element) conditionsList.item(0);
    String notBeforeStr = conditions.getAttribute("NotBefore");
    String notOnOrAfterStr = conditions.getAttribute("NotOnOrAfter");

    Instant notBefore = Instant.parse(notBeforeStr);
    Instant notOnOrAfter = Instant.parse(notOnOrAfterStr);
    Instant now = Instant.now();
    if (now.isBefore(notBefore)) {
      throw new SecurityException("SAML assertion is not yet valid");
    }
    if (now.isAfter(notOnOrAfter)) {
      throw new SecurityException("SAML assertion is no longer valid");
    }
  }

  private void validateAudience(Element assertion, String expectedAudience)
      throws XMLSignatureException {
    NodeList audienceRestrictionList = assertion
        .getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AudienceRestriction");
    if (audienceRestrictionList.getLength() == 0) {
      throw new XMLSignatureException("No AudienceRestriction element found in SAML assertion");
    }
    for (int i = 0; i < audienceRestrictionList.getLength(); i++) {
      Element audienceRestriction = (Element) audienceRestrictionList.item(i);
      NodeList audienceList = audienceRestriction
          .getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience");
      for (int j = 0; j < audienceList.getLength(); j++) {
        Element audience = (Element) audienceList.item(j);
        if (expectedAudience.equals(audience.getTextContent())) {
          return; // Audience is valid
        }
      }
    }
    throw new SecurityException("SAML assertion audience is invalid");
  }
}
