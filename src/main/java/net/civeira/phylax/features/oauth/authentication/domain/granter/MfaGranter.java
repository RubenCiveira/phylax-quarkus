/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.domain.granter;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserLoginSpi;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationChallege;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationResult;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;
import net.civeira.phylax.features.oauth.token.domain.JwtTokenBuilder;

@RequestScoped
@RequiredArgsConstructor
public class MfaGranter implements TokenGranter {
  private final JwtTokenBuilder verifier;
  private final UserLoginSpi loginApi;

  @Override
  public boolean canHandle(String grantType) {
    return "mfa".equals(grantType);
  }

  @Override
  public AuthenticationResult autenticate(final AuthRequest request, ClientDetails client,
      Map<String, List<String>> paramMap) {
    Optional<String> verifyMfa =
        verifier.verifyMfa(first(paramMap, "mfa_token"), request.getTenant());
    AuthenticationResult result;
    if (verifyMfa.isPresent()) {
      String username = verifyMfa.get();
      result = loginApi.validateMfa(request, username, first(paramMap, "mfa_code"), client,
          List.of(AuthenticationChallege.MFA));
    } else {
      result = AuthenticationResult.notAllowed(request.getTenant(), "", "invalid token");
    }
    return result;
  }

  private String first(Map<String, List<String>> paramMap, String key) {
    return paramMap.containsKey(key) || paramMap.get(key).size() > 0 ? paramMap.get(key).get(0)
        : null;
  }
}
