/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.domain.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Optional;

import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.MultivaluedMap;
import jakarta.ws.rs.core.UriInfo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NonNull;
import lombok.extern.jackson.Jacksonized;

@Data
@Jacksonized
@Builder
@AllArgsConstructor
public class AuthRequest {
  @NonNull
  private final String tenant;
  private final Optional<String> clientId;
  private final Optional<String> prompt;
  private final Optional<String> scope;
  private final Optional<String> state;
  private final Optional<String> nonce;
  private final Optional<String> codeChallenge;
  private final Optional<String> codeChallengeMethod;
  private final Optional<String> redirect;
  private final Locale locale;
  private final Optional<String> responseType;
  private final List<String> audiences;

  public AuthRequest(String tenant, UriInfo req, HttpHeaders headers) {
    MultivaluedMap<String, String> params = req.getQueryParameters();
    String aus = params.getFirst("audience");
    this.tenant = tenant;
    this.prompt = Optional.ofNullable(params.getFirst("prompt"));
    this.clientId = Optional.ofNullable(params.getFirst("client_id"));
    this.scope = Optional.ofNullable(params.getFirst("scope"));
    this.state = Optional.ofNullable(params.getFirst("state"));
    this.nonce = Optional.ofNullable(params.getFirst("nonce"));
    this.codeChallenge = Optional.ofNullable(params.getFirst("code_challenge"));
    this.codeChallengeMethod = Optional.ofNullable(params.getFirst("code_challenge_method"));
    this.redirect = Optional.ofNullable(params.getFirst("redirect_uri"));
    this.locale =
        Optional.ofNullable(headers.getAcceptableLanguages().get(0)).orElse(Locale.getDefault());
    this.responseType = Optional.ofNullable(params.getFirst("response_type"));
    List<String> explicitAud =
        new ArrayList<>(null == aus ? List.of() : Arrays.asList(aus.split("\\,")));
    this.clientId.ifPresent(azp -> {
      if (!explicitAud.contains(azp)) {
        explicitAud.add(azp);
      }
    });
    this.audiences = explicitAud.stream().toList();
  }

  public String encodeInUrl() {
    return "" + append("audiences", getAudiences()) + append("prompt", getPrompt())
        + append("scope", getScope()) + append("clientId", getClientId())
        + append("state", getState()) + append("nonce", getNonce())
        + append("code_challenge", getCodeChallenge())
        + append("code_challenge_method", getCodeChallengeMethod())
        + append("redirect_uri", getRedirect()) + append("response_type", getResponseType());
  }

  private String append(String key, List<String> of) {
    return of.isEmpty() ? ""
        : "&" + key + "=" + URLEncoder.encode(String.join(",", of), StandardCharsets.UTF_8);
  }

  private String append(String key, Optional<String> of) {
    return of.map(val -> "&" + key + "=" + URLEncoder.encode(val, StandardCharsets.UTF_8))
        .orElse("");
  }
}
