/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.part;

import java.util.Locale;
import java.util.Optional;
import java.util.function.Function;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.MultivaluedMap;
import jakarta.ws.rs.core.NewCookie;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.ResponseBuilder;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.authentication.application.spi.DecoratePageSpi;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserConsentSpi;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserConsentSpi.Consent;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationChallege;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.FrontAcessController;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.FrontAcessController.StepResult;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.SecureHtmlBuilder;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;

@RequestScoped
@RequiredArgsConstructor
public class ConsentControllerPart {
  private final SecureHtmlBuilder securer;
  private final UserConsentSpi consentApi;
  private final DecoratePageSpi decorator;

  public Response doPaintConsent(Locale locale, AuthRequest request, String user,
      NewCookie session) {
    return securer
        .secureHtmlResponse(doPaintConsentContent(locale, request, user, null).cookie(session));
  }

  private ResponseBuilder doPaintConsentContent(Locale locale, AuthRequest request, String user,
      String msg) {
    Optional<Consent> opt = consentApi.userRequiredConsent(locale, request, user);
    if (opt.isPresent()) {
      Consent consent = opt.get();
      String js = securer.configureScripts(securer.addSign("sign"));

      String title = FrontAcessController.i18n(locale, "consent.title");
      String error = FrontAcessController.i18n(locale, "consent.error-format", msg);

      String help = FrontAcessController.i18n(locale, "consent.help");
      String code = FrontAcessController.i18n(locale, "consent.code");
      String send = FrontAcessController.i18n(locale, "consent.send");

      String backLabel = FrontAcessController.i18n(locale, "consent.back-label");
      String backText = FrontAcessController.i18n(locale, "consent.back-text",
          "<input class=\"inline\" type=\"submit\" value=\"" + backLabel + "\" />");

      return Response.ok(decorator.getFullPage("Consent",
          js + "<h1>" + title + "</h1><p>" + help + "</p>"
              + (null == msg ? "" : "<p class=\"error\">" + error + "</p>")
              + "<form method=\"POST\">"
              + "<div style=\"with:100%;height:200px;overflow:auto; border:solid black 1px;\">" + ""
              + consent.getFullText() + "</div>" + "<label>" + code
              + "<input type=\"checkbox\" name=\"consent\" /></label>"
              + "<input type=\"hidden\" name=\"csid\" id=\"sign\" />"
              + "<input type=\"hidden\" name=\"version\" value=\"" + consent.getVersion() + "\" />"
              + "<input type=\"hidden\" name=\"step\" value=\"consent\" />"
              + "<input class=\"primary-button action-button\" type=\"submit\" value=\"" + send
              + "\" />" + "</form>" + "<form method=\"POST\">"
              + "<input type=\"hidden\" name=\"step\" value=\"start\" />" + "<p>" + backText
              + "</p>" + "</form>" + "",
          locale)).type(FrontAcessController.TEXT_HTML);
    } else {
      throw new IllegalStateException("Consent is not required now...");
    }
  }

  public Optional<Response> process(String step, Optional<String> oUser,
      ClientDetails clientDetails, AuthRequest request, MultivaluedMap<String, String> paramMap,
      Function<StepResult, Response> resolver) {
    if ("consent".equals(step) && oUser.isPresent()) {
      return Optional.of(doExecConsent(clientDetails, request, paramMap, oUser.get(), resolver));
    } else {
      return Optional.empty();
    }
  }

  private Response doExecConsent(ClientDetails clientDetails, AuthRequest request,
      MultivaluedMap<String, String> paramMap, String username,
      Function<StepResult, Response> resolver) {
    boolean confirmConsent = consentApi.confirmConsent(request, username,
        FrontAcessController.first(paramMap, "version"));
    if (confirmConsent) {
      return resolver.apply(StepResult.builder().username(username).clientDetails(clientDetails)
          .request(request).build());
    } else {
      return securer
          .secureHtmlResponse(doPaintConsentContent(request.getLocale(), request, username, ""));
    }
  }

  public AuthenticationChallege getChallenge() {
    return AuthenticationChallege.USE_CONSENT;
  }

}
