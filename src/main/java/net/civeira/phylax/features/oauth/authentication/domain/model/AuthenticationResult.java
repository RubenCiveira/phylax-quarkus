/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.domain.model;

import java.util.NoSuchElementException;

import net.civeira.phylax.features.oauth.authentication.domain.exception.AuthenticationException;
import net.civeira.phylax.features.oauth.authentication.domain.exception.ConsentRequiredException;
import net.civeira.phylax.features.oauth.authentication.domain.exception.MfaRequiredException;
import net.civeira.phylax.features.oauth.authentication.domain.exception.NewMfaRequiredException;
import net.civeira.phylax.features.oauth.authentication.domain.exception.NewPasswordRequiredException;
import net.civeira.phylax.features.oauth.authentication.domain.exception.NotAllowedAccessUserException;
import net.civeira.phylax.features.oauth.authentication.domain.exception.UnknownUserException;
import net.civeira.phylax.features.oauth.authentication.domain.exception.WrongCredentialsException;

public final class AuthenticationResult {

  private AuthenticationException fail;

  private AuthenticationData data;

  public static AuthenticationResult right(AuthenticationData data) {
    return new AuthenticationResult(null, data);
  }

  public static AuthenticationResult wrong(AuthenticationException fail) {
    return new AuthenticationResult(fail, null);
  }

  public static AuthenticationResult unknownName(String tenant, String name) {
    return new AuthenticationResult(new UnknownUserException(tenant, name), null);
  }

  public static AuthenticationResult wrongCredential(String tenant, String name) {
    return new AuthenticationResult(new WrongCredentialsException(tenant, name), null);
  }

  public static AuthenticationResult mfaRequired(String tenant, String name) {
    return new AuthenticationResult(new MfaRequiredException(tenant, name), null);
  }

  public static AuthenticationResult newMfaRequired(String tenant, String name) {
    return new AuthenticationResult(new NewMfaRequiredException(tenant, name), null);
  }

  public static AuthenticationResult newPasswordRequired(String tenant, String name) {
    return new AuthenticationResult(new NewPasswordRequiredException(tenant, name), null);
  }

  public static AuthenticationResult consentRequired(String tenant, String name) {
    return new AuthenticationResult(new ConsentRequiredException(tenant, name), null);
  }

  public static AuthenticationResult notAllowed(String tenant, String name, String reason) {
    return new AuthenticationResult(new NotAllowedAccessUserException(tenant, name, reason), null);
  }

  private AuthenticationResult(AuthenticationException fail, AuthenticationData data) {
    super();
    this.fail = fail;
    this.data = data;
  }

  public AuthenticationData getData() {
    if (!isRight()) {
      throw fail;
    }
    return data;
  }

  public AuthenticationException getFail() {
    if (isRight()) {
      throw new NoSuchElementException();
    }
    return fail;
  }

  public boolean isRight() {
    return null != data;
  }
}
