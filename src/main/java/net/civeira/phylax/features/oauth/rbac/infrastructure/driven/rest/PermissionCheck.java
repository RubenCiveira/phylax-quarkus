/* @autogenerated */
package net.civeira.phylax.features.oauth.rbac.infrastructure.driven.rest;

import java.util.List;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.HeaderParam;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.rbac.application.spi.PartyVerifier;
import net.civeira.phylax.features.oauth.rbac.application.spi.RbacStore;
import net.civeira.phylax.features.oauth.rbac.domain.RoleGrant;

@Path("")
@RequestScoped
@RequiredArgsConstructor
public class PermissionCheck {
  private final PartyVerifier verifier;
  private final RbacStore schemaStore;

  @GET
  @Path("authz/protection/grant")
  public Response roles(@HeaderParam("API-Key") final String apiKey) {
    return verifier.findOptional(apiKey).map(rely -> {
      List<RoleGrant> granted = schemaStore.granted(rely);
      return Response.ok(granted).build();
    }).orElseGet(() -> Response.status(403, "Client not allowed.").build());
  }
}
