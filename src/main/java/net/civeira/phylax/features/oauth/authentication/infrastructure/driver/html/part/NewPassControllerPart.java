/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.part;

import java.util.Arrays;
import java.util.Locale;
import java.util.Optional;
import java.util.function.Function;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.MultivaluedMap;
import jakarta.ws.rs.core.NewCookie;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.ResponseBuilder;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.authentication.application.spi.DecoratePageSpi;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserPasswordChangeSpi;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserPasswordChangeSpi.ChPassRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationChallege;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.FrontAcessController;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.FrontAcessController.StepResult;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.SecureHtmlBuilder;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.SecureHtmlBuilder.EncrytFieldTransfer;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;

@RequestScoped
@RequiredArgsConstructor
public class NewPassControllerPart {
  private final SecureHtmlBuilder securer;
  private final DecoratePageSpi decorator;
  private final UserPasswordChangeSpi passwordChangeApi;

  public AuthenticationChallege getChallenge() {
    return AuthenticationChallege.FRESH_PASSWORD;
  }

  public Response doPaintNewPassForm(Locale locale, NewCookie session) {
    return securer.secureHtmlResponse(doPaintNewPassFormContent(locale, null).cookie(session));
  }

  private ResponseBuilder doPaintNewPassFormContent(Locale locale, String msg) {
    String js = securer.configureScripts(securer.addSign("sign"),
        securer.cypher(
            Arrays.asList(
                EncrytFieldTransfer.builder().from("type_old_pass").to("old_pass").build(),
                EncrytFieldTransfer.builder().from("type_new_pass").to("new_pass").build()),
            "chpass"),
        securer.focusOn("type_old_pass"));

    String title = FrontAcessController.i18n(locale, "chpass.title");
    String error = FrontAcessController.i18n(locale, "chpass.error-format", msg);

    String help = FrontAcessController.i18n(locale, "chpass.help");
    String current = FrontAcessController.i18n(locale, "chpass.current");
    String newpass = FrontAcessController.i18n(locale, "chpass.newpass");
    String send = FrontAcessController.i18n(locale, "chpass.send");

    String backLabel = FrontAcessController.i18n(locale, "chpass.back-label");
    String backText = FrontAcessController.i18n(locale, "chpass.back-text",
        "<input class=\"inline\" type=\"submit\" value=\"" + backLabel + "\" />");

    return Response.ok(decorator.getFullPage("password",
        js + "<h1>" + title + "</h1>" + "<p>" + help + "</p>"
            + (null == msg ? "" : "<p class=\"error\">" + error + "</p>")
            + "<form id=\"chpass\" method=\"POST\">"
            + "<input type=\"hidden\" name=\"csid\" id=\"sign\" />" + "<label>" + current
            + "<input type=\"password\" id=\"type_old_pass\" value=\"" + "\" /></label>" + "<label>"
            + newpass + "<input type=\"password\" id=\"type_new_pass\" value=\"" + "\" /></label>"
            + "<input type=\"hidden\" id=\"old_pass\" name=\"old_pass\" value=\"" + "\" />"
            + "<input type=\"hidden\" id=\"new_pass\" name=\"new_pass\" value=\"" + "\" />"
            + "<input type=\"hidden\" name=\"step\" value=\"new_pass\" />"
            + "<input class=\"primary-button action-button\" type=\"submit\" value=\"" + send
            + "\" />" + "</form>" + "<form method=\"POST\">"
            + "<input type=\"hidden\" name=\"step\" value=\"start\" />" + "<p>" + backText
            + "</form>" + "",
        locale)).type(FrontAcessController.TEXT_HTML);
  }

  public Optional<Response> process(String step, Optional<String> oUser,
      ClientDetails clientDetails, AuthRequest request, MultivaluedMap<String, String> paramMap,
      Function<StepResult, Response> resolver) {
    if ("new_pass".equals(step) && oUser.isPresent()) {
      return Optional.of(doExecNewPass(clientDetails, request, paramMap, oUser.get(), resolver));
    } else {
      return Optional.empty();
    }
  }

  private Response doExecNewPass(ClientDetails clientDetails, AuthRequest request,
      MultivaluedMap<String, String> paramMap, String username,
      Function<StepResult, Response> resolver) {
    Response response;
    String oldPass = securer.decrypt(FrontAcessController.first(paramMap, "old_pass"));
    String newPass = securer.decrypt(FrontAcessController.first(paramMap, "new_pass"));
    boolean updatePassword = passwordChangeApi.updatePassword(request, username,
        ChPassRequest.builder().newPassword(newPass).oldPassword(oldPass).build());
    if (updatePassword) {
      response = resolver.apply(StepResult.builder().username(username).clientDetails(clientDetails)
          .request(request).build());
    } else {
      response = securer.secureHtmlResponse(
          doPaintNewPassFormContent(request.getLocale(), "No se ha podido guardar"));
    }
    return response;
  }

}
