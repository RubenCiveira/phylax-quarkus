/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.domain.granter;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserLoginSpi;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationResult;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;
import net.civeira.phylax.features.oauth.delegated.domain.gateway.DelegatedStoreGateway;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedAccessExternalProvider;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedAccessExternalProvider.UserData;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedRequestDetails;
import net.civeira.phylax.features.oauth.delegated.domain.spi.DelegatedAccessAuthValidatorSpi;

@RequestScoped
@RequiredArgsConstructor
public class DelegatedAccessGranter implements TokenGranter {

  private final DelegatedStoreGateway repository;
  private final DelegatedAccessAuthValidatorSpi manager;
  private final UserLoginSpi loginApi;

  @Override
  public boolean canHandle(String grantType) {
    return "delegated".equalsIgnoreCase(grantType);
  }

  @Override
  public AuthenticationResult autenticate(final AuthRequest request, ClientDetails client,
      Map<String, List<String>> paramMap) {
    String tenant = request.getTenant();
    return repository.load(request, first(paramMap, "token")).flatMap(info -> {
      Optional<AuthenticationResult> infoFesponse = Optional.empty();
      DelegatedRequestDetails detail = DelegatedRequestDetails.builder()
          .provider(info.getProvider()).externalUrl(info.getExternUrl()).build();
      for (DelegatedAccessExternalProvider ssoProvider : manager.providers(request)) {
        if (ssoProvider.getId(request).equals(info.getProvider())) {
          // Saco el user name => necesito el resto....
          String code = info.getInnerToken();
          UserData userInfo = ssoProvider.userInfo(request, detail, info.getInnerToken());
          AuthenticationResult result =
              manager.retrieveUsername(request, ssoProvider.getId(request), userInfo)
                  .map(username -> loginApi.validatePreAuthenticated(request, username, client,
                      Arrays.asList()))
                  .orElseGet(() -> AuthenticationResult.unknownName(tenant, code));
          if (result.isRight()) {
            infoFesponse = Optional.of(loginApi.validatePreAuthenticated(request,
                result.getData().getUsername(), client, Arrays.asList()));
          }
          break;
        }
      }
      return infoFesponse;
    }).orElse(null);
  }

  private String first(Map<String, List<String>> paramMap, String key) {
    return paramMap.containsKey(key) || paramMap.get(key).size() > 0 ? paramMap.get(key).get(0)
        : null;
  }
}
