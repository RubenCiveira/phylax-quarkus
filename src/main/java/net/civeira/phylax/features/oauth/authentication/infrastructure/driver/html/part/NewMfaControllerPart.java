/* @autogenerated */
package net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.part;

import java.io.IOException;
import java.util.Locale;
import java.util.Optional;
import java.util.function.Function;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.MultivaluedMap;
import jakarta.ws.rs.core.NewCookie;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.ResponseBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.oauth.authentication.application.spi.DecoratePageSpi;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserMfaConfigSpi;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationChallege;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.FrontAcessController;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.FrontAcessController.StepResult;
import net.civeira.phylax.features.oauth.authentication.infrastructure.driver.html.SecureHtmlBuilder;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;

@Slf4j
@RequestScoped
@RequiredArgsConstructor
public class NewMfaControllerPart {
  private final SecureHtmlBuilder securer;
  private final DecoratePageSpi decorator;
  private final UserMfaConfigSpi mfaConfigApi;

  public AuthenticationChallege getChallenge() {
    return AuthenticationChallege.MFA;
  }

  public Response doPaintNewMfaForm(AuthRequest request, String username, Locale locale,
      NewCookie session) {
    return securer.secureHtmlResponse(
        doPaintNewMfaFormContent(request, username, locale, null).cookie(session));
  }

  public Optional<Response> mfaSelector(AuthRequest request, String user) {
    Locale locale = request.getLocale();
    return mfaConfigApi.configQr(request, user, locale).map(configQr -> {
      try {
        return Response.ok(configQr.getInputStream()).type(configQr.getContentType()).build();
      } catch (IOException e) {
        log.error("Error rendering QR", e);
        return Response.serverError().build();
      }
    });
  }

  private ResponseBuilder doPaintNewMfaFormContent(AuthRequest request, String username,
      Locale locale, String msg) {
    String js = securer.configureScripts(securer.addSign("sign"), securer.focusOn("otp_code"));

    String title = FrontAcessController.i18n(locale, "newmfa.title");
    String error = FrontAcessController.i18n(locale, "newmfa.error-format", msg);

    String help = FrontAcessController.i18n(locale, "newmfa.help");
    String code = FrontAcessController.i18n(locale, "newmfa.code");
    String send = FrontAcessController.i18n(locale, "newmfa.send");

    String backLabel = FrontAcessController.i18n(locale, "newmfa.back-label");
    String backText = FrontAcessController.i18n(locale, "newmfa.back-text",
        "<input class=\"inline\" type=\"submit\" value=\"" + backLabel + "\" />");

    return Response.ok(decorator.getFullPage("newMfa",
        js + "<h1>" + title + "</h1><p>" + help + "</p>"
            + (null == msg ? "" : "<p class=\"error\">" + error + "</p>") + "<form method=\"POST\">"
            + "<input type=\"hidden\" name=\"csid\" id=\"sign\" />"
            + (mfaConfigApi.requireImage(request, username)
                ? "<img style=\"width:50%;margin: 0px 25%;\" src=\"./mfa-setup\" />"
                : "")
            + "<label>" + code + "<input type=\"text\" name=\"otp_code\" id=\"otp_code\" value=\""
            + "\" />" + "<input type=\"hidden\" name=\"step\" value=\"valid_new_mfa\" />"
            + "</label>" + "<input class=\"primary-button action-button\" type=\"submit\" value=\""
            + send + "\" />" + "</form>" + "<form method=\"POST\">"
            + "<input type=\"hidden\" name=\"step\" value=\"start\" />" + "<p>" + backText
            + "</form>" + "",
        locale)).type(FrontAcessController.TEXT_HTML);
  }

  public Optional<Response> process(String step, Optional<String> oUser,
      ClientDetails clientDetails, AuthRequest request, MultivaluedMap<String, String> paramMap,
      Function<StepResult, Response> resolver) {
    if ("valid_new_mfa".equals(step) && oUser.isPresent()) {
      return Optional.of(doExecNewMfa(clientDetails, request, paramMap, oUser.get(), resolver));
    } else {
      return Optional.empty();
    }
  }

  private Response doExecNewMfa(ClientDetails clientDetails, AuthRequest request,
      MultivaluedMap<String, String> paramMap, String username,
      Function<StepResult, Response> resolver) {
    Response response;
    if (mfaConfigApi.validateOtpConfig(request, username,
        FrontAcessController.first(paramMap, "otp_code"))) {
      response = resolver.apply(StepResult.builder().username(username).clientDetails(clientDetails)
          .request(request).build());
    } else {
      response = securer.secureHtmlResponse(doPaintNewMfaFormContent(request, username,
          request.getLocale(), "No se ha podido guardar"));
    }
    return response;
  }

}
