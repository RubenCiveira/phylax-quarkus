/* @autogenerated */
package net.civeira.phylax.features.oauth.delegated.domain.provider;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.Data;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedAccessExternalProvider;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedProviderDescription;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedRequestDetails;

@RequiredArgsConstructor
public class GoogleDelegatedAccessProvider implements DelegatedAccessExternalProvider {
  @Data
  public static class GoogleUserData {
    @JsonProperty("given_name")
    private String name;
    @JsonProperty("family_name")
    private String surname;
    @JsonProperty("email")
    private String email;
    @JsonProperty("verified_email")
    private boolean verified;
    @JsonProperty("picture")
    private String userPictureUrl;
  }

  @Data
  public static class GoogleAuth {
    @JsonProperty("access_token")
    private String accessToken;
  }

  @Data
  public static class GoogleCheck {
    @JsonProperty("client_id")
    private String clientId;
    @JsonProperty("client_secret")
    private String clientSecret;
    @JsonProperty("code")
    private String code;
    @JsonProperty("grant_type")
    private String grantType;
    @JsonProperty("redirect_uri")
    private String redirect;
  }

  private final String id;
  private final String googleClientId;
  private final String googleSecretId;
  private final boolean automatic;

  @Override
  public String getId(AuthRequest request) {
    return id;
  }

  @Override
  public DelegatedProviderDescription info(AuthRequest request) {
    DelegatedProviderDescription pd = new DelegatedProviderDescription();
    pd.setId(id);
    pd.setName("Google");
    pd.setAutomatic(automatic);
    pd.setLogo("/oauth/assets/socials/google.png");
    return pd;
  }

  @Override
  public RequestInfo request(AuthRequest request, DelegatedRequestDetails detail) {
    RequestInfo info = new RequestInfo();
    info.setTitle("Redirigiendo a google");
    info.setMessage("Vamos a ir a su login de google para autenticarlo");
    info.setTargetUrl("https://accounts.google.com/o/oauth2/v2/auth");
    info.setWithPost(false);
    info.setParams(new HashMap<>());
    // Cada proyecto podrá tener el suyo propio en alguna configuración específica.
    // En su defecto, uno por defecto de birdgit.
    info.getParams().put("response_type", "code");
    info.getParams().put("client_id", googleClientId);
    info.getParams().put("redirect_uri", detail.getExternalUrl());
    info.getParams().put("scope",
        "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email");
    return info;
  }

  @Override
  public ResponseInfo response(AuthRequest request, DelegatedRequestDetails detail,
      Map<String, String[]> params) {
    ResponseInfo response = new ResponseInfo();
    String code = params.get("code")[0];
    response.setTitle("Aceptado el token");
    response.setMessage("Su autenticación ha sido correcta, vamos a acceder");
    response.setInnerToken(code);
    return response;
  }

  @Override
  public UserData userInfo(AuthRequest request, DelegatedRequestDetails detail, String innerToken) {
    HttpClient client = HttpClient.newHttpClient();
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

    GoogleCheck check = new GoogleCheck();
    check.setClientId(googleClientId);
    check.setClientSecret(googleSecretId);
    check.setCode(innerToken);
    check.setGrantType("authorization_code");
    check.setRedirect(detail.getExternalUrl());
    try {
      String requestBody = objectMapper.writeValueAsString(check);

      // Create HTTP request for token exchange
      HttpRequest tokenRequest =
          HttpRequest.newBuilder().uri(URI.create("https://oauth2.googleapis.com/token"))
              .header("Content-Type", "application/json").POST(BodyPublishers.ofString(requestBody))
              .build();

      // Send request and get response
      HttpResponse<String> tokenResponse = client.send(tokenRequest, BodyHandlers.ofString());

      // Deserialize response to GoogleAuth
      GoogleAuth auth = objectMapper.readValue(tokenResponse.body(), GoogleAuth.class);
      if (auth != null && auth.getAccessToken() != null) {
        // Create HTTP request for user info
        HttpRequest userInfoRequest = HttpRequest.newBuilder()
            .uri(URI.create("https://www.googleapis.com/oauth2/v1/userinfo?alt=json"))
            .header("Authorization", "Bearer " + auth.getAccessToken()).GET().build();

        // Send request and get response
        HttpResponse<String> userInfoResponse =
            client.send(userInfoRequest, BodyHandlers.ofString());

        // Deserialize response to GoogleUserData
        GoogleUserData gd = objectMapper.readValue(userInfoResponse.body(), GoogleUserData.class);
        String name = (gd.getName() + gd.getSurname()).replaceAll(" ", "");
        return UserData.builder().code(name).name(name).email(name + "@gmail.com").build();
      } else {
        throw new IllegalArgumentException("No google code");
      }
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IllegalArgumentException("Interrumption with google invocation", e);
    } catch (IOException e) {
      throw new IllegalArgumentException("Fail with google invocation", e);
    }
  }
}
