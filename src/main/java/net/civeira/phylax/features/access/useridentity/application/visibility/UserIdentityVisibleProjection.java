package net.civeira.phylax.features.access.useridentity.application.visibility;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyRef;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientRef;
import net.civeira.phylax.features.access.user.domain.UserRef;
import net.civeira.phylax.features.access.useridentity.domain.Roles;
import net.civeira.phylax.features.access.useridentity.domain.UserIdentity;
import net.civeira.phylax.features.access.useridentity.domain.UserIdentityReference;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.RolesVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.UserVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold user identity attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserIdentityVisibleProjection {

  /**
   * El relying party de user identity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<RelyingPartyVO> relyingParty = Optional.empty();

  /**
   * El roles de user identity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<RolesVO> roles = Optional.empty();

  /**
   * El trusted client de user identity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TrustedClientVO> trustedClient = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * El user de user identity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UserVO> user = Optional.empty();

  /**
   * Campo con el n√∫mero de version de user identity para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public UserIdentityVisibleProjection(final UserIdentity entity) {
    uid = Optional.of(entity.getUidValue());
    user = Optional.of(entity.getUserValue());
    relyingParty = Optional.of(entity.getRelyingPartyValue());
    trustedClient = Optional.of(entity.getTrustedClientValue());
    roles = Optional.of(entity.getRolesValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for user identity with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public UserIdentityReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(UserIdentityReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in RelyingParty
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for RelyingParty, otherwise the value for
   *         RelyingParty
   */
  public Optional<RelyingPartyVO> getRelyingParty() {
    return relyingParty;
  }

  /**
   * Inform for a possible change propolsal in Roles
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Roles, otherwise the value for Roles
   */
  public Optional<RolesVO> getRoles() {
    return roles;
  }

  /**
   * Inform for a possible change propolsal in TrustedClient
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for TrustedClient, otherwise the value for
   *         TrustedClient
   */
  public Optional<TrustedClientVO> getTrustedClient() {
    return trustedClient;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in User
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for User, otherwise the value for User
   */
  public Optional<UserVO> getUser() {
    return user;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for RelyingParty to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserIdentityVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserIdentityVisibleProjection setRelyingParty(final RelyingPartyRef value) {
    this.relyingParty = Optional.of(RelyingPartyVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Roles to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserIdentityVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserIdentityVisibleProjection setRoles(final List<Roles> value) {
    this.roles = Optional.of(RolesVO.from(null == value ? List.of() : value));
    return this;
  }

  /**
   * Assigna change proposal for TrustedClient to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserIdentityVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserIdentityVisibleProjection setTrustedClient(final TrustedClientRef value) {
    this.trustedClient = Optional.of(TrustedClientVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserIdentityVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserIdentityVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for User to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserIdentityVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserIdentityVisibleProjection setUser(final UserRef value) {
    this.user = Optional.of(UserVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserIdentityVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserIdentityVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("user".equals(field)) {
      this.unsetUser();
    }
    if ("relyingParty".equals(field)) {
      this.unsetRelyingParty();
    }
    if ("trustedClient".equals(field)) {
      this.unsetTrustedClient();
    }
    if ("roles".equals(field)) {
      this.unsetRoles();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for RelyingParty
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserIdentityVisibleProjection unsetRelyingParty() {
    this.relyingParty = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Roles
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserIdentityVisibleProjection unsetRoles() {
    this.roles = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for TrustedClient
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserIdentityVisibleProjection unsetTrustedClient() {
    this.trustedClient = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserIdentityVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for User
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserIdentityVisibleProjection unsetUser() {
    this.user = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserIdentityVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
