package net.civeira.phylax.features.access.trustedclient.application.projection;

import java.util.Optional;

import net.civeira.phylax.features.access.trustedclient.TrustedClient;

public class TrustedClientStateProyection {

  /**
   * Si permitimos login directo de la app, obligamos a indicar un secreto.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> allowedRedirects = Optional.empty();

  /**
   * El código identificativo de la aplicación
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> code = Optional.empty();

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> enabled = Optional.empty();

  /**
   * If true, users can use these client to access with public code flow
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> publicAllow = Optional.empty();

  /**
   * If the user is not delegated, the phrasse to identify
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> secretOauth = Optional.empty();

  /**
   * El identificador de la aplicacion
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * Campo con el número de version de trusted client para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public TrustedClientStateProyection(final TrustedClient entity) {
    uid = Optional.of(entity.getUid().getValue());
    code = Optional.of(entity.getCode().getValue());
    publicAllow = Optional.of(entity.getPublicAllow().getValue());
    secretOauth = Optional.of("******");
    allowedRedirects = entity.getAllowedRedirects().getValue();
    enabled = entity.getEnabled().getValue();
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getAllowedRedirects() {
    return allowedRedirects;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getCode() {
    return code;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getEnabled() {
    return enabled;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getPublicAllow() {
    return publicAllow;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getSecretOauth() {
    return secretOauth;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TrustedClientStateProyection setAllowedRedirects(final Optional<String> value) {
    this.allowedRedirects = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TrustedClientStateProyection setCode(final Optional<String> value) {
    this.code = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TrustedClientStateProyection setEnabled(final Optional<Boolean> value) {
    this.enabled = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TrustedClientStateProyection setPublicAllow(final Optional<Boolean> value) {
    this.publicAllow = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TrustedClientStateProyection setSecretOauth(final Optional<String> value) {
    this.secretOauth = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TrustedClientStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TrustedClientStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("code".equals(field)) {
      this.unsetCode();
    }
    if ("publicAllow".equals(field)) {
      this.unsetPublicAllow();
    }
    if ("secretOauth".equals(field)) {
      this.unsetSecretOauth();
    }
    if ("allowedRedirects".equals(field)) {
      this.unsetAllowedRedirects();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TrustedClientStateProyection unsetAllowedRedirects() {
    this.allowedRedirects = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TrustedClientStateProyection unsetCode() {
    this.code = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TrustedClientStateProyection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TrustedClientStateProyection unsetPublicAllow() {
    this.publicAllow = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TrustedClientStateProyection unsetSecretOauth() {
    this.secretOauth = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TrustedClientStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TrustedClientStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
