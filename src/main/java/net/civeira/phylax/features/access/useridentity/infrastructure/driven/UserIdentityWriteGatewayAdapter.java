package net.civeira.phylax.features.access.useridentity.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useridentity.UserIdentity;
import net.civeira.phylax.features.access.useridentity.UserIdentityRef;
import net.civeira.phylax.features.access.useridentity.gateway.UserIdentityWriteRepositoryGateway;
import net.civeira.phylax.features.access.useridentity.infrastructure.event.UserIdentityEventDispacher;
import net.civeira.phylax.features.access.useridentity.infrastructure.repository.UserIdentityRepository;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityCursor;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class UserIdentityWriteGatewayAdapter implements UserIdentityWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final UserIdentityEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final UserIdentityRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(UserIdentityFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public UserIdentity create(UserIdentity entity) {
    UserIdentity result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public UserIdentity create(UserIdentity entity, Predicate<UserIdentity> verifier) {
    UserIdentity result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(UserIdentity entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public UserIdentity enrichForUpdate(UserIdentityRef reference) {
    return repository.enrichForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<UserIdentityFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<UserIdentity> findForUpdate(UserIdentityFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<UserIdentity> listForUpdate(UserIdentityFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<UserIdentity> retrieveForUpdate(String uid, Optional<UserIdentityFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<UserIdentity> slideForUpdate(UserIdentityFilter filter, UserIdentityCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public UserIdentity update(UserIdentityRef reference, UserIdentity entity) {
    UserIdentity result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
