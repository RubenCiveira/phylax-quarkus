package net.civeira.phylax.features.access.loginprovider.application.projection;

import java.util.Optional;

import net.civeira.phylax.features.access.loginprovider.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.LoginProviderSourceOptions;
import net.civeira.phylax.features.access.tenant.TenantRef;

public class LoginProviderStateProyection {

  /**
   * The provider certificate used for signature verification, if required.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> certificate = Optional.empty();

  /**
   * If true, the system will default to this login method without requiring selection.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> directAccess = Optional.empty();

  /**
   * Indicates if this provider is currently disabled.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> disabled = Optional.empty();

  /**
   * A metadata file required by some providers for configuration (e.g., SAML descriptor).
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> metadata = Optional.empty();

  /**
   * A name that identifies this login provider within the tenant.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> name = Optional.empty();

  /**
   * Private key used internally to validate codes returned by the identity provider.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> privateKey = Optional.empty();

  /**
   * A public key shared with users to interact with the identity provider.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> publicKey = Optional.empty();

  /**
   * The source protocol or system used for authentication (e.g., GOOGLE, GITHUB, SAML).
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<LoginProviderSourceOptions> source = Optional.empty();

  /**
   * The tenant this login provider is configured for.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<TenantRef> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * Defines whether the users created with this provider are enabled by default.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> usersEnabledByDefault = Optional.empty();

  /**
   * Campo con el n√∫mero de version de login provider para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public LoginProviderStateProyection(final LoginProvider entity) {
    uid = Optional.of(entity.getUid().getValue());
    tenant = Optional.of(entity.getTenant().getValue());
    name = Optional.of(entity.getName().getValue());
    source = Optional.of(entity.getSource().getValue());
    disabled = entity.getDisabled().getValue();
    directAccess = entity.getDirectAccess().getValue();
    publicKey = entity.getPublicKey().getValue();
    privateKey = entity.getPrivateKey().getValue();
    certificate = entity.getCertificate().getValue();
    metadata = entity.getMetadata().getValue();
    usersEnabledByDefault = Optional.of(entity.getUsersEnabledByDefault().getValue());
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getCertificate() {
    return certificate;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getDirectAccess() {
    return directAccess;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getDisabled() {
    return disabled;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getMetadata() {
    return metadata;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getName() {
    return name;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getPrivateKey() {
    return privateKey;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getPublicKey() {
    return publicKey;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<LoginProviderSourceOptions> getSource() {
    return source;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<TenantRef> getTenant() {
    return tenant;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getUsersEnabledByDefault() {
    return usersEnabledByDefault;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setCertificate(final Optional<String> value) {
    this.certificate = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setDirectAccess(final Optional<Boolean> value) {
    this.directAccess = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setDisabled(final Optional<Boolean> value) {
    this.disabled = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setMetadata(final Optional<String> value) {
    this.metadata = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setName(final Optional<String> value) {
    this.name = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setPrivateKey(final Optional<String> value) {
    this.privateKey = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setPublicKey(final Optional<String> value) {
    this.publicKey = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setSource(final Optional<LoginProviderSourceOptions> value) {
    this.source = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setTenant(final Optional<TenantRef> value) {
    this.tenant = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setUsersEnabledByDefault(final Optional<Boolean> value) {
    this.usersEnabledByDefault = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public LoginProviderStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("source".equals(field)) {
      this.unsetSource();
    }
    if ("disabled".equals(field)) {
      this.unsetDisabled();
    }
    if ("directAccess".equals(field)) {
      this.unsetDirectAccess();
    }
    if ("publicKey".equals(field)) {
      this.unsetPublicKey();
    }
    if ("privateKey".equals(field)) {
      this.unsetPrivateKey();
    }
    if ("certificate".equals(field)) {
      this.unsetCertificate();
    }
    if ("metadata".equals(field)) {
      this.unsetMetadata();
    }
    if ("usersEnabledByDefault".equals(field)) {
      this.unsetUsersEnabledByDefault();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetCertificate() {
    this.certificate = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetDirectAccess() {
    this.directAccess = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetDisabled() {
    this.disabled = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetMetadata() {
    this.metadata = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetPrivateKey() {
    this.privateKey = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetPublicKey() {
    this.publicKey = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetSource() {
    this.source = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetUsersEnabledByDefault() {
    this.usersEnabledByDefault = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public LoginProviderStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
