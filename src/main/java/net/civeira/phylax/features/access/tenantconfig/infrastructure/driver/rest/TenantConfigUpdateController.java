package net.civeira.phylax.features.access.tenantconfig.infrastructure.driver.rest;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.update.TenantConfigUpdateInput;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.update.TenantConfigUpdateProjection;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.update.TenantConfigUpdateUsecase;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfigReference;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;
import net.civeira.phylax.generated.openapi.model.TenantConfigApiDto;

@RequiredArgsConstructor
public class TenantConfigUpdateController {

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final TenantConfigUpdateUsecase update;

  /**
   * @autogenerated UpdateControllerGenerator
   * @param uid
   * @param tenantConfig
   * @return
   */
  @Transactional
  public Response tenantConfigApiUpdate(final String uid, final TenantConfigApiDto tenantConfig) {
    TenantConfigUpdateProjection updated = update.update(currentRequest.interaction(),
        TenantConfigReference.of(uid), toDomainModel(tenantConfig));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param dto
   * @return
   */
  private TenantConfigApiDto toApiModel(TenantConfigUpdateProjection dto) {
    TenantConfigApiDto tenantConfigApiDto = new TenantConfigApiDto();
    tenantConfigApiDto.setUid(dto.getUid());
    tenantConfigApiDto.setTenant(new TenantApiRef().$ref(dto.getTenantReference()));
    tenantConfigApiDto.setInnerLabel(dto.getInnerLabel());
    tenantConfigApiDto.setForceMfa(dto.getForceMfa());
    tenantConfigApiDto.setVersion(dto.getVersion());
    return tenantConfigApiDto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param tenantConfigApiDto
   * @return
   */
  private TenantConfigUpdateInput toDomainModel(TenantConfigApiDto tenantConfigApiDto) {
    TenantConfigUpdateInput dto = new TenantConfigUpdateInput();
    if (null != tenantConfigApiDto.getUid()) {
      dto.setUid(tenantConfigApiDto.getUid());
    }
    if (null != tenantConfigApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(tenantConfigApiDto.getTenant().get$Ref()));
    }
    if (null != tenantConfigApiDto.getInnerLabel()) {
      dto.setInnerLabel(tenantConfigApiDto.getInnerLabel());
    }
    if (null != tenantConfigApiDto.getForceMfa()) {
      dto.setForceMfa(tenantConfigApiDto.getForceMfa());
    }
    if (null != tenantConfigApiDto.getVersion()) {
      dto.setVersion(tenantConfigApiDto.getVersion());
    }
    return dto;
  }
}
