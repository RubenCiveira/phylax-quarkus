package net.civeira.phylax.features.access.relyingparty;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.relyingparty.command.RelyingPartyChangeProposal;
import net.civeira.phylax.features.access.relyingparty.command.RelyingPartyWriteAttributes;
import net.civeira.phylax.features.access.relyingparty.event.RelyingPartyCreateEvent;
import net.civeira.phylax.features.access.relyingparty.event.RelyingPartyDeleteEvent;
import net.civeira.phylax.features.access.relyingparty.event.RelyingPartyDisableEvent;
import net.civeira.phylax.features.access.relyingparty.event.RelyingPartyEnableEvent;
import net.civeira.phylax.features.access.relyingparty.event.RelyingPartyEvent;
import net.civeira.phylax.features.access.relyingparty.event.RelyingPartyUpdateEvent;
import net.civeira.phylax.features.access.relyingparty.valueobject.ApiKeyVO;
import net.civeira.phylax.features.access.relyingparty.valueobject.CodeVO;
import net.civeira.phylax.features.access.relyingparty.valueobject.EnabledVO;
import net.civeira.phylax.features.access.relyingparty.valueobject.UidVO;
import net.civeira.phylax.features.access.relyingparty.valueobject.VersionVO;

@AllArgsConstructor
@Getter
@ToString
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class RelyingParty implements RelyingPartyRef {

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public static RelyingParty create(final RelyingPartyWriteAttributes attributes) {
    RelyingPartyChangeProposal proposal = new RelyingPartyChangeProposal(attributes);
    proposal.setEnabled(false);
    RelyingParty instance = new RelyingParty(proposal, Optional.empty());
    instance.addEvent(RelyingPartyCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public static Set<String> readonlyFields() {
    return Set.of("enabled");
  }

  /**
   * A identification for the aplication
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private ApiKeyVO apiKey;

  /**
   * El código identificativo de la aplicación
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private CodeVO code;

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private EnabledVO enabled = EnabledVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private List<RelyingPartyEvent> recordedEvents = List.of();

  /**
   * El identificador de la aplicacion
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UidVO uid;

  /**
   * Campo con el número de version de relying party para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VersionVO version = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private RelyingParty(final RelyingPartyWriteAttributes attribute,
      final Optional<RelyingParty> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uid = attribute.getUid().orElse(previous.map(RelyingParty::getUid).orElse(null));
    this.code = attribute.getCode().orElse(previous.map(RelyingParty::getCode).orElse(null));
    this.apiKey = attribute.getApiKey().orElse(previous.map(RelyingParty::getApiKey).orElse(null));
    this.enabled = attribute.getEnabled()
        .orElse(previous.map(RelyingParty::getEnabled).orElseGet(EnabledVO::nullValue));
    this.version = attribute.getVersion()
        .orElse(previous.map(RelyingParty::getVersion).orElseGet(VersionVO::nullValue));
    if (null == uid) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == code) {
      list.add(new ConstraintFail("REQUIRED", "code", null));
    }
    if (null == apiKey) {
      list.add(new ConstraintFail("REQUIRED", "apiKey", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(RelyingParty::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public RelyingParty delete() {
    RelyingParty instance = this;
    instance.addEvent(RelyingPartyDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public RelyingParty disable() {
    RelyingPartyChangeProposal attr = new RelyingPartyChangeProposal(this);
    attr.setEnabled(false);
    RelyingParty instance = new RelyingParty(attr, Optional.of(this));
    instance.addEvent(RelyingPartyDisableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public RelyingParty enable() {
    RelyingPartyChangeProposal attr = new RelyingPartyChangeProposal(this);
    attr.setEnabled(true);
    RelyingParty instance = new RelyingParty(attr, Optional.of(this));
    instance.addEvent(RelyingPartyEnableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getApiKeyValue() {
    return getApiKey().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getCodeValue() {
    return getCode().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  @Override
  public String getUidValue() {
    return this.uid.getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public boolean isEnabled() {
    return Boolean.TRUE.equals(getEnabled().getValue().orElse(Boolean.FALSE));
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public RelyingParty nextVersion() {
    return RelyingParty.builder().uid(this.uid).code(this.code).apiKey(this.apiKey)
        .enabled(this.enabled).version(VersionVO.from(this.version() + 1)).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public RelyingParty update(final RelyingPartyWriteAttributes attributes) {
    RelyingPartyChangeProposal proposal = new RelyingPartyChangeProposal(attributes);
    proposal.unsetEnabled();
    RelyingParty instance = new RelyingParty(proposal, Optional.of(this));
    instance.addEvent(RelyingPartyUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer version() {
    return this.getVersion().getValue().orElse(0);
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final RelyingPartyEvent event) {
    List<RelyingPartyEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
