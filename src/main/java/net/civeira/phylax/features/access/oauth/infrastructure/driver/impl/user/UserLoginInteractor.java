/* @autogenerated */
package net.civeira.phylax.features.access.oauth.infrastructure.driver.impl.user;

import java.util.List;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.oauth.application.usecase.UserLoginUsecase;
import net.civeira.phylax.features.oauth.authentication.application.spi.UserLoginSpi;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationChallege;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthenticationResult;
import net.civeira.phylax.features.oauth.client.domain.model.ClientDetails;

@Transactional
@ApplicationScoped
@RequiredArgsConstructor
public class UserLoginInteractor implements UserLoginSpi {
  private final UserLoginUsecase login;

  @Override
  public AuthenticationResult validatePreAuthenticated(AuthRequest request, String username,
      ClientDetails appkey, List<AuthenticationChallege> challenges) {
    return login.validatePreAuthenticated(request, username, appkey, challenges);
  }

  @Override
  public AuthenticationResult validateUserData(AuthRequest request, String username,
      String password, ClientDetails appkey, List<AuthenticationChallege> challenges) {
    return login.validateUserData(request, username, password, appkey, challenges);
  }

  @Override
  public AuthenticationResult validateMfa(AuthRequest request, String username, String secreto,
      ClientDetails client, List<AuthenticationChallege> challenges) {
    return login.validateMfa(request, username, secreto, client, challenges);
  }
}
