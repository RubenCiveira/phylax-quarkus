package net.civeira.phylax.features.access.scopeassignation;

import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.scopeassignation.command.ScopeAssignationWriteAttributes;
import net.civeira.phylax.features.access.scopeassignation.transition.create.ScopeAssignationCreatePipeline;
import net.civeira.phylax.features.access.scopeassignation.transition.delete.ScopeAssignationDeletePipeline;
import net.civeira.phylax.features.access.scopeassignation.transition.update.ScopeAssignationUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class ScopeAssignationFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final ScopeAssignationCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final ScopeAssignationDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<ScopeAssignationMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final ScopeAssignationUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public ScopeAssignation create(final ScopeAssignationWriteAttributes attributes) {
    return ScopeAssignation.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public ScopeAssignation delete(final ScopeAssignation entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public ScopeAssignation update(final ScopeAssignation base,
      final ScopeAssignationWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
