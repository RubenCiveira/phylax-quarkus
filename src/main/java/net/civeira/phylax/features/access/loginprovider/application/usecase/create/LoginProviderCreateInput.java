package net.civeira.phylax.features.access.loginprovider.application.usecase.create;

import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderChangeSet;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderSourceOptions;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.CertificateVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.DirectAccessVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.DisabledVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.MetadataVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.PrivateKeyVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.PublicKeyVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.SourceVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.UsersEnabledByDefaultVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;

/**
 * A dto transfer to hold login provider attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class LoginProviderCreateInput {

  /**
   * @autogenerated CreateInputGenerator
   */
  public static class LoginProviderCreateInputBuilder {

    /**
     * Append Certificate crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param certificate The Certificate value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder certificate(final String certificate) {
      return certificate(Optional.of(CertificateVO.from(certificate)));
    }

    /**
     * Append Certificate value
     *
     * @autogenerated CreateInputGenerator
     * @param certificate The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder certificate(final Optional<CertificateVO> certificate) {
      this.certificate$value = certificate;
      this.certificate$set = true;
      return this;
    }

    /**
     * Append DirectAccess crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param directAccess The DirectAccess value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder directAccess(final Boolean directAccess) {
      return directAccess(Optional.of(DirectAccessVO.from(directAccess)));
    }

    /**
     * Append DirectAccess value
     *
     * @autogenerated CreateInputGenerator
     * @param directAccess The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder directAccess(
        final Optional<DirectAccessVO> directAccess) {
      this.directAccess$value = directAccess;
      this.directAccess$set = true;
      return this;
    }

    /**
     * Append Disabled crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param disabled The Disabled value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder disabled(final Boolean disabled) {
      return disabled(Optional.of(DisabledVO.from(disabled)));
    }

    /**
     * Append Disabled value
     *
     * @autogenerated CreateInputGenerator
     * @param disabled The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder disabled(final Optional<DisabledVO> disabled) {
      this.disabled$value = disabled;
      this.disabled$set = true;
      return this;
    }

    /**
     * Append Metadata crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param metadata The Metadata value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder metadata(final String metadata) {
      return metadata(Optional.of(MetadataVO.from(metadata)));
    }

    /**
     * Append Metadata value
     *
     * @autogenerated CreateInputGenerator
     * @param metadata The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder metadata(final Optional<MetadataVO> metadata) {
      this.metadata$value = metadata;
      this.metadata$set = true;
      return this;
    }

    /**
     * Append Name crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param name The Name value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder name(final String name) {
      return name(Optional.of(NameVO.from(name)));
    }

    /**
     * Append Name value
     *
     * @autogenerated CreateInputGenerator
     * @param name The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder name(final Optional<NameVO> name) {
      this.name$value = name;
      this.name$set = true;
      return this;
    }

    /**
     * @autogenerated CreateInputGenerator
     * @return
     */
    public LoginProviderCreateInputBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * Append PrivateKey crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param privateKey The PrivateKey value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder privateKey(final String privateKey) {
      return privateKey(Optional.of(PrivateKeyVO.from(privateKey)));
    }

    /**
     * Append PrivateKey value
     *
     * @autogenerated CreateInputGenerator
     * @param privateKey The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder privateKey(final Optional<PrivateKeyVO> privateKey) {
      this.privateKey$value = privateKey;
      this.privateKey$set = true;
      return this;
    }

    /**
     * Append PublicKey crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param publicKey The PublicKey value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder publicKey(final String publicKey) {
      return publicKey(Optional.of(PublicKeyVO.from(publicKey)));
    }

    /**
     * Append PublicKey value
     *
     * @autogenerated CreateInputGenerator
     * @param publicKey The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder publicKey(final Optional<PublicKeyVO> publicKey) {
      this.publicKey$value = publicKey;
      this.publicKey$set = true;
      return this;
    }

    /**
     * Append Source crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param source The Source value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder source(final LoginProviderSourceOptions source) {
      return source(Optional.of(SourceVO.from(source)));
    }

    /**
     * Append Source value
     *
     * @autogenerated CreateInputGenerator
     * @param source The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder source(final Optional<SourceVO> source) {
      this.source$value = source;
      this.source$set = true;
      return this;
    }

    /**
     * Append Tenant crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param tenant The Tenant value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder tenant(final TenantRef tenant) {
      return tenant(Optional.of(TenantVO.from(tenant)));
    }

    /**
     * Append Tenant value
     *
     * @autogenerated CreateInputGenerator
     * @param tenant The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder tenant(final Optional<TenantVO> tenant) {
      this.tenant$value = tenant;
      this.tenant$set = true;
      return this;
    }

    /**
     * Append Uid crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param uid The Uid value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * Append Uid value
     *
     * @autogenerated CreateInputGenerator
     * @param uid The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * Append UsersEnabledByDefault crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param usersEnabledByDefault The UsersEnabledByDefault value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder usersEnabledByDefault(
        final Boolean usersEnabledByDefault) {
      return usersEnabledByDefault(
          Optional.of(UsersEnabledByDefaultVO.from(usersEnabledByDefault)));
    }

    /**
     * Append UsersEnabledByDefault value
     *
     * @autogenerated CreateInputGenerator
     * @param usersEnabledByDefault The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder usersEnabledByDefault(
        final Optional<UsersEnabledByDefaultVO> usersEnabledByDefault) {
      this.usersEnabledByDefault$value = usersEnabledByDefault;
      this.usersEnabledByDefault$set = true;
      return this;
    }

    /**
     * Append Version crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param version The Version value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * Append Version value
     *
     * @autogenerated CreateInputGenerator
     * @param version The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public LoginProviderCreateInputBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * @autogenerated CreateInputGenerator
   * @param input
   * @return
   */
  static LoginProviderCreateInput fromChangeSet(final LoginProviderChangeSet input) {
    return LoginProviderCreateInput.builder().uid(input.getUid()).tenant(input.getTenant())
        .name(input.getName()).source(input.getSource()).disabled(input.getDisabled())
        .directAccess(input.getDirectAccess()).publicKey(input.getPublicKey())
        .privateKey(input.getPrivateKey()).certificate(input.getCertificate())
        .metadata(input.getMetadata()).usersEnabledByDefault(input.getUsersEnabledByDefault())
        .version(input.getVersion()).build();
  }

  /**
   * The provider certificate used for signature verification, if required.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<CertificateVO> certificate = Optional.empty();

  /**
   * If true, the system will default to this login method without requiring selection.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<DirectAccessVO> directAccess = Optional.empty();

  /**
   * Indicates if this provider is currently disabled.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<DisabledVO> disabled = Optional.empty();

  /**
   * A metadata file required by some providers for configuration (e.g., SAML descriptor).
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<MetadataVO> metadata = Optional.empty();

  /**
   * A name that identifies this login provider within the tenant.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * Private key used internally to validate codes returned by the identity provider.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<PrivateKeyVO> privateKey = Optional.empty();

  /**
   * A public key shared with users to interact with the identity provider.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<PublicKeyVO> publicKey = Optional.empty();

  /**
   * The source protocol or system used for authentication (e.g., GOOGLE, GITHUB, SAML).
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<SourceVO> source = Optional.empty();

  /**
   * The tenant this login provider is configured for.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Defines whether the users created with this provider are enabled by default.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<UsersEnabledByDefaultVO> usersEnabledByDefault = Optional.empty();

  /**
   * Campo con el número de version de login provider para controlar bloqueos optimistas
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Inform for a possible change propolsal in Certificate
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Certificate, otherwise the value for
   *         Certificate
   */
  public Optional<CertificateVO> getCertificate() {
    return certificate;
  }

  /**
   * Inform for a possible change propolsal in DirectAccess
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for DirectAccess, otherwise the value for
   *         DirectAccess
   */
  public Optional<DirectAccessVO> getDirectAccess() {
    return directAccess;
  }

  /**
   * Inform for a possible change propolsal in Disabled
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Disabled, otherwise the value for Disabled
   */
  public Optional<DisabledVO> getDisabled() {
    return disabled;
  }

  /**
   * Inform for a possible change propolsal in Metadata
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Metadata, otherwise the value for Metadata
   */
  public Optional<MetadataVO> getMetadata() {
    return metadata;
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * Inform for a possible change propolsal in PrivateKey
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for PrivateKey, otherwise the value for PrivateKey
   */
  public Optional<PrivateKeyVO> getPrivateKey() {
    return privateKey;
  }

  /**
   * Inform for a possible change propolsal in PublicKey
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for PublicKey, otherwise the value for PublicKey
   */
  public Optional<PublicKeyVO> getPublicKey() {
    return publicKey;
  }

  /**
   * Inform for a possible change propolsal in Source
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Source, otherwise the value for Source
   */
  public Optional<SourceVO> getSource() {
    return source;
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in UsersEnabledByDefault
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for UsersEnabledByDefault, otherwise the value for
   *         UsersEnabledByDefault
   */
  public Optional<UsersEnabledByDefaultVO> getUsersEnabledByDefault() {
    return usersEnabledByDefault;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for Certificate to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setCertificate(final String value) {
    this.certificate = Optional.of(CertificateVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for DirectAccess to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setDirectAccess(final Boolean value) {
    this.directAccess = Optional.of(DirectAccessVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Disabled to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setDisabled(final Boolean value) {
    this.disabled = Optional.of(DisabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Metadata to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setMetadata(final String value) {
    this.metadata = Optional.of(MetadataVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Name to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for PrivateKey to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setPrivateKey(final String value) {
    this.privateKey = Optional.of(PrivateKeyVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for PublicKey to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setPublicKey(final String value) {
    this.publicKey = Optional.of(PublicKeyVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Source to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setSource(final LoginProviderSourceOptions value) {
    this.source = Optional.of(SourceVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Tenant to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for UsersEnabledByDefault to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setUsersEnabledByDefault(final Boolean value) {
    this.usersEnabledByDefault = Optional.of(UsersEnabledByDefaultVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for LoginProviderCreateInput
   * @return self instance to enable a flow code
   */
  public LoginProviderCreateInput setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated CreateInputGenerator
   * @return
   */
  LoginProviderChangeSet toChangeSet() {
    return LoginProviderChangeSet.builder().uid(uid).tenant(tenant).name(name).source(source)
        .disabled(disabled).directAccess(directAccess).publicKey(publicKey).privateKey(privateKey)
        .certificate(certificate).metadata(metadata).usersEnabledByDefault(usersEnabledByDefault)
        .version(version).build();
  }
}
