package net.civeira.phylax.features.access.tenant.application.usecase.update;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantsVisibility;
import net.civeira.phylax.features.access.tenant.domain.Tenant;
import net.civeira.phylax.features.access.tenant.domain.TenantChangeSet;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCacheGateway;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantUpdateUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final TenantCacheGateway cache;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final TenantWriteRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<TenantUpdateAllowDecision> updateAllowEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<TenantUpdateCheck> updateCheckEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<TenantUpdateEnrich> updateEnrichEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final TenantsVisibility visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final TenantRef reference) {
    TenantUpdateAllowDecision base = TenantUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TenantUpdateAllowDecision base = TenantUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @param input
   * @return The slide with some values
   */
  public TenantUpdateProjection update(final Interaction query, final TenantRef reference,
      final TenantUpdateInput input) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    Tenant original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    TenantUpdateInput filled =
        TenantUpdateInput.fromChangeSet(visibility.copyWithFixed(query, input.toChangeSet()));
    TenantUpdateCheck check =
        TenantUpdateCheck.builder().input(filled).interaction(query).reference(reference).build();
    updateCheckEmitter.fire(check);
    TenantUpdateEnrich proposal =
        TenantUpdateEnrich.builder().input(filled).interaction(query).reference(reference).build();
    updateEnrichEmitter.fire(proposal);
    TenantChangeSet dto = proposal.getInput().toChangeSet();
    Tenant saved = gateway.update(original, original.update(dto));
    cache.update(saved);
    return TenantUpdateProjection.from(visibility.copyWithHidden(query, saved));
  }
}
