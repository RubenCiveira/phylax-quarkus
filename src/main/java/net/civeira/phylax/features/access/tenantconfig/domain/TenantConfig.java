package net.civeira.phylax.features.access.tenantconfig.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.tenantconfig.domain.event.TenantConfigCreateEvent;
import net.civeira.phylax.features.access.tenantconfig.domain.event.TenantConfigDeleteEvent;
import net.civeira.phylax.features.access.tenantconfig.domain.event.TenantConfigEvent;
import net.civeira.phylax.features.access.tenantconfig.domain.event.TenantConfigUpdateEvent;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.ForceMfaVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.InnerLabelVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.VersionVO;

/**
 * Holds configuration options specific to a tenant. This includes visual customization and login
 * security settings like MFA enforcement.
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class TenantConfig implements TenantConfigRef {

  /**
   * Prepare a new tenant config with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new tenant config
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed tenant config.
   */
  public static TenantConfig create(final TenantConfigChangeSet change) throws ConstraintException {
    TenantConfig instance = new TenantConfig(change, Optional.empty());
    instance.addEvent(TenantConfigCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Indicates if Multi-Factor Authentication (MFA) is enforced for the tenant.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private ForceMfaVO forceMfaValue;

  /**
   * A customizable label that tenants can use to personalize the application UI.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private InnerLabelVO innerLabelValue = InnerLabelVO.nullValue();

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<TenantConfigEvent> recordedEvents = List.of();

  /**
   * The tenant this configuration applies to.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private TenantVO tenantValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Campo con el n√∫mero de version de tenant config para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private TenantConfig(final TenantConfigChangeSet attribute,
      final Optional<TenantConfig> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue = attribute.getUid().orElse(previous.map(TenantConfig::getUidValue).orElse(null));
    this.tenantValue =
        attribute.getTenant().orElse(previous.map(TenantConfig::getTenantValue).orElse(null));
    this.innerLabelValue = attribute.getInnerLabel()
        .orElse(previous.map(TenantConfig::getInnerLabelValue).orElseGet(InnerLabelVO::nullValue));
    this.forceMfaValue =
        attribute.getForceMfa().orElse(previous.map(TenantConfig::getForceMfaValue).orElse(null));
    this.versionValue = attribute.getVersion()
        .orElse(previous.map(TenantConfig::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == tenantValue) {
      list.add(new ConstraintFail("REQUIRED", "tenant", null));
    }
    if (null == forceMfaValue) {
      list.add(new ConstraintFail("REQUIRED", "forceMfa", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(TenantConfig::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a tenant config
   *
   * @autogenerated EntityGenerator
   * @return A instance of tenant config ready to be deleted
   */
  public TenantConfig delete() {
    TenantConfig instance = this;
    instance.addEvent(TenantConfigDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a tenant config
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of tenant config
   */
  public TenantConfig update(final TenantConfigChangeSet change) throws ConstraintException {
    TenantConfig instance = new TenantConfig(change, Optional.of(this));
    instance.addEvent(TenantConfigUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public TenantConfig withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final TenantConfigEvent event) {
    List<TenantConfigEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
