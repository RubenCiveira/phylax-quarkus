package net.civeira.phylax.features.access.useridentity.infrastructure.driver.rest;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.features.access.role.domain.RoleReference;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;
import net.civeira.phylax.features.access.user.domain.UserReference;
import net.civeira.phylax.features.access.useridentity.application.usecase.update.UserIdentityUpdateInput;
import net.civeira.phylax.features.access.useridentity.application.usecase.update.UserIdentityUpdateProjection;
import net.civeira.phylax.features.access.useridentity.application.usecase.update.UserIdentityUpdateUsecase;
import net.civeira.phylax.features.access.useridentity.domain.Roles;
import net.civeira.phylax.features.access.useridentity.domain.Roles.RolesBuilder;
import net.civeira.phylax.features.access.useridentity.domain.UserIdentityReference;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.RoleApiRef;
import net.civeira.phylax.generated.openapi.model.RolesApiDto;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;
import net.civeira.phylax.generated.openapi.model.UserApiRef;
import net.civeira.phylax.generated.openapi.model.UserIdentityApiDto;

@RequiredArgsConstructor
public class UserIdentityUpdateController {

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final UserIdentityUpdateUsecase update;

  /**
   * @autogenerated UpdateControllerGenerator
   * @param uid
   * @param userIdentity
   * @return
   */
  @Transactional
  public Response userIdentityApiUpdate(final String uid, final UserIdentityApiDto userIdentity) {
    UserIdentityUpdateProjection updated = update.update(currentRequest.interaction(),
        UserIdentityReference.of(uid), toDomainModel(userIdentity));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param dto
   * @return
   */
  private UserIdentityApiDto toApiModel(UserIdentityUpdateProjection dto) {
    UserIdentityApiDto userIdentityApiDto = new UserIdentityApiDto();
    userIdentityApiDto.setUid(dto.getUid());
    userIdentityApiDto.setUser(new UserApiRef().$ref(dto.getUserReference()));
    userIdentityApiDto
        .setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyReference()));
    userIdentityApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientReference()));
    userIdentityApiDto.setRoles(dto.getRoles().stream().map(this::toApiModelRoles).toList());
    userIdentityApiDto.setVersion(dto.getVersion());
    return userIdentityApiDto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param dto
   * @return
   */
  private RolesApiDto toApiModelRoles(Roles dto) {
    RolesApiDto rolesApiDto = new RolesApiDto();
    rolesApiDto.setUid(dto.getUid());
    rolesApiDto.setRole(new RoleApiRef().$ref(dto.getRoleUid()));
    rolesApiDto.setVersion(dto.getVersion().orElse(null));
    return rolesApiDto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param userIdentityApiDto
   * @return
   */
  private UserIdentityUpdateInput toDomainModel(UserIdentityApiDto userIdentityApiDto) {
    UserIdentityUpdateInput dto = new UserIdentityUpdateInput();
    if (null != userIdentityApiDto.getUid()) {
      dto.setUid(userIdentityApiDto.getUid());
    }
    if (null != userIdentityApiDto.getUser()) {
      dto.setUser(UserReference.of(userIdentityApiDto.getUser().get$Ref()));
    }
    if (null != userIdentityApiDto.getRelyingParty()) {
      dto.setRelyingParty(RelyingPartyReference.of(userIdentityApiDto.getRelyingParty().get$Ref()));
    }
    if (null != userIdentityApiDto.getTrustedClient()) {
      dto.setTrustedClient(
          TrustedClientReference.of(userIdentityApiDto.getTrustedClient().get$Ref()));
    }
    if (null != userIdentityApiDto.getRoles()) {
      dto.setRoles(userIdentityApiDto.getRoles().stream().map(this::toDomainModelRoles).toList());
    }
    if (null != userIdentityApiDto.getVersion()) {
      dto.setVersion(userIdentityApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param rolesApiDto
   * @return
   */
  private Roles toDomainModelRoles(RolesApiDto rolesApiDto) {
    RolesBuilder builder = Roles.builder();
    if (null != rolesApiDto.getUid()) {
      builder = builder.uid(rolesApiDto.getUid());
    }
    if (null != rolesApiDto.getRole()) {
      builder = builder.role(RoleReference.of(rolesApiDto.getRole().get$Ref()));
    }
    if (null != rolesApiDto.getVersion()) {
      builder = builder.version(rolesApiDto.getVersion());
    }
    return builder.build();
  }
}
