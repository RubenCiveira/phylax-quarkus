package net.civeira.phylax.features.access.securitydomain.transition.enable;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.securitydomain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.transition.SecurityDomainChangeProposal;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainEnablePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<SecurityDomainEnableStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param original
   * @param last
   * @return
   */
  public SecurityDomain enable(final SecurityDomain original,
      final Function<SecurityDomainChangeProposal, SecurityDomain> last) {
    Function<SecurityDomainEnableTransition, SecurityDomain> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.apply(t.getData());
    };
    List<SecurityDomainEnableStep> reversed = new ArrayList<>(steps.stream().toList()).reversed();
    Function<SecurityDomainEnableTransition, SecurityDomain> pipeline = reversed.stream().reduce(
        finalHandler, (next, step) -> transition -> step.enable(transition, next), (f1, f2) -> f1);
    return pipeline.apply(SecurityDomainEnableTransition.builder()
        .data(new SecurityDomainChangeProposal(original)).original(original).build());
  }
}
