package net.civeira.phylax.features.access.tenantconfig.infrastructure.bootstrap;

import java.util.List;

import io.quarkus.runtime.StartupEvent;
import jakarta.annotation.Priority;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Rbac;
import net.civeira.phylax.common.security.scope.FieldDescription;
import net.civeira.phylax.common.security.scope.Kind;
import net.civeira.phylax.common.security.scope.ResourceDescription;
import net.civeira.phylax.common.security.scope.ScopeDescription;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantConfigRbacRegister {

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private static final ResourceDescription RESOURCE = ResourceDescription.builder()
      .name("tenant-config")
      .description(
          "Holds configuration options specific to a tenant. This includes visual customization and login security settings like MFA enforcement.")
      .build();

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private final Rbac rbac;

  /**
   * @autogenerated RegisterGeneratorGenerator
   * @param ev
   */
  void registerResource(@Observes @Priority(10) final StartupEvent ev) {
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.READ).name("list")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve").description("list").build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("create")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("update")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("delete")
        .description("list").required(List.of()).build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("uid")
        .description("A uid string to identify the entity").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("tenant")
        .description("The tenant this configuration applies to.").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("innerLabel")
            .description(
                "A customizable label that tenants can use to personalize the application UI.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("forceMfa")
            .description(
                "Indicates if Multi-Factor Authentication (MFA) is enforced for the tenant.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("version").description(
            "Campo con el n√∫mero de version de tenant config para controlar bloqueos optimistas")
            .build());
  }
}
