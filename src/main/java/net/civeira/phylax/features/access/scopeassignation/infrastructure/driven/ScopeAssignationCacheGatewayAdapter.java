package net.civeira.phylax.features.access.scopeassignation.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.domain.gateway.ScopeAssignationCacheGateway;
import net.civeira.phylax.features.access.scopeassignation.domain.gateway.ScopeAssignationCached;
import net.civeira.phylax.features.access.scopeassignation.domain.gateway.ScopeAssignationCursor;
import net.civeira.phylax.features.access.scopeassignation.domain.gateway.ScopeAssignationFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class ScopeAssignationCacheGatewayAdapter implements ScopeAssignationCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("scope-assignation")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param scopeAssignation
   */
  @Override
  public void remove(final ScopeAssignation scopeAssignation) {
    log.trace("Invalidating scopeAssignation cache due to the removal of {}", scopeAssignation);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<ScopeAssignationCached> retrieve(final ScopeAssignationFilter filter,
      final ScopeAssignationCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at scopeAssignation cache for the key {}", key);
    return cache.<String, ScopeAssignationCached>get(key, k -> null)
        .map(cached -> Optional.ofNullable(cached)).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param scopeAssignations
   * @return
   */
  public ScopeAssignationCached store(final ScopeAssignationFilter filter,
      final ScopeAssignationCursor cursor, final List<ScopeAssignation> scopeAssignations) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache.<String, ScopeAssignationCached>get(key, k -> ScopeAssignationCached.builder()
        .since(OffsetDateTime.now()).value(scopeAssignations).build()).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param scopeAssignation
   */
  @Override
  public void update(final ScopeAssignation scopeAssignation) {
    log.trace("Invalidating scopeAssignation cache due to the update of {}", scopeAssignation);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final ScopeAssignationFilter filter, final ScopeAssignationCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
