package net.civeira.phylax.features.access.tenantconfig.application.usecase.create;

import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfigChangeSet;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.ForceMfaVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.InnerLabelVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold tenant config attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TenantConfigCreateInput {

  /**
   * @autogenerated CreateInputGenerator
   */
  public static class TenantConfigCreateInputBuilder {

    /**
     * Append ForceMfa crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param forceMfa The ForceMfa value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder forceMfa(final Boolean forceMfa) {
      return forceMfa(Optional.of(ForceMfaVO.from(forceMfa)));
    }

    /**
     * Append ForceMfa value
     *
     * @autogenerated CreateInputGenerator
     * @param forceMfa The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder forceMfa(final Optional<ForceMfaVO> forceMfa) {
      this.forceMfa$value = forceMfa;
      this.forceMfa$set = true;
      return this;
    }

    /**
     * Append InnerLabel crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param innerLabel The InnerLabel value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder innerLabel(final String innerLabel) {
      return innerLabel(Optional.of(InnerLabelVO.from(innerLabel)));
    }

    /**
     * Append InnerLabel value
     *
     * @autogenerated CreateInputGenerator
     * @param innerLabel The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder innerLabel(final Optional<InnerLabelVO> innerLabel) {
      this.innerLabel$value = innerLabel;
      this.innerLabel$set = true;
      return this;
    }

    /**
     * @autogenerated CreateInputGenerator
     * @return
     */
    public TenantConfigCreateInputBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * Append Tenant crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param tenant The Tenant value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder tenant(final TenantRef tenant) {
      return tenant(Optional.of(TenantVO.from(tenant)));
    }

    /**
     * Append Tenant value
     *
     * @autogenerated CreateInputGenerator
     * @param tenant The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder tenant(final Optional<TenantVO> tenant) {
      this.tenant$value = tenant;
      this.tenant$set = true;
      return this;
    }

    /**
     * Append Uid crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param uid The Uid value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * Append Uid value
     *
     * @autogenerated CreateInputGenerator
     * @param uid The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * Append Version crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param version The Version value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * Append Version value
     *
     * @autogenerated CreateInputGenerator
     * @param version The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantConfigCreateInputBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * @autogenerated CreateInputGenerator
   * @param input
   * @return
   */
  static TenantConfigCreateInput fromChangeSet(final TenantConfigChangeSet input) {
    return TenantConfigCreateInput.builder().uid(input.getUid()).tenant(input.getTenant())
        .innerLabel(input.getInnerLabel()).forceMfa(input.getForceMfa()).version(input.getVersion())
        .build();
  }

  /**
   * Indicates if Multi-Factor Authentication (MFA) is enforced for the tenant.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<ForceMfaVO> forceMfa = Optional.empty();

  /**
   * A customizable label that tenants can use to personalize the application UI.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<InnerLabelVO> innerLabel = Optional.empty();

  /**
   * The tenant this configuration applies to.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant config para controlar bloqueos optimistas
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Inform for a possible change propolsal in ForceMfa
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for ForceMfa, otherwise the value for ForceMfa
   */
  public Optional<ForceMfaVO> getForceMfa() {
    return forceMfa;
  }

  /**
   * Inform for a possible change propolsal in InnerLabel
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for InnerLabel, otherwise the value for InnerLabel
   */
  public Optional<InnerLabelVO> getInnerLabel() {
    return innerLabel;
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for ForceMfa to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TenantConfigCreateInput
   * @return self instance to enable a flow code
   */
  public TenantConfigCreateInput setForceMfa(final Boolean value) {
    this.forceMfa = Optional.of(ForceMfaVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for InnerLabel to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TenantConfigCreateInput
   * @return self instance to enable a flow code
   */
  public TenantConfigCreateInput setInnerLabel(final String value) {
    this.innerLabel = Optional.of(InnerLabelVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Tenant to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TenantConfigCreateInput
   * @return self instance to enable a flow code
   */
  public TenantConfigCreateInput setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TenantConfigCreateInput
   * @return self instance to enable a flow code
   */
  public TenantConfigCreateInput setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TenantConfigCreateInput
   * @return self instance to enable a flow code
   */
  public TenantConfigCreateInput setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated CreateInputGenerator
   * @return
   */
  TenantConfigChangeSet toChangeSet() {
    return TenantConfigChangeSet.builder().uid(uid).tenant(tenant).innerLabel(innerLabel)
        .forceMfa(forceMfa).version(version).build();
  }
}
