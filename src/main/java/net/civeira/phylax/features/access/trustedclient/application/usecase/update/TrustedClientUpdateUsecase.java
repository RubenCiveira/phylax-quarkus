package net.civeira.phylax.features.access.trustedclient.application.usecase.update;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.trustedclient.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.TrustedClientFacade;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.application.projection.TrustedClientStateProyection;
import net.civeira.phylax.features.access.trustedclient.application.request.TrustedClientStateChange;
import net.civeira.phylax.features.access.trustedclient.application.service.visibility.TrustedClientsVisibility;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientCacheGateway;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TrustedClientUpdateUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final TrustedClientCacheGateway cache;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final TrustedClientFacade facade;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final TrustedClientWriteRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<TrustedClientAllowUpdateProposal> updateAllowEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<TrustedClientUpdateProposal> updateProposalEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<TrustedClientUpdateEvent> updatedEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final TrustedClientsVisibility visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final TrustedClientRef reference) {
    TrustedClientAllowUpdateProposal base = TrustedClientAllowUpdateProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TrustedClientAllowUpdateProposal base = TrustedClientAllowUpdateProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @param input
   * @return The slide with some values
   */
  public TrustedClientStateProyection update(final Interaction query,
      final TrustedClientRef reference, final TrustedClientStateChange input) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TrustedClient original = visibility.retrieveVisibleForUpdate(query, reference.getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    TrustedClientStateChange filled = visibility.copyWithFixed(query, input);
    TrustedClientUpdateProposal proposal = TrustedClientUpdateProposal.builder().dto(filled)
        .interaction(query).reference(reference).build();
    updateProposalEmitter.fire(proposal);
    TrustedClientStateChange dto = proposal.getDto();;
    TrustedClient saved = gateway.update(original, facade.update(original, dto));
    cache.update(saved);
    TrustedClientUpdateEvent event =
        TrustedClientUpdateEvent.builder().payload(saved).interaction(query).build();
    updatedEmitter.fire(event);
    return visibility.copyWithHidden(query, event.getPayload());
  }
}
