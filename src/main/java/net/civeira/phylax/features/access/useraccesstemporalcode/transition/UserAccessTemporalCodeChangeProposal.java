package net.civeira.phylax.features.access.useraccesstemporalcode.transition;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.user.UserRef;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCode;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCodeReference;
import net.civeira.phylax.features.access.useraccesstemporalcode.command.UserAccessTemporalCodeWriteAttributes;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.FailedLoginAttemptsVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.RecoveryCodeExpirationVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.RecoveryCodeVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.TempSecondFactorSeedExpirationVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.TempSecondFactorSeedVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.UidVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.UserVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.VersionVO;

@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserAccessTemporalCodeChangeProposal implements UserAccessTemporalCodeWriteAttributes {

  /**
   * @autogenerated EntityChangeProposalGenerator
   */
  public static class UserAccessTemporalCodeChangeProposalBuilder {

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param failedLoginAttempts
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder failedLoginAttempts(
        final Integer failedLoginAttempts) {
      return failedLoginAttempts(Optional.of(FailedLoginAttemptsVO.from(failedLoginAttempts)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param failedLoginAttempts
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder failedLoginAttempts(
        final Optional<FailedLoginAttemptsVO> failedLoginAttempts) {
      this.failedLoginAttempts$value = failedLoginAttempts;
      this.failedLoginAttempts$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param recoveryCode
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder recoveryCode(final String recoveryCode) {
      return recoveryCode(Optional.of(RecoveryCodeVO.from(recoveryCode)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param recoveryCode
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder recoveryCode(
        final Optional<RecoveryCodeVO> recoveryCode) {
      this.recoveryCode$value = recoveryCode;
      this.recoveryCode$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param recoveryCodeExpiration
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder recoveryCodeExpiration(
        final OffsetDateTime recoveryCodeExpiration) {
      return recoveryCodeExpiration(
          Optional.of(RecoveryCodeExpirationVO.from(recoveryCodeExpiration)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param recoveryCodeExpiration
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder recoveryCodeExpiration(
        final Optional<RecoveryCodeExpirationVO> recoveryCodeExpiration) {
      this.recoveryCodeExpiration$value = recoveryCodeExpiration;
      this.recoveryCodeExpiration$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param tempSecondFactorSeed
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder tempSecondFactorSeed(
        final String tempSecondFactorSeed) {
      return tempSecondFactorSeed(
          Optional.of(TempSecondFactorSeedVO.fromPlain(tempSecondFactorSeed)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param tempSecondFactorSeed
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder tempSecondFactorSeed(
        final Optional<TempSecondFactorSeedVO> tempSecondFactorSeed) {
      this.tempSecondFactorSeed$value = tempSecondFactorSeed;
      this.tempSecondFactorSeed$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param tempSecondFactorSeedExpiration
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder tempSecondFactorSeedExpiration(
        final OffsetDateTime tempSecondFactorSeedExpiration) {
      return tempSecondFactorSeedExpiration(
          Optional.of(TempSecondFactorSeedExpirationVO.from(tempSecondFactorSeedExpiration)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param tempSecondFactorSeedExpiration
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder tempSecondFactorSeedExpiration(
        final Optional<TempSecondFactorSeedExpirationVO> tempSecondFactorSeedExpiration) {
      this.tempSecondFactorSeedExpiration$value = tempSecondFactorSeedExpiration;
      this.tempSecondFactorSeedExpiration$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param uid
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param uid
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param user
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder user(final UserRef user) {
      return user(Optional.of(UserVO.from(user)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param user
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder user(final Optional<UserVO> user) {
      this.user$value = user;
      this.user$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param version
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param version
     * @return
     */
    public UserAccessTemporalCodeChangeProposalBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * The amount login attempts failed since the last right login.
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<FailedLoginAttemptsVO> failedLoginAttempts = Optional.empty();

  /**
   * El codigo de recuperacion enviado por email
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<RecoveryCodeVO> recoveryCode = Optional.empty();

  /**
   * La caducidad del código de recuperacion
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<RecoveryCodeExpirationVO> recoveryCodeExpiration = Optional.empty();

  /**
   * the seed used to the otp login
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<TempSecondFactorSeedVO> tempSecondFactorSeed = Optional.empty();

  /**
   * La caducidad del código de recuperacion
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<TempSecondFactorSeedExpirationVO> tempSecondFactorSeedExpiration =
      Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * El usuario para el que se tienen estos datos
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<UserVO> user = Optional.empty();

  /**
   * Campo con el número de version de user access temporal code para controlar bloqueos optimistas
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param attributes
   */
  public UserAccessTemporalCodeChangeProposal(
      final UserAccessTemporalCodeWriteAttributes attributes) {
    uid = attributes.getUid();
    user = attributes.getUser();
    tempSecondFactorSeed = attributes.getTempSecondFactorSeed();
    tempSecondFactorSeedExpiration = attributes.getTempSecondFactorSeedExpiration();
    failedLoginAttempts = attributes.getFailedLoginAttempts();
    recoveryCode = attributes.getRecoveryCode();
    recoveryCodeExpiration = attributes.getRecoveryCodeExpiration();
    version = attributes.getVersion();
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param entity
   */
  public UserAccessTemporalCodeChangeProposal(final UserAccessTemporalCode entity) {
    uid = Optional.of(entity.getUid());
    user = Optional.of(entity.getUser());
    tempSecondFactorSeed = Optional.of(entity.getTempSecondFactorSeed());
    tempSecondFactorSeedExpiration = Optional.of(entity.getTempSecondFactorSeedExpiration());
    failedLoginAttempts = Optional.of(entity.getFailedLoginAttempts());
    recoveryCode = Optional.of(entity.getRecoveryCode());
    recoveryCodeExpiration = Optional.of(entity.getRecoveryCodeExpiration());
    version = Optional.of(entity.getVersion());
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeReference asReference() {
    return uid.map(UidVO::getValue).map(UserAccessTemporalCodeReference::of).orElseThrow();
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<FailedLoginAttemptsVO> getFailedLoginAttempts() {
    return failedLoginAttempts;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<RecoveryCodeVO> getRecoveryCode() {
    return recoveryCode;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<RecoveryCodeExpirationVO> getRecoveryCodeExpiration() {
    return recoveryCodeExpiration;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<TempSecondFactorSeedVO> getTempSecondFactorSeed() {
    return tempSecondFactorSeed;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<TempSecondFactorSeedExpirationVO> getTempSecondFactorSeedExpiration() {
    return tempSecondFactorSeedExpiration;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<UserVO> getUser() {
    return user;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAccessTemporalCodeChangeProposal setFailedLoginAttempts(final Integer value) {
    this.failedLoginAttempts = Optional.of(FailedLoginAttemptsVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAccessTemporalCodeChangeProposal setRecoveryCode(final String value) {
    this.recoveryCode = Optional.of(RecoveryCodeVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAccessTemporalCodeChangeProposal setRecoveryCodeExpiration(
      final OffsetDateTime value) {
    this.recoveryCodeExpiration = Optional.of(RecoveryCodeExpirationVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAccessTemporalCodeChangeProposal setTempSecondFactorSeed(final String value) {
    this.tempSecondFactorSeed = Optional.of(TempSecondFactorSeedVO.fromPlain(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAccessTemporalCodeChangeProposal setTempSecondFactorSeedExpiration(
      final OffsetDateTime value) {
    this.tempSecondFactorSeedExpiration = Optional.of(TempSecondFactorSeedExpirationVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAccessTemporalCodeChangeProposal setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAccessTemporalCodeChangeProposal setUser(final UserRef value) {
    this.user = Optional.of(UserVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAccessTemporalCodeChangeProposal setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("user".equals(field)) {
      this.unsetUser();
    }
    if ("tempSecondFactorSeed".equals(field)) {
      this.unsetTempSecondFactorSeed();
    }
    if ("tempSecondFactorSeedExpiration".equals(field)) {
      this.unsetTempSecondFactorSeedExpiration();
    }
    if ("failedLoginAttempts".equals(field)) {
      this.unsetFailedLoginAttempts();
    }
    if ("recoveryCode".equals(field)) {
      this.unsetRecoveryCode();
    }
    if ("recoveryCodeExpiration".equals(field)) {
      this.unsetRecoveryCodeExpiration();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeChangeProposal unsetFailedLoginAttempts() {
    this.failedLoginAttempts = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeChangeProposal unsetRecoveryCode() {
    this.recoveryCode = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeChangeProposal unsetRecoveryCodeExpiration() {
    this.recoveryCodeExpiration = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeChangeProposal unsetTempSecondFactorSeed() {
    this.tempSecondFactorSeed = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeChangeProposal unsetTempSecondFactorSeedExpiration() {
    this.tempSecondFactorSeedExpiration = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeChangeProposal unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeChangeProposal unsetUser() {
    this.user = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAccessTemporalCodeChangeProposal unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
