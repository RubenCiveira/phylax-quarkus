package net.civeira.phylax.features.access.tenantconfig;

import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.tenantconfig.command.TenantConfigWriteAttributes;
import net.civeira.phylax.features.access.tenantconfig.transition.create.TenantConfigCreatePipeline;
import net.civeira.phylax.features.access.tenantconfig.transition.delete.TenantConfigDeletePipeline;
import net.civeira.phylax.features.access.tenantconfig.transition.update.TenantConfigUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantConfigFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TenantConfigCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TenantConfigDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<TenantConfigMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TenantConfigUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public TenantConfig create(final TenantConfigWriteAttributes attributes) {
    return TenantConfig.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public TenantConfig delete(final TenantConfig entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public TenantConfig update(final TenantConfig base,
      final TenantConfigWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
