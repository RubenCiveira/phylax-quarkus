package net.civeira.phylax.features.access.role.domain.valueobject;

import lombok.EqualsAndHashCode;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainRef;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;

/**
 * Value Object representing el security domain de role domain of roleDomain.
 * <p>
 * This class ensures that the security domain is a non-null {@code String} and encapsulates its
 * validation and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design)
 * principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@RequiredArgsConstructor
@EqualsAndHashCode
public class SecurityDomainVO {

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param securityDomain
   * @return An empty instance
   */
  public static SecurityDomainVO from(final SecurityDomainRef securityDomain) {
    return tryFrom(securityDomain);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param securityDomainUid
   * @return An empty instance
   */
  public static SecurityDomainVO fromReference(final String securityDomainUid) {
    return from(SecurityDomainReference.of(securityDomainUid));
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param securityDomain
   * @return An empty instance
   */
  public static SecurityDomainVO tryFrom(final Object securityDomain) {
    ConstraintFailList list = new ConstraintFailList();
    SecurityDomainVO result = tryFrom(securityDomain, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param securityDomain temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> SecurityDomainVO tryFrom(final Object securityDomain,
      final T fails) {
    if (null == securityDomain) {
      fails.add(new ConstraintFail("not-null", "securityDomain", null, "Cant be null"));
      return null;
    } else if (securityDomain instanceof SecurityDomainRef castedSecurityDomain) {
      return new SecurityDomainVO(castedSecurityDomain);
    } else {
      fails.add(new ConstraintFail("wrong-type", "securityDomain", securityDomain.getClass(),
          "A SecurityDomainRef type is expected for securityDomain"));
      return null;
    }
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param securityDomainUid
   * @return An empty instance
   */
  public static SecurityDomainVO tryFromReference(final String securityDomainUid) {
    return tryFrom(SecurityDomainReference.of(securityDomainUid));
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param securityDomainUid
   * @param fails Error list
   * @return An empty instance
   */
  public static SecurityDomainVO tryFromReference(final String securityDomainUid,
      final ConstraintFailList fails) {
    return tryFrom(SecurityDomainReference.of(securityDomainUid), fails);
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final SecurityDomainRef value;

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public SecurityDomainRef getSecurityDomain() {
    return value;
  }

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public String getSecurityDomainUid() {
    return value.getUid();
  }

  /**
   * Returns a formatted string representation of the name.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
