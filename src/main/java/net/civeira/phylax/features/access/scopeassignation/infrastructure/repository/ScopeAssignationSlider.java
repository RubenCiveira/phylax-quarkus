package net.civeira.phylax.features.access.scopeassignation.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.domain.gateway.ScopeAssignationCursor;
import net.civeira.phylax.features.access.scopeassignation.domain.gateway.ScopeAssignationFilter;

class ScopeAssignationSlider extends Slider<ScopeAssignation> {

  /**
   * @autogenerated SlideGenerator
   */
  private final ScopeAssignationCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final ScopeAssignationFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<ScopeAssignationFilter, ScopeAssignationCursor, Iterator<ScopeAssignation>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  ScopeAssignationSlider(final Iterator<ScopeAssignation> multi, final int limit,
      final BiFunction<ScopeAssignationFilter, ScopeAssignationCursor, Iterator<ScopeAssignation>> gateway,
      final ScopeAssignationFilter filter, final ScopeAssignationCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param scopeAssignations
   * @param limit
   * @return
   */
  @Override
  public Iterator<ScopeAssignation> next(List<ScopeAssignation> scopeAssignations, int limit) {
    ScopeAssignation last = scopeAssignations.get(scopeAssignations.size() - 1);
    ScopeAssignationCursor cr = this.cursor.withSinceUid(last.getUid()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
