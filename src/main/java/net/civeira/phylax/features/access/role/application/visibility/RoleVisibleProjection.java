package net.civeira.phylax.features.access.role.application.visibility;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.role.domain.Domains;
import net.civeira.phylax.features.access.role.domain.Role;
import net.civeira.phylax.features.access.role.domain.RoleReference;
import net.civeira.phylax.features.access.role.domain.valueobject.DomainsVO;
import net.civeira.phylax.features.access.role.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.role.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.role.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.role.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;

/**
 * A dto transfer to hold role attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RoleVisibleProjection {

  /**
   * El domains de role
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<DomainsVO> domains = Optional.empty();

  /**
   * The user name to identify on the login screen
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * Domains without a tenant could be used only for admins
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de role para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public RoleVisibleProjection(final Role entity) {
    uid = Optional.of(entity.getUidValue());
    name = Optional.of(entity.getNameValue());
    tenant = Optional.of(entity.getTenantValue());
    domains = Optional.of(entity.getDomainsValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for role with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public RoleReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(RoleReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in Domains
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Domains, otherwise the value for Domains
   */
  public Optional<DomainsVO> getDomains() {
    return domains;
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for Domains to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RoleVisibleProjection
   * @return self instance to enable a flow code
   */
  public RoleVisibleProjection setDomains(final List<Domains> value) {
    this.domains = Optional.of(DomainsVO.from(null == value ? List.of() : value));
    return this;
  }

  /**
   * Assigna change proposal for Name to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RoleVisibleProjection
   * @return self instance to enable a flow code
   */
  public RoleVisibleProjection setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Tenant to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RoleVisibleProjection
   * @return self instance to enable a flow code
   */
  public RoleVisibleProjection setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RoleVisibleProjection
   * @return self instance to enable a flow code
   */
  public RoleVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RoleVisibleProjection
   * @return self instance to enable a flow code
   */
  public RoleVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("domains".equals(field)) {
      this.unsetDomains();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for Domains
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RoleVisibleProjection unsetDomains() {
    this.domains = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RoleVisibleProjection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RoleVisibleProjection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RoleVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RoleVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
