package net.civeira.phylax.features.access.useraccesstemporalcode.rule;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCode;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCodeMetadataProvider;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.UserAccessTemporalCodeChangeProposal;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.create.UserAccessTemporalCodeCreateStep;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.create.UserAccessTemporalCodeCreateTransition;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.update.UserAccessTemporalCodeUpdateStep;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.update.UserAccessTemporalCodeUpdateTransition;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.FailedLoginAttemptsVO;

@ApplicationScoped
@RequiredArgsConstructor
public class PreserveFailedLoginAttempts implements UserAccessTemporalCodeMetadataProvider,
    UserAccessTemporalCodeCreateStep, UserAccessTemporalCodeUpdateStep {

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveFailedLoginAttempts
   * @return
   */
  @Override
  public UserAccessTemporalCode create(final UserAccessTemporalCodeCreateTransition transition,
      final Function<UserAccessTemporalCodeCreateTransition, UserAccessTemporalCode> next) {
    return next.apply(transition.map(calculate(transition.getData(), Optional.empty())));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @return
   */
  @Override
  public Set<String> readonlyFields() {
    return Set.of("failedLoginAttempts");
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveFailedLoginAttempts
   * @return
   */
  @Override
  public UserAccessTemporalCode update(final UserAccessTemporalCodeUpdateTransition transition,
      final Function<UserAccessTemporalCodeUpdateTransition, UserAccessTemporalCode> next) {
    return next.apply(
        transition.map(calculate(transition.getData(), Optional.of(transition.getOriginal()))));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param attributes
   * @param original
   * @return
   */
  private UserAccessTemporalCodeChangeProposal calculate(
      final UserAccessTemporalCodeChangeProposal attributes,
      final Optional<UserAccessTemporalCode> original) {
    return attributes
        .setFailedLoginAttempts(original.map(UserAccessTemporalCode::getFailedLoginAttempts)
            .flatMap(FailedLoginAttemptsVO::getValue).orElseGet(() -> 0));
  }
}
