package net.civeira.phylax.features.access.role.application.projection;

import java.util.List;
import java.util.Optional;

import net.civeira.phylax.features.access.role.Domains;
import net.civeira.phylax.features.access.role.Role;
import net.civeira.phylax.features.access.tenant.TenantRef;

public class RoleStateProyection {

  /**
   * El domains de role
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<List<Domains>> domains = Optional.empty();

  /**
   * The user name to identify on the login screen
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> name = Optional.empty();

  /**
   * Domains without a tenant could be used only for admins
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<TenantRef> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de role para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public RoleStateProyection(final Role entity) {
    uid = Optional.of(entity.getUid().getValue());
    name = Optional.of(entity.getName().getValue());
    tenant = entity.getTenant().getValue();
    domains = Optional.of(entity.getDomains().getValue());
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<List<Domains>> getDomains() {
    return domains;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getName() {
    return name;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<TenantRef> getTenant() {
    return tenant;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public RoleStateProyection setDomains(final Optional<List<Domains>> value) {
    this.domains = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public RoleStateProyection setName(final Optional<String> value) {
    this.name = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public RoleStateProyection setTenant(final Optional<TenantRef> value) {
    this.tenant = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public RoleStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public RoleStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("domains".equals(field)) {
      this.unsetDomains();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public RoleStateProyection unsetDomains() {
    this.domains = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public RoleStateProyection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public RoleStateProyection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public RoleStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public RoleStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
