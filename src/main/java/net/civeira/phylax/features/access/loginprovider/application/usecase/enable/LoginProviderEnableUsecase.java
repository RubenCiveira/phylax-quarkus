package net.civeira.phylax.features.access.loginprovider.application.usecase.enable;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.loginprovider.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.LoginProviderFacade;
import net.civeira.phylax.features.access.loginprovider.LoginProviderRef;
import net.civeira.phylax.features.access.loginprovider.application.projection.LoginProviderStateProyection;
import net.civeira.phylax.features.access.loginprovider.application.service.visibility.LoginProvidersVisibility;
import net.civeira.phylax.features.access.loginprovider.gateway.LoginProviderCacheGateway;
import net.civeira.phylax.features.access.loginprovider.gateway.LoginProviderWriteRepositoryGateway;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProviderEnableUsecase {

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final LoginProviderCacheGateway cache;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final Event<LoginProviderAllowEnableProposal> execAllowEmitter;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final Event<LoginProviderEnableProposal> execProposalEmitter;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final Event<LoginProviderEnableEvent> executedEmitter;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final LoginProviderFacade facade;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final LoginProviderWriteRepositoryGateway gateway;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final LoginProvidersVisibility visibility;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final LoginProviderRef reference) {
    LoginProviderAllowEnableProposal base = LoginProviderAllowEnableProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    execAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    LoginProviderAllowEnableProposal base = LoginProviderAllowEnableProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    execAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final LoginProviderEnableStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query
   * @param reference
   * @return The slide with some values
   */
  public LoginProviderStateProyection enable(final Interaction query,
      final LoginProviderRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    LoginProvider original = visibility.retrieveVisibleForUpdate(query, reference.getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    LoginProvider saved = enable(query, original);
    flush();
    return visibility.copyWithHidden(query, saved);
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator enable(final Interaction query, final LoginProviderFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    LoginProviderEnableAllInBatchCommand command =
        LoginProviderEnableAllInBatchCommand.builder().interaction(query).filter(filter).build();
    return batch.start(command.getInteraction().getActor().getName().orElse("-"),
        Duration.ofHours(6),
        ExecutorPlan.<LoginProviderEnableAllInBatchCommand>builder().params(command)
            .name("enable-color")
            .executor(
                ExecutorByDeferSteps.<LoginProvider, LoginProvider, LoginProviderEnableAllInBatchCommand, LoginProviderEnablesInBatchExecutor.LoginProviderPaginableBatch>builder()
                    .initializer(LoginProviderEnablesInBatchExecutor.class)
                    .counter(LoginProviderEnablesInBatchExecutor.class)
                    .descriptor(LoginProviderEnablesInBatchExecutor.class)
                    .reader(LoginProviderEnablesInBatchExecutor.class)
                    .processor(LoginProviderEnablesInBatchExecutor.class)
                    .writer(LoginProviderEnablesInBatchExecutor.class)
                    .finalizer(LoginProviderEnablesInBatchExecutor.class).build())
            .build());
  }

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   * @param interaction
   * @param original
   * @return
   */
  LoginProvider enable(final Interaction interaction, final LoginProvider original) {
    LoginProvider filled = facade.enable(original);
    LoginProviderEnableProposal proposal =
        LoginProviderEnableProposal.builder().entity(filled).interaction(interaction).build();
    execProposalEmitter.fire(proposal);
    LoginProvider result = proposal.getEntity();
    LoginProvider saved = gateway.update(original, result);
    LoginProviderEnableEvent event =
        LoginProviderEnableEvent.builder().payload(saved).interaction(interaction).build();
    executedEmitter.fire(event);
    return event.getPayload();
  }

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
