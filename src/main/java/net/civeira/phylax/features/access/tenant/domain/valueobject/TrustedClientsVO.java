package net.civeira.phylax.features.access.tenant.domain.valueobject;

import java.util.List;

import lombok.EqualsAndHashCode;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients;

/**
 * Value Object representing a list of OAuth clients marked as trusted for this tenant. of tenant.
 * <p>
 * This class ensures that the trusted clients is a non-null {@code String} and encapsulates its
 * validation and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design)
 * principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@RequiredArgsConstructor
@EqualsAndHashCode
public class TrustedClientsVO {

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClients
   * @return An empty instance
   */
  public static TrustedClientsVO from(final List<TrustedClients> trustedClients) {
    return tryFrom(trustedClients);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClients
   * @return An empty instance
   */
  public static TrustedClientsVO tryFrom(final Object trustedClients) {
    ConstraintFailList list = new ConstraintFailList();
    TrustedClientsVO result = tryFrom(trustedClients, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClients temptative value
   * @param fails Error list
   * @return An empty instance
   */
  @SuppressWarnings("unchecked")
  public static <T extends AbstractFailList> TrustedClientsVO tryFrom(final Object trustedClients,
      final T fails) {
    if (null == trustedClients) {
      return new TrustedClientsVO(List.of());
    } else if (trustedClients instanceof List) {
      return new TrustedClientsVO((List<TrustedClients>) trustedClients);
    } else {
      fails.add(new ConstraintFail("wrong-type", "trustedClients", trustedClients.getClass(),
          "A List<TrustedClients> type is expected for trustedClients"));
      return null;
    }
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final List<TrustedClients> value;

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public List<TrustedClients> getTrustedClients() {
    return value;
  }

  /**
   * Returns a formatted string representation of the name.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
