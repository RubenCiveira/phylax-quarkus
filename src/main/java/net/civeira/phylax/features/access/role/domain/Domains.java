package net.civeira.phylax.features.access.role.domain;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.role.domain.valueobject.SecurityDomainVO;
import net.civeira.phylax.features.access.role.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.role.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainRef;

@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class Domains {

  /**
   * @autogenerated UnionGenerator
   */
  public static class DomainsBuilder {

    /**
     * @autogenerated UnionGenerator
     * @return
     */
    public DomainsBuilder newUid() {
      version(0);
      return uid(Uuid.comb().toString());
    }

    /**
     * @autogenerated UnionGenerator
     * @param securityDomain
     * @return
     */
    public DomainsBuilder securityDomain(final SecurityDomainRef securityDomain) {
      return securityDomain(SecurityDomainVO.from(securityDomain));
    }

    /**
     * @autogenerated UnionGenerator
     * @param securityDomain
     * @return
     */
    public DomainsBuilder securityDomain(final SecurityDomainVO securityDomain) {
      this.securityDomainValue = securityDomain;
      return this;
    }

    /**
     * @autogenerated UnionGenerator
     * @param securityDomain
     * @return
     */
    public DomainsBuilder securityDomain(final String securityDomain) {
      return securityDomain(SecurityDomainVO.fromReference(securityDomain));
    }

    /**
     * @autogenerated UnionGenerator
     * @param uid
     * @return
     */
    public DomainsBuilder uid(final String uid) {
      return uid(UidVO.from(uid));
    }

    /**
     * @autogenerated UnionGenerator
     * @param uid
     * @return
     */
    public DomainsBuilder uid(final UidVO uid) {
      this.uidValue = uid;
      return this;
    }

    /**
     * @autogenerated UnionGenerator
     * @param version
     * @return
     */
    public DomainsBuilder version(final Integer version) {
      return version(VersionVO.from(version));
    }

    /**
     * @autogenerated UnionGenerator
     * @param version
     * @return
     */
    public DomainsBuilder version(final VersionVO version) {
      this.versionValue$value = version;
      this.versionValue$set = true;
      return this;
    }
  }

  /**
   * El security domain de role domain
   *
   * @autogenerated UnionGenerator
   */
  @Delegate
  @NonNull
  private SecurityDomainVO securityDomainValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated UnionGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Campo con el n√∫mero de version de role domain para controlar bloqueos optimistas
   *
   * @autogenerated UnionGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * @autogenerated UnionGenerator
   * @return
   */
  public Domains withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }
}
