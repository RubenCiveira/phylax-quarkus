package net.civeira.phylax.features.access.user.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.user.domain.User;
import net.civeira.phylax.features.access.user.domain.gateway.UserCacheGateway;
import net.civeira.phylax.features.access.user.domain.gateway.UserCached;
import net.civeira.phylax.features.access.user.domain.gateway.UserCursor;
import net.civeira.phylax.features.access.user.domain.gateway.UserFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class UserCacheGatewayAdapter implements UserCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("user")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param user
   */
  @Override
  public void remove(final User user) {
    log.trace("Invalidating user cache due to the removal of {}", user);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<UserCached> retrieve(final UserFilter filter, final UserCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at user cache for the key {}", key);
    return cache.<String, UserCached>get(key, k -> null).map(cached -> Optional.ofNullable(cached))
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param users
   * @return
   */
  public UserCached store(final UserFilter filter, final UserCursor cursor,
      final List<User> users) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache
        .<String, UserCached>get(key,
            k -> UserCached.builder().since(OffsetDateTime.now()).value(users).build())
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param user
   */
  @Override
  public void update(final User user) {
    log.trace("Invalidating user cache due to the update of {}", user);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final UserFilter filter, final UserCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
