package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.driver.rest;

import java.util.ArrayList;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.attachedupload.TenantTermsOfUseAttachedTemporalUploadUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.create.TenantTermsOfUseCreateUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.delete.TenantTermsOfUseDeleteUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.list.TenantTermsOfUseListUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.retrieve.TenantTermsOfUseRetrieveUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.update.TenantTermsOfUseUpdateUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.visibility.TenantTermsOfUsesVisibility;
import net.civeira.phylax.generated.openapi.api.TenantTermsOfUseAclApi;
import net.civeira.phylax.generated.openapi.model.CommonAllow;
import net.civeira.phylax.generated.openapi.model.TenantTermsOfUseAclFields;
import net.civeira.phylax.generated.openapi.model.TenantTermsOfUseAclGenericAllows;
import net.civeira.phylax.generated.openapi.model.TenantTermsOfUseAclSpecificAllows;
import net.civeira.phylax.generated.openapi.model.TenantTermsOfUseGenericAcl;
import net.civeira.phylax.generated.openapi.model.TenantTermsOfUseSpecificAcl;

@RequiredArgsConstructor
public class TenantTermsOfUseAclController implements TenantTermsOfUseAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final TenantTermsOfUseCreateUsecase create;

  /**
   * TenantTermsOfUse
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final TenantTermsOfUseDeleteUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final TenantTermsOfUseListUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final TenantTermsOfUseRetrieveUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final TenantTermsOfUseUpdateUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final TenantTermsOfUseAttachedTemporalUploadUsecase uploadAttached;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final TenantTermsOfUsesVisibility visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiContextualAcl(final String uid) {
    Interaction interaction = currentRequest.interaction();
    TenantTermsOfUseSpecificAcl response = new TenantTermsOfUseSpecificAcl();
    response.setAllows(new TenantTermsOfUseAclSpecificAllows());
    response.setFields(new TenantTermsOfUseAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiGenericAcl() {
    Interaction interaction = currentRequest.interaction();
    TenantTermsOfUseGenericAcl response = new TenantTermsOfUseGenericAcl();
    response.setAllows(new TenantTermsOfUseAclGenericAllows());
    response.setFields(new TenantTermsOfUseAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    listAllows(response, interaction);
    createAllows(response, interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    uploadAttachedAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void createAllows(final TenantTermsOfUseGenericAcl response, final Interaction query) {
    Allow detail = create.allow(query);
    response.getAllows()
        .setCreate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final TenantTermsOfUseGenericAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final TenantTermsOfUseSpecificAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void fixedFields(final TenantTermsOfUseAclFields response, final Interaction query) {
    visibility.fieldsToFix(query).forEach(field -> response.getNoEditables().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void hiddenFields(final TenantTermsOfUseAclFields response, final Interaction query) {
    visibility.fieldsToHide(query).forEach(field -> response.getNoVisibles().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void listAllows(final TenantTermsOfUseGenericAcl response, final Interaction query) {
    Allow detail = list.allow(query);
    response.getAllows()
        .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final TenantTermsOfUseGenericAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final TenantTermsOfUseSpecificAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final TenantTermsOfUseGenericAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final TenantTermsOfUseSpecificAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void uploadAttachedAllows(final TenantTermsOfUseGenericAcl response,
      final Interaction query) {
    Allow detail = uploadAttached.allow(query);
    response.getAllows().setUploadAttached(
        new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }
}
