package net.civeira.phylax.features.access.user.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenant.TenantReference;
import net.civeira.phylax.features.access.user.UserReference;
import net.civeira.phylax.features.access.user.application.projection.UserStateProyection;
import net.civeira.phylax.features.access.user.application.request.UserStateChange;
import net.civeira.phylax.features.access.user.application.usecase.create.UserCreateUsecase;
import net.civeira.phylax.features.access.user.application.usecase.delete.UserCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.user.application.usecase.delete.UserDeleteUsecase;
import net.civeira.phylax.features.access.user.application.usecase.disable.UserDisableStatus;
import net.civeira.phylax.features.access.user.application.usecase.disable.UserDisableUsecase;
import net.civeira.phylax.features.access.user.application.usecase.enable.UserEnableStatus;
import net.civeira.phylax.features.access.user.application.usecase.enable.UserEnableUsecase;
import net.civeira.phylax.features.access.user.application.usecase.list.UserListUsecase;
import net.civeira.phylax.features.access.user.application.usecase.retrieve.UserRetrieveUsecase;
import net.civeira.phylax.features.access.user.application.usecase.unlock.UserUnlockStatus;
import net.civeira.phylax.features.access.user.application.usecase.unlock.UserUnlockUsecase;
import net.civeira.phylax.features.access.user.application.usecase.update.UserUpdateUsecase;
import net.civeira.phylax.features.access.user.query.UserCursor;
import net.civeira.phylax.features.access.user.query.UserFilter;
import net.civeira.phylax.features.access.user.query.UserOrder;
import net.civeira.phylax.generated.openapi.api.UserApi;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;
import net.civeira.phylax.generated.openapi.model.UserApiDto;
import net.civeira.phylax.generated.openapi.model.UserApiDtoList;

@RequiredArgsConstructor
public class UserController implements UserApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String NAME_A_P_P_E_N_D = "&name=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String ROOT_A_P_P_E_N_D = "&root=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String TENANTS_A_P_P_E_N_D = "&tenants=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserCreateUsecase create;

  /**
   * User
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserDisableUsecase disable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserEnableUsecase enable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserUnlockUsecase unlock;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param root
   * @param name
   * @param tenants
   * @return
   */
  @Override
  public Response userApiBatchDelete(final List<String> uids, final String search,
      final Boolean root, final String name, final List<String> tenants) {
    UserFilter.UserFilterBuilder filterBuilder = UserFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.root(root);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    UserFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response userApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(
        UserCheckBatchDeleteStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param root
   * @param name
   * @param tenants
   * @return
   */
  @Override
  public Response userApiBatchDisable(final List<String> uids, final String search,
      final Boolean root, final String name, final List<String> tenants) {
    UserFilter.UserFilterBuilder filterBuilder = UserFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.root(root);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    UserFilter filter = filterBuilder.build();
    BatchIdentificator task = disable.disable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response userApiBatchDisableQuery(final String batchId) {
    BatchProgress task = disable.checkProgress(
        UserDisableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param root
   * @param name
   * @param tenants
   * @return
   */
  @Override
  public Response userApiBatchEnable(final List<String> uids, final String search,
      final Boolean root, final String name, final List<String> tenants) {
    UserFilter.UserFilterBuilder filterBuilder = UserFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.root(root);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    UserFilter filter = filterBuilder.build();
    BatchIdentificator task = enable.enable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response userApiBatchEnableQuery(final String batchId) {
    BatchProgress task = enable.checkProgress(
        UserEnableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param root
   * @param name
   * @param tenants
   * @return
   */
  @Override
  public Response userApiBatchUnlock(final List<String> uids, final String search,
      final Boolean root, final String name, final List<String> tenants) {
    UserFilter.UserFilterBuilder filterBuilder = UserFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.root(root);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    UserFilter filter = filterBuilder.build();
    BatchIdentificator task = unlock.unlock(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response userApiBatchUnlockQuery(final String batchId) {
    BatchProgress task = unlock.checkProgress(
        UserUnlockStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param user
   * @return
   */
  @Override
  @Transactional
  public Response userApiCreate(UserApiDto user) {
    UserStateProyection created = create.create(currentRequest.interaction(), toDomainModel(user));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response userApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), UserReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response userApiDisable(final String uid) {
    UserStateProyection updated =
        disable.disable(currentRequest.interaction(), UserReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response userApiEnable(final String uid) {
    UserStateProyection updated =
        enable.enable(currentRequest.interaction(), UserReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param root
   * @param name
   * @param tenants
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  @Override
  public Response userApiList(final List<String> uids, final String search, final Boolean root,
      final String name, final List<String> tenants, final Integer limit, final String sinceUid,
      final String sinceName, final String order) {
    List<UserOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    UserFilter.UserFilterBuilder filterBuilder = UserFilter.builder();
    UserCursor.UserCursorBuilder cursorBuilder = UserCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.root(root);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    cursorBuilder = cursorBuilder.sinceName(sinceName);
    cursorBuilder = cursorBuilder.order(orderSteps);
    UserFilter filter = filterBuilder.build();
    UserCursor cursor = cursorBuilder.build();
    List<UserStateProyection> listed = list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "user-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response userApiRetrieve(final String uid) {
    UserStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), UserReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response userApiUnlock(final String uid) {
    UserStateProyection updated =
        unlock.unlock(currentRequest.interaction(), UserReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param user
   * @return
   */
  @Override
  @Transactional
  public Response userApiUpdate(final String uid, final UserApiDto user) {
    UserStateProyection updated =
        update.update(currentRequest.interaction(), UserReference.of(uid), toDomainModel(user));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param label
   * @return
   */
  private UserOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("name-asc")) {
      return UserOrder.NAME_ASC;
    } else if (label.trim().equals("name-desc")) {
      return UserOrder.NAME_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private UserApiDto toApiModel(UserStateProyection dto) {
    UserApiDto userApiDto = new UserApiDto();
    userApiDto.setUid(dto.getUid().orElse(null));
    userApiDto.setTenant(
        new TenantApiRef().$ref(dto.getTenant().map(TenantRef::getUidValue).orElse(null)));
    userApiDto.setName(dto.getName().orElse(null));
    userApiDto.setPassword("*****");
    userApiDto.setEmail(dto.getEmail().orElse(null));
    userApiDto.setEnabled(dto.getEnabled().orElse(null));
    userApiDto.setTemporalPassword(dto.getTemporalPassword().orElse(null));
    userApiDto.setUseSecondFactors(dto.getUseSecondFactors().orElse(null));
    userApiDto.setSecondFactorSeed("*****");
    userApiDto.setBlockedUntil(dto.getBlockedUntil().orElse(null));
    userApiDto.setLanguage(dto.getLanguage().orElse(null));
    userApiDto.setProvider(dto.getProvider().orElse(null));
    userApiDto.setVersion(dto.getVersion().orElse(null));
    return userApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param userApiDto
   * @return
   */
  private UserStateChange toDomainModel(UserApiDto userApiDto) {
    UserStateChange dto = new UserStateChange();
    if (null != userApiDto.getUid()) {
      dto.setUid(userApiDto.getUid());
    }
    if (null != userApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(userApiDto.getTenant().get$Ref()));
    }
    if (null != userApiDto.getName()) {
      dto.setName(userApiDto.getName());
    }
    if (null != userApiDto.getPassword() && !"*****".equals(userApiDto.getPassword())) {
      dto.setPassword(userApiDto.getPassword());
    }
    if (null != userApiDto.getEmail()) {
      dto.setEmail(userApiDto.getEmail());
    }
    if (null != userApiDto.getEnabled()) {
      dto.setEnabled(userApiDto.getEnabled());
    }
    if (null != userApiDto.getTemporalPassword()) {
      dto.setTemporalPassword(userApiDto.getTemporalPassword());
    }
    if (null != userApiDto.getUseSecondFactors()) {
      dto.setUseSecondFactors(userApiDto.getUseSecondFactors());
    }
    if (null != userApiDto.getSecondFactorSeed()
        && !"*****".equals(userApiDto.getSecondFactorSeed())) {
      dto.setSecondFactorSeed(userApiDto.getSecondFactorSeed());
    }
    if (null != userApiDto.getBlockedUntil()) {
      dto.setBlockedUntil(userApiDto.getBlockedUntil());
    }
    if (null != userApiDto.getLanguage()) {
      dto.setLanguage(userApiDto.getLanguage());
    }
    if (null != userApiDto.getProvider()) {
      dto.setProvider(userApiDto.getProvider());
    }
    if (null != userApiDto.getVersion()) {
      dto.setVersion(userApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param users
   * @param filter
   * @param cursor
   * @return
   */
  private UserApiDtoList toListApiModel(List<UserStateProyection> users, UserFilter filter,
      UserCursor cursor) {
    Optional<UserStateProyection> last =
        users.isEmpty() ? Optional.empty() : Optional.of(users.get(users.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getRoot().ifPresent(filterRoot -> {
      String rootValue = URLEncoder.encode(Boolean.TRUE.equals(filterRoot) ? "true" : "false",
          StandardCharsets.UTF_8);
      self.append(ROOT_A_P_P_E_N_D + rootValue);
      next.append(ROOT_A_P_P_E_N_D + rootValue);
      first.append(ROOT_A_P_P_E_N_D + rootValue);
    });
    filter.getName().ifPresent(filterName -> {
      String nameValue = URLEncoder.encode(String.valueOf(filterName), StandardCharsets.UTF_8);
      self.append(NAME_A_P_P_E_N_D + nameValue);
      next.append(NAME_A_P_P_E_N_D + nameValue);
      first.append(NAME_A_P_P_E_N_D + nameValue);
    });
    if (!filter.getTenants().isEmpty()) {
      String tenantsValue =
          URLEncoder.encode(String.join(",", filter.getTenants()), StandardCharsets.UTF_8);
      self.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      next.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      first.append(TENANTS_A_P_P_E_N_D + tenantsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceName().ifPresent(sinceName -> self
        .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      lastDto.getUid().ifPresent(
          uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8)));
      cursor.getSinceName().ifPresent(sinceName -> next
          .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    });
    return new UserApiDtoList().items(users.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final UserOrder order) {
    if (null == order) {
      return null;
    } else if (order == UserOrder.NAME_ASC) {
      return "name-asc";
    } else if (order == UserOrder.NAME_DESC) {
      return "name-desc";
    } else {
      return null;
    }
  }
}
