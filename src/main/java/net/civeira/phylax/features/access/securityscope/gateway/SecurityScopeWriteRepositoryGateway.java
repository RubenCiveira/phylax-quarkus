package net.civeira.phylax.features.access.securityscope.gateway;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.securityscope.SecurityScope;
import net.civeira.phylax.features.access.securityscope.SecurityScopeRef;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeCursor;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeFilter;

public interface SecurityScopeWriteRepositoryGateway {

  /**
   * The items that would be returned by the query
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long countForUpdate(SecurityScopeFilter filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @param verifier a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  SecurityScope create(SecurityScope entity, Predicate<SecurityScope> verifier);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  SecurityScope create(SecurityScope entity);

  /**
   * Delete an existing record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   */
  void delete(SecurityScope entity);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  SecurityScope enrichForUpdate(SecurityScopeRef reference);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean existsForUpdate(String uid, Optional<SecurityScopeFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<SecurityScope> findForUpdate(SecurityScopeFilter filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<SecurityScope> listForUpdate(SecurityScopeFilter filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<SecurityScope> retrieveForUpdate(String uid, Optional<SecurityScopeFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<SecurityScope> slideForUpdate(SecurityScopeFilter filter, SecurityScopeCursor cursor);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  SecurityScope update(SecurityScopeRef reference, SecurityScope entity);
}
