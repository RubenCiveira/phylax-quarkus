package net.civeira.phylax.features.access.scopeassignation.domain.gateway;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignationRef;

public interface ScopeAssignationWriteRepositoryGateway {

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long countForUpdate(ScopeAssignationFilter filter);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @param verifier a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  ScopeAssignation create(ScopeAssignation entity, Predicate<ScopeAssignation> verifier);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  ScopeAssignation create(ScopeAssignation entity);

  /**
   * Delete an existing record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   */
  void delete(ScopeAssignation entity);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean existsForUpdate(String uid, Optional<ScopeAssignationFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<ScopeAssignation> findForUpdate(ScopeAssignationFilter filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<ScopeAssignation> listForUpdate(ScopeAssignationFilter filter);

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  ScopeAssignation resolveForUpdate(ScopeAssignationRef reference);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<ScopeAssignation> retrieveForUpdate(String uid, Optional<ScopeAssignationFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<ScopeAssignation> slideForUpdate(ScopeAssignationFilter filter,
      ScopeAssignationCursor cursor);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  ScopeAssignation update(ScopeAssignationRef reference, ScopeAssignation entity);
}
