package net.civeira.phylax.features.access.tenantconfig.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;

import javax.sql.DataSource;

import io.opentelemetry.api.trace.Tracer;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.infrastructure.sql.OptimistLockException;
import net.civeira.phylax.common.infrastructure.sql.SqlCommand;
import net.civeira.phylax.common.infrastructure.sql.SqlConverter;
import net.civeira.phylax.common.infrastructure.sql.SqlListParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlOperator;
import net.civeira.phylax.common.infrastructure.sql.SqlParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlResult;
import net.civeira.phylax.common.infrastructure.sql.SqlSchematicQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlTemplate;
import net.civeira.phylax.features.access.tenantconfig.TenantConfig;
import net.civeira.phylax.features.access.tenantconfig.TenantConfigRef;
import net.civeira.phylax.features.access.tenantconfig.query.TenantConfigCursor;
import net.civeira.phylax.features.access.tenantconfig.query.TenantConfigFilter;
import net.civeira.phylax.features.access.tenantconfig.valueobject.ForceMfaVO;
import net.civeira.phylax.features.access.tenantconfig.valueobject.InnerLabelVO;
import net.civeira.phylax.features.access.tenantconfig.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenantconfig.valueobject.UidVO;
import net.civeira.phylax.features.access.tenantconfig.valueobject.VersionVO;

@ApplicationScoped
@RequiredArgsConstructor
@Slf4j
public class TenantConfigRepository {

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String FORCE_MFA = "forceMfa";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String FORCE_MFA_SNAKE = "force_mfa";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String INNER_LABEL = "innerLabel";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String INNER_LABEL_SNAKE = "inner_label";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT = "tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT_CONFIG_FORCE_MFA = "tenant_config.force_mfa";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT_CONFIG_INNER_LABEL = "tenant_config.inner_label";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT_CONFIG_SNAKE = "tenant_config";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT_CONFIG_TENANT = "tenant_config.tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT_CONFIG_UID = "tenant_config.uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT_CONFIG_VERSION = "tenant_config.version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String UID = "uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String VERSION = "version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final DataSource datasource;

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final Tracer tracer;

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public long count(TenantConfigFilter filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<Long> sq = filteredQuery(template, filter);
      sq.select("count(uid) as uid");
      return sq.query(row -> Optional.of(row.getLong(1))).one().orElse(0l);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public TenantConfig create(TenantConfig entity) {
    return runCreate(entity, null);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  public TenantConfig create(TenantConfig entity, Predicate<TenantConfig> verifier) {
    return runCreate(entity, verifier);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   */
  public void delete(TenantConfig entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq =
          template.createSqlCommand("delete from \"tenant_config\" where \"uid\" = :uid");
      sq.with(UID, SqlParameterValue.of(entity.getUidValue()));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No delete from");
      }
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public TenantConfig enrich(TenantConfigRef reference) {
    return reference instanceof TenantConfig tenantConfig ? tenantConfig
        : retrieve(reference.getUidValue(), Optional.empty())
            .orElseThrow(() -> new NotFoundException(
                "Trying to enrich inexistent TenantConfig: " + reference.getUidValue()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public TenantConfig enrichForUpdate(TenantConfigRef reference) {
    return reference instanceof TenantConfig tenantConfig ? tenantConfig
        : retrieveForUpdate(reference.getUidValue(), Optional.empty())
            .orElseThrow(() -> new NotFoundException(
                "Trying to enrich inexistent TenantConfig: " + reference.getUidValue()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean exists(String uid, Optional<TenantConfigFilter> filter) {
    return retrieve(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean existsForUpdate(String uid, Optional<TenantConfigFilter> filter) {
    return retrieveForUpdate(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<TenantConfig> find(TenantConfigFilter filter) {
    TenantConfigCursor cursor = TenantConfigCursor.builder().build();
    return new TenantConfigSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<TenantConfig> find(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TenantConfig> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<TenantConfig> findForUpdate(TenantConfigFilter filter) {
    TenantConfigCursor cursor = TenantConfigCursor.builder().build();
    return new TenantConfigSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<TenantConfig> findForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TenantConfig> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<TenantConfig> list(TenantConfigFilter filter) {
    TenantConfigCursor cursor = TenantConfigCursor.builder().build();
    return new TenantConfigSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TenantConfig> list(final String sql, final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, false);
  }

  /**
   * sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TenantConfig> list(final String sql, final Map<String, SqlParameterValue> params,
      final int limit) {
    return list(sql, params, Integer.valueOf(limit), false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<TenantConfig> listForUpdate(TenantConfigFilter filter) {
    TenantConfigCursor cursor = TenantConfigCursor.builder().build();
    return new TenantConfigSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TenantConfig> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, true);
  }

  /**
   * sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TenantConfig> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params, final int limit) {
    return list(sql, params, Integer.valueOf(limit), true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<TenantConfig> retrieve(String uid, Optional<TenantConfigFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      TenantConfigFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> TenantConfigFilter.builder().uid(uid).build());
      SqlSchematicQuery<TenantConfig> sq = filteredQuery(template, readyFilter);
      return sq.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<TenantConfig> retrieveForUpdate(String uid, Optional<TenantConfigFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      TenantConfigFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> TenantConfigFilter.builder().uid(uid).build());
      SqlSchematicQuery<TenantConfig> sq = filteredQuery(template, readyFilter);
      return sq.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<TenantConfig> slide(TenantConfigFilter filter, TenantConfigCursor cursor) {
    return new TenantConfigSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<TenantConfig> slideForUpdate(TenantConfigFilter filter, TenantConfigCursor cursor) {
    return new TenantConfigSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public TenantConfig update(TenantConfig entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "update \"tenant_config\" set  \"tenant\" = :tenant, \"inner_label\" = :innerLabel, \"force_mfa\" = :forceMfa, \"version\" = \"version\" + 1 where \"uid\" = :uid and \"version\" = :version");
      sq.with(UID, SqlParameterValue.of(entity.getUid().getValue()));
      sq.with(TENANT, SqlParameterValue.of(entity.getTenant().getReferenceValue()));
      sq.with(INNER_LABEL, entity.getInnerLabel().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(FORCE_MFA, SqlParameterValue.of(entity.getForceMfa().getValue()));
      sq.with(VERSION, entity.getVersion().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new OptimistLockException("No delete from");
      }
      return entity.nextVersion();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @return
   */
  private SqlConverter<TenantConfig> converter() {
    return row -> {
      try {
        return Optional.of(TenantConfig.builder().uid(UidVO.from(row.getString(UID)))
            .tenant(TenantVO.fromReference(row.getString(TENANT)))
            .innerLabel(InnerLabelVO.from(row.getString(INNER_LABEL_SNAKE)))
            .forceMfa(ForceMfaVO.from(row.getBoolean(FORCE_MFA_SNAKE)))
            .version(VersionVO.from(row.getInt(VERSION))).build());
      } catch (ConstraintException ce) {
        log.error("Unable to map data for {}", row.getString(1), ce);
        return Optional.empty();
      }
    };
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param template
   * @param filter
   * @return
   */
  private <T> SqlSchematicQuery<T> filteredQuery(SqlTemplate template, TenantConfigFilter filter) {
    SqlSchematicQuery<T> sq = template.createSqlSchematicQuery(TENANT_CONFIG_SNAKE);
    sq.selectFields(TENANT_CONFIG_UID, TENANT_CONFIG_TENANT, TENANT_CONFIG_INNER_LABEL,
        TENANT_CONFIG_FORCE_MFA, TENANT_CONFIG_VERSION);
    filter.getUid().ifPresent(uid -> sq.where(UID, SqlOperator.EQ, SqlParameterValue.of(uid)));
    if (!filter.getUids().isEmpty()) {
      sq.where(UID, SqlOperator.IN, SqlListParameterValue.strings(filter.getUids()));
    }
    filter.getSearch().ifPresent(
        search -> sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%")));
    filter.getTenant().ifPresent(
        tenant -> sq.where(TENANT, SqlOperator.EQ, SqlParameterValue.of(tenant.getUidValue())));
    if (!filter.getTenants().isEmpty()) {
      sq.where(TENANT, SqlOperator.IN, SqlListParameterValue.strings(filter.getTenants()));
    }
    filter.getTenantTenantAccesible().ifPresent(tenantTenantAccesible -> sq
        .where(TENANT_CONFIG_TENANT, SqlOperator.EQ, SqlParameterValue.of(tenantTenantAccesible)));
    return sq;
  }

  /**
   * sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @param forUpdate
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  private List<TenantConfig> list(final String sql, final Map<String, SqlParameterValue> params,
      final Integer limit, final boolean forUpdate) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TenantConfig> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      if (forUpdate) {
        createSqlQuery = createSqlQuery.forUpdate();
      }
      SqlResult<TenantConfig> query = createSqlQuery.query(converter());
      return null == limit ? query.all() : query.limit(limit);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  private TenantConfig runCreate(TenantConfig entity, Predicate<TenantConfig> verifier) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "insert into \"tenant_config\" ( \"uid\", \"tenant\", \"inner_label\", \"force_mfa\", \"version\") values ( :uid, :tenant, :innerLabel, :forceMfa, :version)");
      sq.with(UID, SqlParameterValue.of(entity.getUid().getValue()));
      sq.with(TENANT, SqlParameterValue.of(entity.getTenant().getReferenceValue()));
      sq.with(INNER_LABEL, entity.getInnerLabel().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(FORCE_MFA, SqlParameterValue.of(entity.getForceMfa().getValue()));
      sq.with(VERSION, entity.getVersion().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No insert into");
      }
      return verifier == null ? entity : verified(verifier.test(entity), entity, template);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<TenantConfig> runList(TenantConfigFilter filter, TenantConfigCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<TenantConfig> sq = filteredQuery(template, filter);
      cursor.getSinceUid()
          .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      sq.orderAsc("uid");
      return sq.query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<TenantConfig> runListForUpdate(TenantConfigFilter filter,
      TenantConfigCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<TenantConfig> sq = filteredQuery(template, filter);
      cursor.getSinceUid()
          .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      sq.orderAsc("uid");
      return sq.forUpdate().query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param exists
   * @param entity
   * @param template
   * @return
   */
  private TenantConfig verified(boolean exists, TenantConfig entity, SqlTemplate template) {
    if (exists) {
      return entity;
    } else {
      template.createSqlCommand("delete from \"tenant_config\" where \"uid\" = :uid")
          .with("uid", SqlParameterValue.of(entity.getUidValue())).execute();
      throw new NotFoundException("");
    }
  }
}
