package net.civeira.phylax.features.access.tenant.infrastructure.bootstrap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.UnaryOperator;

import jakarta.enterprise.context.ApplicationScoped;
import net.civeira.phylax.common.infrastructure.projection.ExecutionAggregation;
import net.civeira.phylax.common.infrastructure.projection.ExecutionNode;
import net.civeira.phylax.common.infrastructure.projection.ParamKind;
import net.civeira.phylax.common.infrastructure.projection.ProjectionDescriptor;
import net.civeira.phylax.common.infrastructure.projection.RelationshipDefinition;
import net.civeira.phylax.features.access.loginprovider.infrastructure.bootstrap.LoginProviderProjectionDescriptor.LoginProviderExecutionPlanner;
import net.civeira.phylax.features.access.role.infrastructure.bootstrap.RoleProjectionDescriptor.RoleExecutionPlanner;
import net.civeira.phylax.features.access.tenantconfig.infrastructure.bootstrap.TenantConfigProjectionDescriptor.TenantConfigExecutionPlanner;
import net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.bootstrap.TenantTermsOfUseProjectionDescriptor.TenantTermsOfUseExecutionPlanner;
import net.civeira.phylax.features.access.user.infrastructure.bootstrap.UserProjectionDescriptor.UserExecutionPlanner;

@ApplicationScoped
public class TenantProjectionDescriptor implements ProjectionDescriptor {

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   */
  public static class TenantExecutionPlanner {

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    private final List<ExecutionAggregation> aggregation = new ArrayList<>();

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    String prefix;

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    public TenantExecutionPlanner() {
      this.prefix = "";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param prefix
     */
    public TenantExecutionPlanner(final String prefix) {
      this.prefix = prefix + ".";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public List<ExecutionAggregation> build() {
      return aggregation;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withAccessToAllApplications() {
      return withAccessToAllApplications(prefix + "accessToAllApplications");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withAccessToAllApplications(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("accessToAllApplications").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withDomain() {
      return withDomain(prefix + "domain");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withDomain(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("domain").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withEnabled() {
      return withEnabled(prefix + "enabled");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withEnabled(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("enabled").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withLoginProvider() {
      return withLoginProvider(prefix + "loginProvider", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withLoginProvider(final String alias) {
      return withLoginProvider(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withLoginProvider(
        final UnaryOperator<LoginProviderExecutionPlanner> callback) {
      return withLoginProvider(prefix + "loginProvider", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withLoginProvider(final String alias,
        final UnaryOperator<LoginProviderExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("loginProvider").alias(alias)
          .selection(null != callback
              ? callback.apply(new LoginProviderExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withName() {
      return withName(prefix + "name");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withName(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("name").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withRelingParties() {
      return withRelingParties(prefix + "relingParties");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withRelingParties(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("relingParties").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withRole() {
      return withRole(prefix + "role", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withRole(final String alias) {
      return withRole(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withRole(final UnaryOperator<RoleExecutionPlanner> callback) {
      return withRole(prefix + "role", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withRole(final String alias,
        final UnaryOperator<RoleExecutionPlanner> callback) {
      aggregation
          .add(ExecutionAggregation.builder().name("role").alias(alias)
              .selection(null != callback
                  ? callback.apply(new RoleExecutionPlanner(prefix + alias)).build()
                  : List.of())
              .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withTenantConfig() {
      return withTenantConfig(prefix + "tenantConfig", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withTenantConfig(final String alias) {
      return withTenantConfig(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withTenantConfig(
        final UnaryOperator<TenantConfigExecutionPlanner> callback) {
      return withTenantConfig(prefix + "tenantConfig", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withTenantConfig(final String alias,
        final UnaryOperator<TenantConfigExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("tenantConfig").alias(alias)
          .selection(null != callback
              ? callback.apply(new TenantConfigExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withTenantTermsOfUse() {
      return withTenantTermsOfUse(prefix + "tenantTermsOfUse", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withTenantTermsOfUse(final String alias) {
      return withTenantTermsOfUse(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withTenantTermsOfUse(
        final UnaryOperator<TenantTermsOfUseExecutionPlanner> callback) {
      return withTenantTermsOfUse(prefix + "tenantTermsOfUse", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withTenantTermsOfUse(final String alias,
        final UnaryOperator<TenantTermsOfUseExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("tenantTermsOfUse").alias(alias)
          .selection(null != callback
              ? callback.apply(new TenantTermsOfUseExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withTrustedClients() {
      return withTrustedClients(prefix + "trustedClients");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withTrustedClients(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("trustedClients").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withUid() {
      return withUid(prefix + "uid");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withUid(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("uid").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withUser() {
      return withUser(prefix + "user", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withUser(final String alias) {
      return withUser(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withUser(final UnaryOperator<UserExecutionPlanner> callback) {
      return withUser(prefix + "user", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public TenantExecutionPlanner withUser(final String alias,
        final UnaryOperator<UserExecutionPlanner> callback) {
      aggregation
          .add(ExecutionAggregation.builder().name("user").alias(alias)
              .selection(null != callback
                  ? callback.apply(new UserExecutionPlanner(prefix + alias)).build()
                  : List.of())
              .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public TenantExecutionPlanner withVersion() {
      return withVersion(prefix + "version");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public TenantExecutionPlanner withVersion(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("version").alias(alias).selection(List.of()).build());
      return this;
    }
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  @Override
  public List<ExecutionNode> baseNodes(final String baseServer) {
    Map<String, RelationshipDefinition> relations = relations(baseServer);
    return List.of(
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/tenants").method("GET")
            .list(true).params(Map.of()).relations(relations).build(),
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/tenants/{uid}")
            .method("GET").list(false).params(Map.of("uid", ParamKind.PATH)).relations(relations)
            .build());
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  private Map<String, RelationshipDefinition> relations(final String baseServer) {
    return Map
        .of("role",
            RelationshipDefinition
                .builder().list(true).id("/api/access/roles").url(baseServer + "/api/access/roles")
                .method("GET").batchParam("tenants").referenceField("tenant").build(),
            "tenantConfig",
            RelationshipDefinition.builder().list(true).id("/api/access/tenants-config")
                .url(baseServer + "/api/access/tenants-config").method("GET").batchParam("tenants")
                .referenceField("tenant").build(),
            "loginProvider",
            RelationshipDefinition.builder().list(true).id("/api/access/login-providers")
                .url(baseServer + "/api/access/login-providers").method("GET").batchParam("tenants")
                .referenceField("tenant").build(),
            "tenantTermsOfUse",
            RelationshipDefinition.builder().list(true).id("/api/access/tenants-terms-of-use")
                .url(baseServer + "/api/access/tenants-terms-of-use").method("GET")
                .batchParam("tenants").referenceField("tenant").build(),
            "user",
            RelationshipDefinition.builder().list(true).id("/api/access/users")
                .url(baseServer + "/api/access/users").method("GET").batchParam("tenants")
                .referenceField("tenant").build());
  }
}
