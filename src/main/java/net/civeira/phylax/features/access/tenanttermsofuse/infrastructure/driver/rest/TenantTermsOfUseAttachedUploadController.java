package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.driver.rest;

import java.io.InputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.common.infrastructure.store.BinaryContent;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.attachedretrieve.TenantTermsOfUseAttachedRetrieveUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.attachedupload.TenantTermsOfUseAttachedTemporalUploadUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseReference;

@RequiredArgsConstructor
@RequestScoped
public class TenantTermsOfUseAttachedUploadController {

  /**
   * @autogenerated FileControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated FileControllerGenerator
   */
  private final TenantTermsOfUseAttachedRetrieveUsecase retrieveAttachedUploadUsecase;

  /**
   * @autogenerated FileControllerGenerator
   */
  private final TenantTermsOfUseAttachedTemporalUploadUsecase tempAttachedUploadUsecase;

  /**
   * @autogenerated FileControllerGenerator
   * @param uid
   * @return
   */
  public Response tenantTermsOfUseApiRetrieveAttached(final String uid) {
    BinaryContent stream = retrieveAttachedUploadUsecase.read(currentRequest.interaction(),
        TenantTermsOfUseReference.of(uid));
    String encodedFilename = URLEncoder.encode(stream.getName(), StandardCharsets.UTF_8);
    return Response.ok(stream.getInputStream()).header("Content-type", stream.getContentType())
        .header("Content-Disposition", "attachment; filename*=UTF-8''" + encodedFilename).build();
  }

  /**
   * @autogenerated FileControllerGenerator
   * @param temp
   * @return
   */
  public Response tenantTermsOfUseApiRetrieveTempUploadAttached(final String temp) {
    BinaryContent stream = tempAttachedUploadUsecase.read(currentRequest.interaction(), temp);
    return Response.ok(stream.getInputStream()).build();
  }

  /**
   * @autogenerated FileControllerGenerator
   * @param file
   * @param fileName
   * @param fileType
   * @return
   */
  public Response tenantTermsOfUseApiUploadTempUploadAttached(final InputStream file,
      final String fileName, final String fileType) {
    String key = tempAttachedUploadUsecase.upload(currentRequest.interaction(),
        BinaryContent.builder().name(fileName).contentType(fileType)
            .lastModification(System.currentTimeMillis()).inputStream(file).build());
    return Response.ok(currentRequest.getPublicHost()
        + "/api/access/tenants-terms-of-use/-/temp-attached?temp=" + key).build();
  }
}
