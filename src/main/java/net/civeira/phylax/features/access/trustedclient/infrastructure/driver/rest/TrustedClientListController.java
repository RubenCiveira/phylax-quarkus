package net.civeira.phylax.features.access.trustedclient.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.trustedclient.application.usecase.list.TrustedClientListCursor;
import net.civeira.phylax.features.access.trustedclient.application.usecase.list.TrustedClientListFilter;
import net.civeira.phylax.features.access.trustedclient.application.usecase.list.TrustedClientListOrder;
import net.civeira.phylax.features.access.trustedclient.application.usecase.list.TrustedClientListProjection;
import net.civeira.phylax.features.access.trustedclient.application.usecase.list.TrustedClientListUsecase;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiDto;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiDtoList;

@RequiredArgsConstructor
public class TrustedClientListController {

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String CODE_APPEND = "&code=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String LIMIT_APPEND = "&limit=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SINCE_APPEND = "&since-uid=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * TrustedClient
   *
   * @autogenerated ListControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ListControllerGenerator
   */
  private final TrustedClientListUsecase list;

  /**
   * @autogenerated ListControllerGenerator
   * @param uids
   * @param search
   * @param code
   * @param limit
   * @param sinceUid
   * @param sinceCode
   * @param order
   * @return
   */
  public Response trustedClientApiList(final List<String> uids, final String search,
      final String code, final Integer limit, final String sinceUid, final String sinceCode,
      final String order) {
    List<TrustedClientListOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    TrustedClientListFilter.TrustedClientListFilterBuilder filterBuilder =
        TrustedClientListFilter.builder();
    TrustedClientListCursor.TrustedClientListCursorBuilder cursorBuilder =
        TrustedClientListCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.code(code);
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    cursorBuilder = cursorBuilder.sinceCode(sinceCode);
    cursorBuilder = cursorBuilder.order(orderSteps);
    TrustedClientListFilter filter = filterBuilder.build();
    TrustedClientListCursor cursor = cursorBuilder.build();
    List<TrustedClientListProjection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "trusted-client-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param label
   * @return
   */
  private TrustedClientListOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("code-asc")) {
      return TrustedClientListOrder.CODE_ASC;
    } else if (label.trim().equals("code-desc")) {
      return TrustedClientListOrder.CODE_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param dto
   * @return
   */
  private TrustedClientApiDto toApiModel(TrustedClientListProjection dto) {
    TrustedClientApiDto trustedClientApiDto = new TrustedClientApiDto();
    trustedClientApiDto.setUid(dto.getUid());
    trustedClientApiDto.setCode(dto.getCode());
    trustedClientApiDto.setPublicAllow(dto.getPublicAllow());
    trustedClientApiDto.setSecretOauth("*****");
    trustedClientApiDto.setAllowedRedirects(dto.getAllowedRedirects());
    trustedClientApiDto.setEnabled(dto.getEnabled());
    trustedClientApiDto.setVersion(dto.getVersion());
    return trustedClientApiDto;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param trustedClients
   * @param filter
   * @param cursor
   * @return
   */
  private TrustedClientApiDtoList toListApiModel(List<TrustedClientListProjection> trustedClients,
      TrustedClientListFilter filter, TrustedClientListCursor cursor) {
    Optional<TrustedClientListProjection> last = trustedClients.isEmpty() ? Optional.empty()
        : Optional.of(trustedClients.get(trustedClients.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getCode().ifPresent(filterCode -> {
      String codeValue = URLEncoder.encode(String.valueOf(filterCode), StandardCharsets.UTF_8);
      self.append(CODE_APPEND + codeValue);
      next.append(CODE_APPEND + codeValue);
      first.append(CODE_APPEND + codeValue);
    });
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(SINCE_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceCode().ifPresent(sinceCode -> self
        .append("&since-code=" + URLEncoder.encode(sinceCode, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      next.append(SINCE_APPEND + URLEncoder.encode(lastDto.getUid(), StandardCharsets.UTF_8));;
      cursor.getSinceCode().ifPresent(sinceCode -> next
          .append("&since-code=" + URLEncoder.encode(sinceCode, StandardCharsets.UTF_8)));
    });
    return new TrustedClientApiDtoList()
        .items(trustedClients.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final TrustedClientListOrder order) {
    if (null == order) {
      return null;
    } else if (order == TrustedClientListOrder.CODE_ASC) {
      return "code-asc";
    } else if (order == TrustedClientListOrder.CODE_DESC) {
      return "code-desc";
    } else {
      return null;
    }
  }
}
