package net.civeira.phylax.features.access.user.infrastructure.driver.rest;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.features.access.user.application.usecase.create.UserCreateInput;
import net.civeira.phylax.features.access.user.application.usecase.create.UserCreateProjection;
import net.civeira.phylax.features.access.user.application.usecase.create.UserCreateUsecase;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;
import net.civeira.phylax.generated.openapi.model.UserApiDto;

@RequiredArgsConstructor
public class UserCreateController {

  /**
   * @autogenerated CreateControllerGenerator
   */
  private final UserCreateUsecase create;

  /**
   * @autogenerated CreateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated CreateControllerGenerator
   * @param user
   * @return
   */
  @Transactional
  public Response userApiCreate(UserApiDto user) {
    UserCreateProjection created = create.create(currentRequest.interaction(), toDomainModel(user));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param dto
   * @return
   */
  private UserApiDto toApiModel(UserCreateProjection dto) {
    UserApiDto userApiDto = new UserApiDto();
    userApiDto.setUid(dto.getUid());
    userApiDto.setTenant(new TenantApiRef().$ref(dto.getTenantReference()));
    userApiDto.setName(dto.getName());
    userApiDto.setPassword("*****");
    userApiDto.setEmail(dto.getEmail());
    userApiDto.setEnabled(dto.getEnabled());
    userApiDto.setTemporalPassword(dto.getTemporalPassword());
    userApiDto.setUseSecondFactors(dto.getUseSecondFactors());
    userApiDto.setSecondFactorSeed("*****");
    userApiDto.setBlockedUntil(dto.getBlockedUntil());
    userApiDto.setLanguage(dto.getLanguage());
    userApiDto.setProvider(dto.getProvider());
    userApiDto.setVersion(dto.getVersion());
    return userApiDto;
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param userApiDto
   * @return
   */
  private UserCreateInput toDomainModel(UserApiDto userApiDto) {
    UserCreateInput dto = new UserCreateInput();
    if (null != userApiDto.getUid()) {
      dto.setUid(userApiDto.getUid());
    }
    if (null != userApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(userApiDto.getTenant().get$Ref()));
    }
    if (null != userApiDto.getName()) {
      dto.setName(userApiDto.getName());
    }
    if (null != userApiDto.getPassword() && !"*****".equals(userApiDto.getPassword())) {
      dto.setPassword(userApiDto.getPassword());
    }
    if (null != userApiDto.getEmail()) {
      dto.setEmail(userApiDto.getEmail());
    }
    if (null != userApiDto.getEnabled()) {
      dto.setEnabled(userApiDto.getEnabled());
    }
    if (null != userApiDto.getTemporalPassword()) {
      dto.setTemporalPassword(userApiDto.getTemporalPassword());
    }
    if (null != userApiDto.getUseSecondFactors()) {
      dto.setUseSecondFactors(userApiDto.getUseSecondFactors());
    }
    if (null != userApiDto.getSecondFactorSeed()
        && !"*****".equals(userApiDto.getSecondFactorSeed())) {
      dto.setSecondFactorSeed(userApiDto.getSecondFactorSeed());
    }
    if (null != userApiDto.getBlockedUntil()) {
      dto.setBlockedUntil(userApiDto.getBlockedUntil());
    }
    if (null != userApiDto.getLanguage()) {
      dto.setLanguage(userApiDto.getLanguage());
    }
    if (null != userApiDto.getProvider()) {
      dto.setProvider(userApiDto.getProvider());
    }
    if (null != userApiDto.getVersion()) {
      dto.setVersion(userApiDto.getVersion());
    }
    return dto;
  }
}
