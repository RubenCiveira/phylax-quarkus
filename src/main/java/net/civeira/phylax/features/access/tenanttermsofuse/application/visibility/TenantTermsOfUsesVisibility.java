package net.civeira.phylax.features.access.tenanttermsofuse.application.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantsVisibility;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseChangeSet;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseCacheGateway;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseCached;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseCursor;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseFilter;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseReadRepositoryGateway;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseWriteRepositoryGateway;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TenantVO;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantTermsOfUsesVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantTermsOfUseCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantTermsOfUseVisibilityCheck> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantTermsOfUseFixedFieldsCheck> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantTermsOfUseAccesibleCheck> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantTermsOfUseHiddenFieldsCheck> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantTermsOfUseEntityEnrichment> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantTermsOfUseReadRepositoryGateway tenantTermsOfUseReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantTermsOfUseWriteRepositoryGateway tenantTermsOfUseWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantsVisibility tenantsVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids
        .size() == listVisibles(prev, TenantTermsOfUseVisibilityFilter.builder().uids(uids).build(),
            TenantTermsOfUseCursor.builder().build()).size();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public TenantTermsOfUseChangeSet copyWithFixed(Interaction prev, TenantTermsOfUseChangeSet source,
      TenantTermsOfUse original) {
    TenantTermsOfUseChangeSet withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    TenantTermsOfUseEntityEnrichment proposal = TenantTermsOfUseEntityEnrichment.builder()
        .dto(withReferences).interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public TenantTermsOfUseChangeSet copyWithFixed(Interaction prev,
      TenantTermsOfUseChangeSet source) {
    TenantTermsOfUseChangeSet withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    TenantTermsOfUseEntityEnrichment proposal =
        TenantTermsOfUseEntityEnrichment.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param tenantTermsOfUse
   * @return The input dto with hidden values
   */
  public TenantTermsOfUseVisibleProjection copyWithHidden(Interaction prev,
      TenantTermsOfUse tenantTermsOfUse) {
    TenantTermsOfUseVisibleProjection target =
        new TenantTermsOfUseVisibleProjection(tenantTermsOfUse);
    fieldsToHide(prev, tenantTermsOfUse).forEach(target::unset);
    return target;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, TenantTermsOfUseVisibilityFilter filter) {
    return tenantTermsOfUseReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    TenantTermsOfUseFixedFieldsCheck proposal =
        TenantTermsOfUseFixedFieldsCheck.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param tenantTermsOfUse
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, TenantTermsOfUseRef tenantTermsOfUse) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, tenantTermsOfUse));
    TenantTermsOfUseFixedFieldsCheck proposal = TenantTermsOfUseFixedFieldsCheck.builder()
        .fields(fields).tenantTermsOfUse(tenantTermsOfUse).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    TenantTermsOfUseHiddenFieldsCheck proposal =
        TenantTermsOfUseHiddenFieldsCheck.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param tenantTermsOfUse
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, TenantTermsOfUseRef tenantTermsOfUse) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    TenantTermsOfUseHiddenFieldsCheck proposal = TenantTermsOfUseHiddenFieldsCheck.builder()
        .fields(fields).tenantTermsOfUse(tenantTermsOfUse).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public TenantTermsOfUseCached listCachedVisibles(Interaction prev,
      TenantTermsOfUseVisibilityFilter filter, TenantTermsOfUseCursor cursor) {
    TenantTermsOfUseFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<TenantTermsOfUse> listVisibles(Interaction prev,
      TenantTermsOfUseVisibilityFilter filter, TenantTermsOfUseCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<TenantTermsOfUse> listVisiblesForUpdate(Interaction prev,
      TenantTermsOfUseVisibilityFilter filter, TenantTermsOfUseCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public TenantTermsOfUseCached retrieveCachedVisible(Interaction prev, String uid) {
    TenantTermsOfUseCursor cursor = TenantTermsOfUseCursor.builder().limit(1).build();
    TenantTermsOfUseFilter visibleFilter =
        applyPreVisibilityFilter(prev, TenantTermsOfUseVisibilityFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<TenantTermsOfUse> list =
          retrieveVisible(prev, uid).<List<TenantTermsOfUse>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<TenantTermsOfUse> retrieveVisible(Interaction prev, String uid) {
    TenantTermsOfUseFilter filter =
        applyPreVisibilityFilter(prev, TenantTermsOfUseVisibilityFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<TenantTermsOfUse> retrieveVisibleForUpdate(Interaction prev, String uid) {
    TenantTermsOfUseFilter filter =
        applyPreVisibilityFilter(prev, TenantTermsOfUseVisibilityFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private TenantTermsOfUseFilter applyPreVisibilityFilter(Interaction prev,
      TenantTermsOfUseVisibilityFilter filter) {
    TenantTermsOfUseVisibilityCheck proposal =
        TenantTermsOfUseVisibilityCheck.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    TenantTermsOfUseVisibilityFilter modified = proposal.getFilter();
    return TenantTermsOfUseFilter.builder().uid(modified.getUid().orElse(null))
        .uids(modified.getUids().stream().toList()).search(modified.getSearch().orElse(null))
        .tenant(modified.getTenant().orElse(null)).tenants(modified.getTenants())
        .tenantTenantAccesible(modified.getTenantTenantAccesible().orElse(null)).build();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param tenantTermsOfUseRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, TenantTermsOfUse tenantTermsOfUseRef) {
    TenantTermsOfUseAccesibleCheck proposal = TenantTermsOfUseAccesibleCheck.builder().visible(true)
        .entity(tenantTermsOfUseRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<TenantTermsOfUse> queryItem(Interaction prev, String uid,
      TenantTermsOfUseFilter filter) {
    return tenantTermsOfUseReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<TenantTermsOfUse> queryItemForUpdate(Interaction prev, String uid,
      TenantTermsOfUseFilter filter) {
    return tenantTermsOfUseWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<TenantTermsOfUse> queryItems(Interaction prev, TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor) {
    List<TenantTermsOfUse> list = new ArrayList<>();
    Iterator<TenantTermsOfUse> slide = tenantTermsOfUseReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<TenantTermsOfUse> queryItemsForUpdate(Interaction prev,
      TenantTermsOfUseFilter filter, TenantTermsOfUseCursor cursor) {
    List<TenantTermsOfUse> list = new ArrayList<>();
    Iterator<TenantTermsOfUse> slide = tenantTermsOfUseWriteRepositoryGateway
        .slideForUpdate(filter, cursor).slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private TenantTermsOfUseChangeSet visiblesReferences(Interaction prev,
      TenantTermsOfUseChangeSet source) {
    source.getTenant().map(TenantVO::getTenantUid).ifPresent(tenant -> {
      boolean visible = tenantsVisibility.checkVisibility(prev, tenant);
      if (!visible) {
        throw new NotFoundException("No tenant - " + tenant);
      }
    });
    return source;
  }
}
