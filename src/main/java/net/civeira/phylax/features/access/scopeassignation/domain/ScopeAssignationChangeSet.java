package net.civeira.phylax.features.access.scopeassignation.domain;

import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.SecurityDomainVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.SecurityScopeVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainRef;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeRef;

/**
 * A dto transfer to hold scope assignation attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ScopeAssignationChangeSet {

  /**
   * @autogenerated EntityChangeSetGenerator
   */
  public static class ScopeAssignationChangeSetBuilder {

    /**
     * @autogenerated EntityChangeSetGenerator
     * @return
     */
    public ScopeAssignationChangeSetBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * Append SecurityDomain crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param securityDomain The SecurityDomain value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public ScopeAssignationChangeSetBuilder securityDomain(final SecurityDomainRef securityDomain) {
      return securityDomain(Optional.of(SecurityDomainVO.from(securityDomain)));
    }

    /**
     * Append SecurityDomain value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param securityDomain The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public ScopeAssignationChangeSetBuilder securityDomain(
        final Optional<SecurityDomainVO> securityDomain) {
      this.securityDomain$value = securityDomain;
      this.securityDomain$set = true;
      return this;
    }

    /**
     * Append SecurityScope crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param securityScope The SecurityScope value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public ScopeAssignationChangeSetBuilder securityScope(final SecurityScopeRef securityScope) {
      return securityScope(Optional.of(SecurityScopeVO.from(securityScope)));
    }

    /**
     * Append SecurityScope value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param securityScope The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public ScopeAssignationChangeSetBuilder securityScope(
        final Optional<SecurityScopeVO> securityScope) {
      this.securityScope$value = securityScope;
      this.securityScope$set = true;
      return this;
    }

    /**
     * Append Uid crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param uid The Uid value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public ScopeAssignationChangeSetBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * Append Uid value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param uid The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public ScopeAssignationChangeSetBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * Append Version crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param version The Version value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public ScopeAssignationChangeSetBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * Append Version value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param version The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public ScopeAssignationChangeSetBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * El security domain de scope assignation
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<SecurityDomainVO> securityDomain = Optional.empty();

  /**
   * El security scope de scope assignation
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<SecurityScopeVO> securityScope = Optional.empty();

  /**
   * El uid de scope assignation
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de scope assignation para controlar bloqueos optimistas
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Inform for a possible change propolsal in SecurityDomain
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for SecurityDomain, otherwise the value for
   *         SecurityDomain
   */
  public Optional<SecurityDomainVO> getSecurityDomain() {
    return securityDomain;
  }

  /**
   * Inform for a possible change propolsal in SecurityScope
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for SecurityScope, otherwise the value for
   *         SecurityScope
   */
  public Optional<SecurityScopeVO> getSecurityScope() {
    return securityScope;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for SecurityDomain to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for ScopeAssignationChangeSet
   * @return self instance to enable a flow code
   */
  public ScopeAssignationChangeSet setSecurityDomain(final SecurityDomainRef value) {
    this.securityDomain = Optional.of(SecurityDomainVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for SecurityScope to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for ScopeAssignationChangeSet
   * @return self instance to enable a flow code
   */
  public ScopeAssignationChangeSet setSecurityScope(final SecurityScopeRef value) {
    this.securityScope = Optional.of(SecurityScopeVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for ScopeAssignationChangeSet
   * @return self instance to enable a flow code
   */
  public ScopeAssignationChangeSet setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for ScopeAssignationChangeSet
   * @return self instance to enable a flow code
   */
  public ScopeAssignationChangeSet setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated EntityChangeSetGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("securityDomain".equals(field)) {
      this.unsetSecurityDomain();
    }
    if ("securityScope".equals(field)) {
      this.unsetSecurityScope();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for SecurityDomain
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public ScopeAssignationChangeSet unsetSecurityDomain() {
    this.securityDomain = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for SecurityScope
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public ScopeAssignationChangeSet unsetSecurityScope() {
    this.securityScope = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public ScopeAssignationChangeSet unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public ScopeAssignationChangeSet unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
