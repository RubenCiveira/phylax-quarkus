package net.civeira.phylax.features.access.loginprovider.application.visibility;

import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderReference;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderSourceOptions;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.CertificateVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.DirectAccessVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.DisabledVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.MetadataVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.PrivateKeyVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.PublicKeyVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.SourceVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.UsersEnabledByDefaultVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;

/**
 * A dto transfer to hold login provider attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class LoginProviderVisibleProjection {

  /**
   * The provider certificate used for signature verification, if required.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<CertificateVO> certificate = Optional.empty();

  /**
   * If true, the system will default to this login method without requiring selection.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<DirectAccessVO> directAccess = Optional.empty();

  /**
   * Indicates if this provider is currently disabled.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<DisabledVO> disabled = Optional.empty();

  /**
   * A metadata file required by some providers for configuration (e.g., SAML descriptor).
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<MetadataVO> metadata = Optional.empty();

  /**
   * A name that identifies this login provider within the tenant.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * Private key used internally to validate codes returned by the identity provider.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<PrivateKeyVO> privateKey = Optional.empty();

  /**
   * A public key shared with users to interact with the identity provider.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<PublicKeyVO> publicKey = Optional.empty();

  /**
   * The source protocol or system used for authentication (e.g., GOOGLE, GITHUB, SAML).
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<SourceVO> source = Optional.empty();

  /**
   * The tenant this login provider is configured for.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Defines whether the users created with this provider are enabled by default.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UsersEnabledByDefaultVO> usersEnabledByDefault = Optional.empty();

  /**
   * Campo con el n√∫mero de version de login provider para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public LoginProviderVisibleProjection(final LoginProvider entity) {
    uid = Optional.of(entity.getUidValue());
    tenant = Optional.of(entity.getTenantValue());
    name = Optional.of(entity.getNameValue());
    source = Optional.of(entity.getSourceValue());
    disabled = Optional.of(entity.getDisabledValue());
    directAccess = Optional.of(entity.getDirectAccessValue());
    publicKey = Optional.of(entity.getPublicKeyValue());
    privateKey = Optional.of(entity.getPrivateKeyValue());
    certificate = Optional.of(entity.getCertificateValue());
    metadata = Optional.of(entity.getMetadataValue());
    usersEnabledByDefault = Optional.of(entity.getUsersEnabledByDefaultValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for login provider with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public LoginProviderReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(LoginProviderReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in Certificate
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Certificate, otherwise the value for
   *         Certificate
   */
  public Optional<CertificateVO> getCertificate() {
    return certificate;
  }

  /**
   * Inform for a possible change propolsal in DirectAccess
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for DirectAccess, otherwise the value for
   *         DirectAccess
   */
  public Optional<DirectAccessVO> getDirectAccess() {
    return directAccess;
  }

  /**
   * Inform for a possible change propolsal in Disabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Disabled, otherwise the value for Disabled
   */
  public Optional<DisabledVO> getDisabled() {
    return disabled;
  }

  /**
   * Inform for a possible change propolsal in Metadata
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Metadata, otherwise the value for Metadata
   */
  public Optional<MetadataVO> getMetadata() {
    return metadata;
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * Inform for a possible change propolsal in PrivateKey
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for PrivateKey, otherwise the value for PrivateKey
   */
  public Optional<PrivateKeyVO> getPrivateKey() {
    return privateKey;
  }

  /**
   * Inform for a possible change propolsal in PublicKey
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for PublicKey, otherwise the value for PublicKey
   */
  public Optional<PublicKeyVO> getPublicKey() {
    return publicKey;
  }

  /**
   * Inform for a possible change propolsal in Source
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Source, otherwise the value for Source
   */
  public Optional<SourceVO> getSource() {
    return source;
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in UsersEnabledByDefault
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for UsersEnabledByDefault, otherwise the value for
   *         UsersEnabledByDefault
   */
  public Optional<UsersEnabledByDefaultVO> getUsersEnabledByDefault() {
    return usersEnabledByDefault;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for Certificate to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setCertificate(final String value) {
    this.certificate = Optional.of(CertificateVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for DirectAccess to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setDirectAccess(final Boolean value) {
    this.directAccess = Optional.of(DirectAccessVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Disabled to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setDisabled(final Boolean value) {
    this.disabled = Optional.of(DisabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Metadata to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setMetadata(final String value) {
    this.metadata = Optional.of(MetadataVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Name to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for PrivateKey to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setPrivateKey(final String value) {
    this.privateKey = Optional.of(PrivateKeyVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for PublicKey to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setPublicKey(final String value) {
    this.publicKey = Optional.of(PublicKeyVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Source to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setSource(final LoginProviderSourceOptions value) {
    this.source = Optional.of(SourceVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Tenant to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for UsersEnabledByDefault to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setUsersEnabledByDefault(final Boolean value) {
    this.usersEnabledByDefault = Optional.of(UsersEnabledByDefaultVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for LoginProviderVisibleProjection
   * @return self instance to enable a flow code
   */
  public LoginProviderVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("source".equals(field)) {
      this.unsetSource();
    }
    if ("disabled".equals(field)) {
      this.unsetDisabled();
    }
    if ("directAccess".equals(field)) {
      this.unsetDirectAccess();
    }
    if ("publicKey".equals(field)) {
      this.unsetPublicKey();
    }
    if ("privateKey".equals(field)) {
      this.unsetPrivateKey();
    }
    if ("certificate".equals(field)) {
      this.unsetCertificate();
    }
    if ("metadata".equals(field)) {
      this.unsetMetadata();
    }
    if ("usersEnabledByDefault".equals(field)) {
      this.unsetUsersEnabledByDefault();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for Certificate
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetCertificate() {
    this.certificate = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for DirectAccess
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetDirectAccess() {
    this.directAccess = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Disabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetDisabled() {
    this.disabled = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Metadata
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetMetadata() {
    this.metadata = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for PrivateKey
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetPrivateKey() {
    this.privateKey = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for PublicKey
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetPublicKey() {
    this.publicKey = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Source
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetSource() {
    this.source = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for UsersEnabledByDefault
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetUsersEnabledByDefault() {
    this.usersEnabledByDefault = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public LoginProviderVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
