package net.civeira.phylax.features.access.securitydomain.infrastructure.bootstrap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.UnaryOperator;

import jakarta.enterprise.context.ApplicationScoped;
import net.civeira.phylax.common.infrastructure.projection.ExecutionAggregation;
import net.civeira.phylax.common.infrastructure.projection.ExecutionNode;
import net.civeira.phylax.common.infrastructure.projection.ParamKind;
import net.civeira.phylax.common.infrastructure.projection.ProjectionDescriptor;
import net.civeira.phylax.common.infrastructure.projection.RelationshipDefinition;
import net.civeira.phylax.features.access.scopeassignation.infrastructure.bootstrap.ScopeAssignationProjectionDescriptor.ScopeAssignationExecutionPlanner;

@ApplicationScoped
public class SecurityDomainProjectionDescriptor implements ProjectionDescriptor {

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   */
  public static class SecurityDomainExecutionPlanner {

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    private final List<ExecutionAggregation> aggregation = new ArrayList<>();

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    String prefix;

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    public SecurityDomainExecutionPlanner() {
      this.prefix = "";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param prefix
     */
    public SecurityDomainExecutionPlanner(final String prefix) {
      this.prefix = prefix + ".";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public List<ExecutionAggregation> build() {
      return aggregation;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withEnabled() {
      return withEnabled(prefix + "enabled");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withEnabled(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("enabled").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withLevel() {
      return withLevel(prefix + "level");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withLevel(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("level").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withManageAll() {
      return withManageAll(prefix + "manageAll");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withManageAll(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("manageAll").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withName() {
      return withName(prefix + "name");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withName(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("name").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withReadAll() {
      return withReadAll(prefix + "readAll");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withReadAll(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("readAll").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withScopeAssignation() {
      return withScopeAssignation(prefix + "scopeAssignation", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withScopeAssignation(final String alias) {
      return withScopeAssignation(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public SecurityDomainExecutionPlanner withScopeAssignation(
        final UnaryOperator<ScopeAssignationExecutionPlanner> callback) {
      return withScopeAssignation(prefix + "scopeAssignation", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public SecurityDomainExecutionPlanner withScopeAssignation(final String alias,
        final UnaryOperator<ScopeAssignationExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("scopeAssignation").alias(alias)
          .selection(null != callback
              ? callback.apply(new ScopeAssignationExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withUid() {
      return withUid(prefix + "uid");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withUid(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("uid").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withVersion() {
      return withVersion(prefix + "version");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withVersion(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("version").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityDomainExecutionPlanner withWriteAll() {
      return withWriteAll(prefix + "writeAll");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityDomainExecutionPlanner withWriteAll(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("writeAll").alias(alias)
          .selection(List.of()).build());
      return this;
    }
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  @Override
  public List<ExecutionNode> baseNodes(final String baseServer) {
    Map<String, RelationshipDefinition> relations = relations(baseServer);
    return List.of(
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/security-domains")
            .method("GET").list(true).params(Map.of()).relations(relations).build(),
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/security-domains/{uid}")
            .method("GET").list(false).params(Map.of("uid", ParamKind.PATH)).relations(relations)
            .build());
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  private Map<String, RelationshipDefinition> relations(final String baseServer) {
    return Map.of("scopeAssignation",
        RelationshipDefinition.builder().list(true).id("/api/access/scope-assignations")
            .url(baseServer + "/api/access/scope-assignations").method("GET")
            .batchParam("security-domains").referenceField("security-domain").build());
  }
}
