package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.driven;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseCursor;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseFilter;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseReadRepositoryGateway;
import net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.repository.TenantTermsOfUseRepository;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantTermsOfUseReadGatewayAdapter implements TenantTermsOfUseReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final TenantTermsOfUseRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(TenantTermsOfUseFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<TenantTermsOfUseFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<TenantTermsOfUse> find(TenantTermsOfUseFilter filter) {
    return repository.find(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<TenantTermsOfUse> list(TenantTermsOfUseFilter filter) {
    return repository.list(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public TenantTermsOfUse resolve(TenantTermsOfUseRef reference) {
    return repository.resolve(reference);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<TenantTermsOfUse> retrieve(String uid, Optional<TenantTermsOfUseFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<TenantTermsOfUse> slide(TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor) {
    return repository.slide(filter, cursor);
  }
}
