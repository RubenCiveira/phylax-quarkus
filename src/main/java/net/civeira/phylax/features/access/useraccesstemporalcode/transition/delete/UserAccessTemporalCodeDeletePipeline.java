package net.civeira.phylax.features.access.useraccesstemporalcode.transition.delete;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;
import java.util.function.Supplier;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCode;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAccessTemporalCodeDeletePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<UserAccessTemporalCodeDeleteStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param original
   * @param last
   * @return
   */
  public UserAccessTemporalCode delete(final UserAccessTemporalCode original,
      final Supplier<UserAccessTemporalCode> last) {
    Function<UserAccessTemporalCodeDeleteTransition, UserAccessTemporalCode> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.get();
    };
    List<UserAccessTemporalCodeDeleteStep> reversed =
        new ArrayList<>(steps.stream().toList()).reversed();
    Function<UserAccessTemporalCodeDeleteTransition, UserAccessTemporalCode> pipeline =
        reversed.stream().reduce(finalHandler,
            (next, step) -> transition -> step.delete(transition, next), (f1, f2) -> f1);
    return pipeline
        .apply(UserAccessTemporalCodeDeleteTransition.builder().original(original).build());
  }
}
