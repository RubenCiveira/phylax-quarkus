package net.civeira.phylax.features.access.role;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.role.command.RoleWriteAttributes;
import net.civeira.phylax.features.access.role.event.RoleCreateEvent;
import net.civeira.phylax.features.access.role.event.RoleDeleteEvent;
import net.civeira.phylax.features.access.role.event.RoleEvent;
import net.civeira.phylax.features.access.role.event.RoleUpdateEvent;
import net.civeira.phylax.features.access.role.valueobject.DomainsVO;
import net.civeira.phylax.features.access.role.valueobject.NameVO;
import net.civeira.phylax.features.access.role.valueobject.TenantVO;
import net.civeira.phylax.features.access.role.valueobject.UidVO;
import net.civeira.phylax.features.access.role.valueobject.VersionVO;
import net.civeira.phylax.features.access.tenant.TenantRef;

@AllArgsConstructor
@Getter
@ToString
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class Role implements RoleRef {

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public static Role create(final RoleWriteAttributes attributes) {
    Role instance = new Role(attributes, Optional.empty());
    instance.addEvent(RoleCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public static Set<String> readonlyFields() {
    return Set.of();
  }

  /**
   * El domains de role
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private DomainsVO domains;

  /**
   * The user name to identify on the login screen
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private NameVO name;

  /**
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private List<RoleEvent> recordedEvents = List.of();

  /**
   * Domains without a tenant could be used only for admins
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private TenantVO tenant = TenantVO.nullValue();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UidVO uid;

  /**
   * Campo con el n√∫mero de version de role para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VersionVO version = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private Role(final RoleWriteAttributes attribute, final Optional<Role> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uid = attribute.getUid().orElse(previous.map(Role::getUid).orElse(null));
    this.name = attribute.getName().orElse(previous.map(Role::getName).orElse(null));
    this.tenant =
        attribute.getTenant().orElse(previous.map(Role::getTenant).orElseGet(TenantVO::nullValue));
    this.domains = attribute.getDomains()
        .orElse(previous.map(Role::getDomains).orElseGet(() -> DomainsVO.from(List.of())));
    this.version = attribute.getVersion()
        .orElse(previous.map(Role::getVersion).orElseGet(VersionVO::nullValue));
    if (null == uid) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == name) {
      list.add(new ConstraintFail("REQUIRED", "name", null));
    }
    if (null == domains) {
      list.add(new ConstraintFail("REQUIRED", "domains", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(Role::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Role delete() {
    Role instance = this;
    instance.addEvent(RoleDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public List<Domains> getDomainsValue() {
    return getDomains().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getNameValue() {
    return getName().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getTenantReferenceValue() {
    return getTenant().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<TenantRef> getTenantValue() {
    return getTenant().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  @Override
  public String getUidValue() {
    return this.uid.getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Role nextVersion() {
    return Role.builder().uid(this.uid).name(this.name).tenant(this.tenant).domains(this.domains)
        .version(VersionVO.from(this.version() + 1)).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public Role update(final RoleWriteAttributes attributes) {
    Role instance = new Role(attributes, Optional.of(this));
    instance.addEvent(RoleUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer version() {
    return this.getVersion().getValue().orElse(0);
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final RoleEvent event) {
    List<RoleEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
