package net.civeira.phylax.features.access.scopeassignation.infrastructure.driver.rest;

import java.util.ArrayList;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.create.ScopeAssignationCreateUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.delete.ScopeAssignationDeleteUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.list.ScopeAssignationListUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.retrieve.ScopeAssignationRetrieveUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.update.ScopeAssignationUpdateUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.visibility.ScopeAssignationsVisibility;
import net.civeira.phylax.generated.openapi.api.ScopeAssignationAclApi;
import net.civeira.phylax.generated.openapi.model.CommonAllow;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationAclFields;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationAclGenericAllows;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationAclSpecificAllows;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationGenericAcl;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationSpecificAcl;

@RequiredArgsConstructor
public class ScopeAssignationAclController implements ScopeAssignationAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ScopeAssignationCreateUsecase create;

  /**
   * ScopeAssignation
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ScopeAssignationDeleteUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ScopeAssignationListUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ScopeAssignationRetrieveUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ScopeAssignationUpdateUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ScopeAssignationsVisibility visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response scopeAssignationApiContextualAcl(final String uid) {
    Interaction interaction = currentRequest.interaction();
    ScopeAssignationSpecificAcl response = new ScopeAssignationSpecificAcl();
    response.setAllows(new ScopeAssignationAclSpecificAllows());
    response.setFields(new ScopeAssignationAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response scopeAssignationApiGenericAcl() {
    Interaction interaction = currentRequest.interaction();
    ScopeAssignationGenericAcl response = new ScopeAssignationGenericAcl();
    response.setAllows(new ScopeAssignationAclGenericAllows());
    response.setFields(new ScopeAssignationAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    listAllows(response, interaction);
    createAllows(response, interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void createAllows(final ScopeAssignationGenericAcl response, final Interaction query) {
    Allow detail = create.allow(query);
    response.getAllows()
        .setCreate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final ScopeAssignationGenericAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final ScopeAssignationSpecificAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void fixedFields(final ScopeAssignationAclFields response, final Interaction query) {
    visibility.fieldsToFix(query).forEach(field -> response.getNoEditables().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void hiddenFields(final ScopeAssignationAclFields response, final Interaction query) {
    visibility.fieldsToHide(query).forEach(field -> response.getNoVisibles().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void listAllows(final ScopeAssignationGenericAcl response, final Interaction query) {
    Allow detail = list.allow(query);
    response.getAllows()
        .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final ScopeAssignationGenericAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final ScopeAssignationSpecificAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final ScopeAssignationGenericAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final ScopeAssignationSpecificAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }
}
