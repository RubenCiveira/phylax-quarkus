package net.civeira.phylax.features.access.scopeassignation.valueobject;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.securityscope.SecurityScopeRef;
import net.civeira.phylax.features.access.securityscope.SecurityScopeReference;

/**
 * Value Object representing el security scope de scope assignation of scopeAssignation.
 * <p>
 * This class ensures that the security scope is a non-null {@code String} and encapsulates its
 * validation and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design)
 * principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class SecurityScopeVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param securityScope
   * @return An empty instance
   */
  public static SecurityScopeVO from(final SecurityScopeRef securityScope) {
    return tryFrom(securityScope);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param securityScopeUid
   * @return An empty instance
   */
  public static SecurityScopeVO fromReference(final String securityScopeUid) {
    return from(SecurityScopeReference.of(securityScopeUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param securityScope
   * @return An empty instance
   */
  public static SecurityScopeVO tryFrom(final Object securityScope) {
    ConstraintFailList list = new ConstraintFailList();
    SecurityScopeVO result = tryFrom(securityScope, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param securityScope temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> SecurityScopeVO tryFrom(final Object securityScope,
      final T fails) {
    if (null == securityScope) {
      fails.add(new ConstraintFail("not-null", "securityScope", null, "Cant be null"));
      return null;
    } else if (securityScope instanceof SecurityScopeRef castedSecurityScope) {
      return new SecurityScopeVO(castedSecurityScope);
    } else {
      fails.add(new ConstraintFail("wrong-type", "securityScope", securityScope.getClass(),
          "A SecurityScopeRef type is expected for securityScope"));
      return null;
    }
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param securityScopeUid
   * @return An empty instance
   */
  public static SecurityScopeVO tryFromReference(final String securityScopeUid) {
    return tryFrom(SecurityScopeReference.of(securityScopeUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param securityScopeUid
   * @param fails Error list
   * @return An empty instance
   */
  public static SecurityScopeVO tryFromReference(final String securityScopeUid,
      final ConstraintFailList fails) {
    return tryFrom(SecurityScopeReference.of(securityScopeUid), fails);
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final SecurityScopeRef value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public String getReferenceValue() {
    return value.getUidValue();
  }

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
