package net.civeira.phylax.features.access.securityscope.transition.delete;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;
import java.util.function.Supplier;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.securityscope.SecurityScope;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityScopeDeletePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<SecurityScopeDeleteStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param original
   * @param last
   * @return
   */
  public SecurityScope delete(final SecurityScope original, final Supplier<SecurityScope> last) {
    Function<SecurityScopeDeleteTransition, SecurityScope> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.get();
    };
    List<SecurityScopeDeleteStep> reversed = new ArrayList<>(steps.stream().toList()).reversed();
    Function<SecurityScopeDeleteTransition, SecurityScope> pipeline = reversed.stream().reduce(
        finalHandler, (next, step) -> transition -> step.delete(transition, next), (f1, f2) -> f1);
    return pipeline.apply(SecurityScopeDeleteTransition.builder().original(original).build());
  }
}
