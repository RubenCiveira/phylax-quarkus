package net.civeira.phylax.features.access.role.valueobject;

import java.util.List;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.role.Domains;

/**
 * Value Object representing el domains de role of role.
 * <p>
 * This class ensures that the domains is a non-null {@code String} and encapsulates its validation
 * and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design) principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class DomainsVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param domains
   * @return An empty instance
   */
  public static DomainsVO from(final List<Domains> domains) {
    return tryFrom(domains);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param domains
   * @return An empty instance
   */
  public static DomainsVO tryFrom(final Object domains) {
    ConstraintFailList list = new ConstraintFailList();
    DomainsVO result = tryFrom(domains, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param domains temptative value
   * @param fails Error list
   * @return An empty instance
   */
  @SuppressWarnings("unchecked")
  public static <T extends AbstractFailList> DomainsVO tryFrom(final Object domains,
      final T fails) {
    if (null == domains) {
      return new DomainsVO(List.of());
    } else if (domains instanceof List) {
      return new DomainsVO((List<Domains>) domains);
    } else {
      fails.add(new ConstraintFail("wrong-type", "domains", domains.getClass(),
          "A List<Domains> type is expected for domains"));
      return null;
    }
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final List<Domains> value;

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
