package net.civeira.phylax.features.access.securitydomain.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.securitydomain.domain.event.SecurityDomainCreateEvent;
import net.civeira.phylax.features.access.securitydomain.domain.event.SecurityDomainDeleteEvent;
import net.civeira.phylax.features.access.securitydomain.domain.event.SecurityDomainDisableEvent;
import net.civeira.phylax.features.access.securitydomain.domain.event.SecurityDomainEnableEvent;
import net.civeira.phylax.features.access.securitydomain.domain.event.SecurityDomainEvent;
import net.civeira.phylax.features.access.securitydomain.domain.event.SecurityDomainUpdateEvent;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.LevelVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.ManageAllVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.ReadAllVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.WriteAllVO;

/**
 * A security domain is a set of allow over security scopes. Each security domain mark what an user
 * can do over diferente applications of the stack.
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class SecurityDomain implements SecurityDomainRef {

  /**
   * Prepare a new security domain with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new security domain
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed security domain.
   */
  public static SecurityDomain create(final SecurityDomainChangeSet change)
      throws ConstraintException {
    change.setEnabled(false);
    SecurityDomain instance = new SecurityDomain(change, Optional.empty());
    instance.addEvent(SecurityDomainCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private EnabledVO enabledValue = EnabledVO.nullValue();

  /**
   * The user inherit level, and can view only domain with his level or lower
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private LevelVO levelValue;

  /**
   * Allow to write on every scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private ManageAllVO manageAllValue = ManageAllVO.nullValue();

  /**
   * El name de security domain
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private NameVO nameValue;

  /**
   * Allow to read on every scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private ReadAllVO readAllValue = ReadAllVO.nullValue();

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<SecurityDomainEvent> recordedEvents = List.of();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Campo con el n√∫mero de version de security domain para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * Allow to write on every scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private WriteAllVO writeAllValue = WriteAllVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private SecurityDomain(final SecurityDomainChangeSet attribute,
      final Optional<SecurityDomain> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue =
        attribute.getUid().orElse(previous.map(SecurityDomain::getUidValue).orElse(null));
    this.nameValue =
        attribute.getName().orElse(previous.map(SecurityDomain::getNameValue).orElse(null));
    this.levelValue =
        attribute.getLevel().orElse(previous.map(SecurityDomain::getLevelValue).orElse(null));
    this.readAllValue = attribute.getReadAll()
        .orElse(previous.map(SecurityDomain::getReadAllValue).orElseGet(ReadAllVO::nullValue));
    this.writeAllValue = attribute.getWriteAll()
        .orElse(previous.map(SecurityDomain::getWriteAllValue).orElseGet(WriteAllVO::nullValue));
    this.manageAllValue = attribute.getManageAll()
        .orElse(previous.map(SecurityDomain::getManageAllValue).orElseGet(ManageAllVO::nullValue));
    this.enabledValue = attribute.getEnabled()
        .orElse(previous.map(SecurityDomain::getEnabledValue).orElseGet(EnabledVO::nullValue));
    this.versionValue = attribute.getVersion()
        .orElse(previous.map(SecurityDomain::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == nameValue) {
      list.add(new ConstraintFail("REQUIRED", "name", null));
    }
    if (null == levelValue) {
      list.add(new ConstraintFail("REQUIRED", "level", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(SecurityDomain::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a security domain
   *
   * @autogenerated EntityGenerator
   * @return A instance of security domain ready to be deleted
   */
  public SecurityDomain delete() {
    SecurityDomain instance = this;
    instance.addEvent(SecurityDomainDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply disable on security domain.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of security domain
   */
  public SecurityDomain disable() {
    SecurityDomainChangeSet attr = new SecurityDomainChangeSet();
    attr.setEnabled(false);
    SecurityDomain instance = new SecurityDomain(attr, Optional.of(this));
    instance.addEvent(SecurityDomainDisableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply enable on security domain.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of security domain
   */
  public SecurityDomain enable() {
    SecurityDomainChangeSet attr = new SecurityDomainChangeSet();
    attr.setEnabled(true);
    SecurityDomain instance = new SecurityDomain(attr, Optional.of(this));
    instance.addEvent(SecurityDomainEnableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a security domain
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of security domain
   */
  public SecurityDomain update(final SecurityDomainChangeSet change) throws ConstraintException {
    change.unsetEnabled();
    SecurityDomain instance = new SecurityDomain(change, Optional.of(this));
    instance.addEvent(SecurityDomainUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityDomain withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final SecurityDomainEvent event) {
    List<SecurityDomainEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
