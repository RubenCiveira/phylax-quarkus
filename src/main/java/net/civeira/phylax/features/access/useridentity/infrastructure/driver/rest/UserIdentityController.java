package net.civeira.phylax.features.access.useridentity.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyRef;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyReference;
import net.civeira.phylax.features.access.role.RoleReference;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.TrustedClientReference;
import net.civeira.phylax.features.access.user.UserRef;
import net.civeira.phylax.features.access.user.UserReference;
import net.civeira.phylax.features.access.useridentity.Roles;
import net.civeira.phylax.features.access.useridentity.Roles.RolesBuilder;
import net.civeira.phylax.features.access.useridentity.UserIdentityReference;
import net.civeira.phylax.features.access.useridentity.application.projection.UserIdentityStateProyection;
import net.civeira.phylax.features.access.useridentity.application.request.UserIdentityStateChange;
import net.civeira.phylax.features.access.useridentity.application.usecase.create.UserIdentityCreateUsecase;
import net.civeira.phylax.features.access.useridentity.application.usecase.delete.UserIdentityCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.useridentity.application.usecase.delete.UserIdentityDeleteUsecase;
import net.civeira.phylax.features.access.useridentity.application.usecase.list.UserIdentityListUsecase;
import net.civeira.phylax.features.access.useridentity.application.usecase.retrieve.UserIdentityRetrieveUsecase;
import net.civeira.phylax.features.access.useridentity.application.usecase.update.UserIdentityUpdateUsecase;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityCursor;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityFilter;
import net.civeira.phylax.generated.openapi.api.UserIdentityApi;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.RoleApiRef;
import net.civeira.phylax.generated.openapi.model.RolesApiDto;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;
import net.civeira.phylax.generated.openapi.model.UserApiRef;
import net.civeira.phylax.generated.openapi.model.UserIdentityApiDto;
import net.civeira.phylax.generated.openapi.model.UserIdentityApiDtoList;

@RequiredArgsConstructor
public class UserIdentityController implements UserIdentityApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String RELYING_PARTYS_A_P_P_E_N_D = "&relying-partys=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String TRUSTED_CLIENTS_A_P_P_E_N_D = "&trusted-clients=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String USERS_A_P_P_E_N_D = "&users=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserIdentityCreateUsecase create;

  /**
   * UserIdentity
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserIdentityDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserIdentityListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserIdentityRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UserIdentityUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param users
   * @param relyingPartys
   * @param trustedClients
   * @return
   */
  @Override
  public Response userIdentityApiBatchDelete(final List<String> uids, final String search,
      final List<String> users, final List<String> relyingPartys,
      final List<String> trustedClients) {
    UserIdentityFilter.UserIdentityFilterBuilder filterBuilder = UserIdentityFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.users(users.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    UserIdentityFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response userIdentityApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(UserIdentityCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param userIdentity
   * @return
   */
  @Override
  @Transactional
  public Response userIdentityApiCreate(UserIdentityApiDto userIdentity) {
    UserIdentityStateProyection created =
        create.create(currentRequest.interaction(), toDomainModel(userIdentity));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response userIdentityApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), UserIdentityReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param users
   * @param relyingPartys
   * @param trustedClients
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response userIdentityApiList(final List<String> uids, final String search,
      final List<String> users, final List<String> relyingPartys, final List<String> trustedClients,
      final Integer limit, final String sinceUid) {
    UserIdentityFilter.UserIdentityFilterBuilder filterBuilder = UserIdentityFilter.builder();
    UserIdentityCursor.UserIdentityCursorBuilder cursorBuilder = UserIdentityCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.users(users.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    UserIdentityFilter filter = filterBuilder.build();
    UserIdentityCursor cursor = cursorBuilder.build();
    List<UserIdentityStateProyection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "user-identity-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response userIdentityApiRetrieve(final String uid) {
    UserIdentityStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), UserIdentityReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param userIdentity
   * @return
   */
  @Override
  @Transactional
  public Response userIdentityApiUpdate(final String uid, final UserIdentityApiDto userIdentity) {
    UserIdentityStateProyection updated = update.update(currentRequest.interaction(),
        UserIdentityReference.of(uid), toDomainModel(userIdentity));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private UserIdentityApiDto toApiModel(UserIdentityStateProyection dto) {
    UserIdentityApiDto userIdentityApiDto = new UserIdentityApiDto();
    userIdentityApiDto.setUid(dto.getUid().orElse(null));
    userIdentityApiDto
        .setUser(new UserApiRef().$ref(dto.getUser().map(UserRef::getUidValue).orElse(null)));
    userIdentityApiDto.setRelyingParty(new RelyingPartyApiRef()
        .$ref(dto.getRelyingParty().map(RelyingPartyRef::getUidValue).orElse(null)));
    userIdentityApiDto.setTrustedClient(new TrustedClientApiRef()
        .$ref(dto.getTrustedClient().map(TrustedClientRef::getUidValue).orElse(null)));
    userIdentityApiDto.setRoles(dto.getRoles()
        .map(rolesList -> rolesList.stream().map(this::toApiModelRoles).toList()).orElse(null));
    userIdentityApiDto.setVersion(dto.getVersion().orElse(null));
    return userIdentityApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private RolesApiDto toApiModelRoles(Roles dto) {
    RolesApiDto rolesApiDto = new RolesApiDto();
    rolesApiDto.setUid(dto.getUidValue());
    rolesApiDto.setRole(new RoleApiRef().$ref(dto.getRoleReferenceValue()));
    rolesApiDto.setVersion(dto.getVersionValue().orElse(null));
    return rolesApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param userIdentityApiDto
   * @return
   */
  private UserIdentityStateChange toDomainModel(UserIdentityApiDto userIdentityApiDto) {
    UserIdentityStateChange dto = new UserIdentityStateChange();
    if (null != userIdentityApiDto.getUid()) {
      dto.setUid(userIdentityApiDto.getUid());
    }
    if (null != userIdentityApiDto.getUser()) {
      dto.setUser(UserReference.of(userIdentityApiDto.getUser().get$Ref()));
    }
    if (null != userIdentityApiDto.getRelyingParty()) {
      dto.setRelyingParty(RelyingPartyReference.of(userIdentityApiDto.getRelyingParty().get$Ref()));
    }
    if (null != userIdentityApiDto.getTrustedClient()) {
      dto.setTrustedClient(
          TrustedClientReference.of(userIdentityApiDto.getTrustedClient().get$Ref()));
    }
    if (null != userIdentityApiDto.getRoles()) {
      dto.setRoles(userIdentityApiDto.getRoles().stream().map(this::toDomainModelRoles).toList());
    }
    if (null != userIdentityApiDto.getVersion()) {
      dto.setVersion(userIdentityApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param rolesApiDto
   * @return
   */
  private Roles toDomainModelRoles(RolesApiDto rolesApiDto) {
    RolesBuilder builder = Roles.builder();
    if (null != rolesApiDto.getUid()) {
      builder = builder.uid(rolesApiDto.getUid());
    }
    if (null != rolesApiDto.getRole()) {
      builder = builder.role(RoleReference.of(rolesApiDto.getRole().get$Ref()));
    }
    if (null != rolesApiDto.getVersion()) {
      builder = builder.version(rolesApiDto.getVersion());
    }
    return builder.build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param userIdentitys
   * @param filter
   * @param cursor
   * @return
   */
  private UserIdentityApiDtoList toListApiModel(List<UserIdentityStateProyection> userIdentitys,
      UserIdentityFilter filter, UserIdentityCursor cursor) {
    Optional<UserIdentityStateProyection> last = userIdentitys.isEmpty() ? Optional.empty()
        : Optional.of(userIdentitys.get(userIdentitys.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    if (!filter.getUsers().isEmpty()) {
      String usersValue =
          URLEncoder.encode(String.join(",", filter.getUsers()), StandardCharsets.UTF_8);
      self.append(USERS_A_P_P_E_N_D + usersValue);
      next.append(USERS_A_P_P_E_N_D + usersValue);
      first.append(USERS_A_P_P_E_N_D + usersValue);
    }
    if (!filter.getRelyingPartys().isEmpty()) {
      String relyingPartysValue =
          URLEncoder.encode(String.join(",", filter.getRelyingPartys()), StandardCharsets.UTF_8);
      self.append(RELYING_PARTYS_A_P_P_E_N_D + relyingPartysValue);
      next.append(RELYING_PARTYS_A_P_P_E_N_D + relyingPartysValue);
      first.append(RELYING_PARTYS_A_P_P_E_N_D + relyingPartysValue);
    }
    if (!filter.getTrustedClients().isEmpty()) {
      String trustedClientsValue =
          URLEncoder.encode(String.join(",", filter.getTrustedClients()), StandardCharsets.UTF_8);
      self.append(TRUSTED_CLIENTS_A_P_P_E_N_D + trustedClientsValue);
      next.append(TRUSTED_CLIENTS_A_P_P_E_N_D + trustedClientsValue);
      first.append(TRUSTED_CLIENTS_A_P_P_E_N_D + trustedClientsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> lastDto.getUid().ifPresent(
        uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8))));
    return new UserIdentityApiDtoList().items(userIdentitys.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }
}
