package net.civeira.phylax.features.access.securitydomain.gateway;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.securitydomain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainRef;
import net.civeira.phylax.features.access.securitydomain.query.SecurityDomainCursor;
import net.civeira.phylax.features.access.securitydomain.query.SecurityDomainFilter;

public interface SecurityDomainWriteRepositoryGateway {

  /**
   * The items that would be returned by the query
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long countForUpdate(SecurityDomainFilter filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @param verifier a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  SecurityDomain create(SecurityDomain entity, Predicate<SecurityDomain> verifier);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  SecurityDomain create(SecurityDomain entity);

  /**
   * Delete an existing record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   */
  void delete(SecurityDomain entity);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  SecurityDomain enrichForUpdate(SecurityDomainRef reference);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean existsForUpdate(String uid, Optional<SecurityDomainFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<SecurityDomain> findForUpdate(SecurityDomainFilter filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<SecurityDomain> listForUpdate(SecurityDomainFilter filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<SecurityDomain> retrieveForUpdate(String uid, Optional<SecurityDomainFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<SecurityDomain> slideForUpdate(SecurityDomainFilter filter, SecurityDomainCursor cursor);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  SecurityDomain update(SecurityDomainRef reference, SecurityDomain entity);
}
