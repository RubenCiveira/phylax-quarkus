package net.civeira.phylax.features.access.securitydomain.application.usecase.update;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.securitydomain.application.visibility.SecurityDomainsVisibility;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainChangeSet;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainRef;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainCacheGateway;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainUpdateUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final SecurityDomainCacheGateway cache;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final SecurityDomainWriteRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<SecurityDomainUpdateAllowDecision> updateAllowEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<SecurityDomainUpdateCheck> updateCheckEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<SecurityDomainUpdateEnrich> updateEnrichEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final SecurityDomainsVisibility visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final SecurityDomainRef reference) {
    SecurityDomainUpdateAllowDecision base = SecurityDomainUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    SecurityDomainUpdateAllowDecision base = SecurityDomainUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @param input
   * @return The slide with some values
   */
  public SecurityDomainUpdateProjection update(final Interaction query,
      final SecurityDomainRef reference, final SecurityDomainUpdateInput input) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    SecurityDomain original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    SecurityDomainUpdateInput filled = SecurityDomainUpdateInput
        .fromChangeSet(visibility.copyWithFixed(query, input.toChangeSet()));
    SecurityDomainUpdateCheck check = SecurityDomainUpdateCheck.builder().input(filled)
        .interaction(query).reference(reference).build();
    updateCheckEmitter.fire(check);
    SecurityDomainUpdateEnrich proposal = SecurityDomainUpdateEnrich.builder().input(filled)
        .interaction(query).reference(reference).build();
    updateEnrichEmitter.fire(proposal);
    SecurityDomainChangeSet dto = proposal.getInput().toChangeSet();
    SecurityDomain saved = gateway.update(original, original.update(dto));
    cache.update(saved);
    return SecurityDomainUpdateProjection.from(visibility.copyWithHidden(query, saved));
  }
}
