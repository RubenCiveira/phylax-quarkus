package net.civeira.phylax.features.access.tenantconfig.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.list.TenantConfigListCursor;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.list.TenantConfigListFilter;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.list.TenantConfigListProjection;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.list.TenantConfigListUsecase;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;
import net.civeira.phylax.generated.openapi.model.TenantConfigApiDto;
import net.civeira.phylax.generated.openapi.model.TenantConfigApiDtoList;

@RequiredArgsConstructor
@RequestScoped
public class TenantConfigListController {

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String LIMIT_APPEND = "&limit=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SINCE_APPEND = "&since-uid=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String TENANTS_APPEND = "&tenants=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String TENANT_APPEND = "&tenant=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * TenantConfig
   *
   * @autogenerated ListControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ListControllerGenerator
   */
  private final TenantConfigListUsecase list;

  /**
   * @autogenerated ListControllerGenerator
   * @param uids
   * @param search
   * @param tenant
   * @param tenants
   * @param limit
   * @param sinceUid
   * @return
   */
  public Response tenantConfigApiList(final List<String> uids, final String search,
      final String tenant, final List<String> tenants, final Integer limit, final String sinceUid) {
    TenantConfigListFilter.TenantConfigListFilterBuilder filterBuilder =
        TenantConfigListFilter.builder();
    TenantConfigListCursor.TenantConfigListCursorBuilder cursorBuilder =
        TenantConfigListCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    if (null != tenant) {
      filterBuilder = filterBuilder.tenant(TenantReference.of(tenant));
    }
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    TenantConfigListFilter filter = filterBuilder.build();
    TenantConfigListCursor cursor = cursorBuilder.build();
    List<TenantConfigListProjection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "tenant-config-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param dto
   * @return
   */
  private TenantConfigApiDto toApiModel(TenantConfigListProjection dto) {
    TenantConfigApiDto tenantConfigApiDto = new TenantConfigApiDto();
    tenantConfigApiDto.setUid(dto.getUid());
    tenantConfigApiDto.setTenant(new TenantApiRef().$ref(dto.getTenantReference()));
    tenantConfigApiDto.setInnerLabel(dto.getInnerLabel());
    tenantConfigApiDto.setForceMfa(dto.getForceMfa());
    tenantConfigApiDto.setVersion(dto.getVersion());
    return tenantConfigApiDto;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param tenantConfigs
   * @param filter
   * @param cursor
   * @return
   */
  private TenantConfigApiDtoList toListApiModel(List<TenantConfigListProjection> tenantConfigs,
      TenantConfigListFilter filter, TenantConfigListCursor cursor) {
    Optional<TenantConfigListProjection> last = tenantConfigs.isEmpty() ? Optional.empty()
        : Optional.of(tenantConfigs.get(tenantConfigs.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getTenant().ifPresent(filterTenant -> {
      String tenantValue =
          URLEncoder.encode(String.valueOf(filterTenant.getUid()), StandardCharsets.UTF_8);
      self.append(TENANT_APPEND + tenantValue);
      next.append(TENANT_APPEND + tenantValue);
      first.append(TENANT_APPEND + tenantValue);
    });
    if (!filter.getTenants().isEmpty()) {
      String tenantsValue =
          URLEncoder.encode(String.join(",", filter.getTenants()), StandardCharsets.UTF_8);
      self.append(TENANTS_APPEND + tenantsValue);
      next.append(TENANTS_APPEND + tenantsValue);
      first.append(TENANTS_APPEND + tenantsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(SINCE_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> {
      next.append(SINCE_APPEND + URLEncoder.encode(lastDto.getUid(), StandardCharsets.UTF_8));
    });
    return new TenantConfigApiDtoList().items(tenantConfigs.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }
}
