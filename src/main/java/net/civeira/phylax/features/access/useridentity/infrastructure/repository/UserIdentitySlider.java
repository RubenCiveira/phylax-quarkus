package net.civeira.phylax.features.access.useridentity.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useridentity.UserIdentity;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityCursor;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityFilter;

class UserIdentitySlider extends Slider<UserIdentity> {

  /**
   * @autogenerated SlideGenerator
   */
  private final UserIdentityCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final UserIdentityFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<UserIdentityFilter, UserIdentityCursor, Iterator<UserIdentity>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  UserIdentitySlider(final Iterator<UserIdentity> multi, final int limit,
      final BiFunction<UserIdentityFilter, UserIdentityCursor, Iterator<UserIdentity>> gateway,
      final UserIdentityFilter filter, final UserIdentityCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param userIdentitys
   * @param limit
   * @return
   */
  @Override
  public Iterator<UserIdentity> next(List<UserIdentity> userIdentitys, int limit) {
    UserIdentity last = userIdentitys.get(userIdentitys.size() - 1);
    UserIdentityCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
