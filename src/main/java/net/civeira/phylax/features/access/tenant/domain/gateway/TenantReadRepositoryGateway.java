package net.civeira.phylax.features.access.tenant.domain.gateway;

import java.util.List;
import java.util.Optional;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingParty;
import net.civeira.phylax.features.access.tenant.domain.RelingParties;
import net.civeira.phylax.features.access.tenant.domain.Tenant;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClient;

public interface TenantReadRepositoryGateway {

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long count(TenantFilter filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean exists(String uid, Optional<TenantFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<Tenant> find(TenantFilter filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<Tenant> list(TenantFilter filter);

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Tenant resolve(TenantRef reference);

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param childs
   * @return Retrieve one single value
   */
  List<RelyingParty> resolveRelingParties(List<RelingParties> childs);

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param childs
   * @return Retrieve one single value
   */
  List<TrustedClient> resolveTrustedClients(List<TrustedClients> childs);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<Tenant> retrieve(String uid, Optional<TenantFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<Tenant> slide(TenantFilter filter, TenantCursor cursor);
}
