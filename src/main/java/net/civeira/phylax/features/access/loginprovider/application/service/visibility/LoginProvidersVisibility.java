package net.civeira.phylax.features.access.loginprovider.application.service.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.loginprovider.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.LoginProviderFacade;
import net.civeira.phylax.features.access.loginprovider.LoginProviderRef;
import net.civeira.phylax.features.access.loginprovider.application.projection.LoginProviderStateProyection;
import net.civeira.phylax.features.access.loginprovider.application.request.LoginProviderStateChange;
import net.civeira.phylax.features.access.loginprovider.gateway.LoginProviderCacheGateway;
import net.civeira.phylax.features.access.loginprovider.gateway.LoginProviderCached;
import net.civeira.phylax.features.access.loginprovider.gateway.LoginProviderReadRepositoryGateway;
import net.civeira.phylax.features.access.loginprovider.gateway.LoginProviderWriteRepositoryGateway;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderCursor;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderFilter;
import net.civeira.phylax.features.access.loginprovider.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenant.application.service.visibility.TenantsVisibility;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProvidersVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final LoginProviderFacade aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final LoginProviderCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderFilterProposal> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderFixedFieldsProposal> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderVisibleContentProposal> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderHiddenFieldsProposal> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final LoginProviderReadRepositoryGateway loginProviderReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final LoginProviderWriteRepositoryGateway loginProviderWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderPresetProposal> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantsVisibility tenantsVisibility;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, LoginProviderFilter.builder().uids(uids).build(),
        LoginProviderCursor.builder().build()).size();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public LoginProviderStateChange copyWithFixed(Interaction prev, LoginProviderStateChange source,
      LoginProvider original) {
    LoginProviderStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    LoginProviderPresetProposal proposal = LoginProviderPresetProposal.builder().dto(withReferences)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public LoginProviderStateChange copyWithFixed(Interaction prev, LoginProviderStateChange source) {
    LoginProviderStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    LoginProviderPresetProposal proposal =
        LoginProviderPresetProposal.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param loginProvider
   * @return The input dto with hidden values
   */
  public LoginProviderStateProyection copyWithHidden(Interaction prev,
      LoginProvider loginProvider) {
    LoginProviderStateProyection target = new LoginProviderStateProyection(loginProvider);
    fieldsToHide(prev, loginProvider).forEach(target::unset);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, LoginProviderFilter filter) {
    return loginProviderReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.readonlyFields());
    LoginProviderFixedFieldsProposal proposal =
        LoginProviderFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param loginProvider
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, LoginProviderRef loginProvider) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, loginProvider));
    fields.addAll(aggregate.readonlyFields());
    LoginProviderFixedFieldsProposal proposal = LoginProviderFixedFieldsProposal.builder()
        .fields(fields).loginProvider(loginProvider).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    LoginProviderHiddenFieldsProposal proposal =
        LoginProviderHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param loginProvider
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, LoginProviderRef loginProvider) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    LoginProviderHiddenFieldsProposal proposal = LoginProviderHiddenFieldsProposal.builder()
        .fields(fields).loginProvider(loginProvider).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public LoginProviderCached listCachedVisibles(Interaction prev, LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    LoginProviderFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<LoginProvider> listVisibles(Interaction prev, LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<LoginProvider> listVisiblesForUpdate(Interaction prev, LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public LoginProviderCached retrieveCachedVisible(Interaction prev, String uid) {
    LoginProviderCursor cursor = LoginProviderCursor.builder().limit(1).build();
    LoginProviderFilter visibleFilter =
        applyPreVisibilityFilter(prev, LoginProviderFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<LoginProvider> list =
          retrieveVisible(prev, uid).<List<LoginProvider>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<LoginProvider> retrieveVisible(Interaction prev, String uid) {
    LoginProviderFilter filter =
        applyPreVisibilityFilter(prev, LoginProviderFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<LoginProvider> retrieveVisibleForUpdate(Interaction prev, String uid) {
    LoginProviderFilter filter =
        applyPreVisibilityFilter(prev, LoginProviderFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private LoginProviderFilter applyPreVisibilityFilter(Interaction prev,
      LoginProviderFilter filter) {
    LoginProviderFilterProposal proposal =
        LoginProviderFilterProposal.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    return proposal.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param loginProviderRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, LoginProvider loginProviderRef) {
    LoginProviderVisibleContentProposal proposal = LoginProviderVisibleContentProposal.builder()
        .visible(true).entity(loginProviderRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<LoginProvider> queryItem(Interaction prev, String uid,
      LoginProviderFilter filter) {
    return loginProviderReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<LoginProvider> queryItemForUpdate(Interaction prev, String uid,
      LoginProviderFilter filter) {
    return loginProviderWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<LoginProvider> queryItems(Interaction prev, LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    List<LoginProvider> list = new ArrayList<>();
    Iterator<LoginProvider> slide = loginProviderReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<LoginProvider> queryItemsForUpdate(Interaction prev, LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    List<LoginProvider> list = new ArrayList<>();
    Iterator<LoginProvider> slide = loginProviderWriteRepositoryGateway
        .slideForUpdate(filter, cursor).slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private LoginProviderStateChange visiblesReferences(Interaction prev,
      LoginProviderStateChange source) {
    source.getTenant().map(TenantVO::getReferenceValue).ifPresent(tenant -> {
      boolean visible = tenantsVisibility.checkVisibility(prev, tenant);
      if (!visible) {
        throw new NotFoundException("No tenant - " + tenant);
      }
    });
    return source;
  }
}
