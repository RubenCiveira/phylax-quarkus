package net.civeira.phylax.features.access.trustedclient.application.usecase.delete;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.trustedclient.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.TrustedClientFacade;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.application.service.visibility.TrustedClientsVisibility;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientCacheGateway;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientWriteRepositoryGateway;
import net.civeira.phylax.features.access.trustedclient.query.TrustedClientFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class TrustedClientDeleteUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final TrustedClientCacheGateway cache;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<TrustedClientAllowDeleteProposal> deleteAllowEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<TrustedClientDeleteProposal> deleteProposalEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<TrustedClientDeleteEvent> deletedEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final TrustedClientFacade facade;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final TrustedClientWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final TrustedClientsVisibility visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final TrustedClientRef reference) {
    TrustedClientAllowDeleteProposal base = TrustedClientAllowDeleteProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TrustedClientAllowDeleteProposal base = TrustedClientAllowDeleteProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final TrustedClientCheckBatchDeleteStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   */
  public void delete(final Interaction query, final TrustedClientRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TrustedClient original = visibility.retrieveVisibleForUpdate(query, reference.getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    delete(query, original);
    flush();
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator delete(final Interaction query, final TrustedClientFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TrustedClientDeleteAllInBatchCommand command =
        TrustedClientDeleteAllInBatchCommand.builder().interaction(query).filter(filter).build();
    return batch.start(query.getActor().getName().orElse("-"), Duration.ofHours(6), ExecutorPlan
        .<TrustedClientDeleteAllInBatchCommand>builder().params(command).name("delete-color")
        .executor(
            ExecutorByDeferSteps.<TrustedClient, TrustedClient, TrustedClientDeleteAllInBatchCommand, TrustedClientsInBatchExecutor.TrustedClientPaginableBatch>builder()
                .initializer(TrustedClientsInBatchExecutor.class)
                .counter(TrustedClientsInBatchExecutor.class)
                .descriptor(TrustedClientsInBatchExecutor.class)
                .reader(TrustedClientsInBatchExecutor.class)
                .processor(TrustedClientsInBatchExecutor.class)
                .writer(TrustedClientsInBatchExecutor.class)
                .finalizer(TrustedClientsInBatchExecutor.class).build())
        .build());
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param interaction
   * @param original
   */
  void delete(final Interaction interaction, final TrustedClient original) {
    TrustedClient clean = facade.delete(original);
    TrustedClientDeleteProposal proposal =
        TrustedClientDeleteProposal.builder().entity(clean).interaction(interaction).build();
    deleteProposalEmitter.fire(proposal);
    TrustedClient result = proposal.getEntity();
    gateway.delete(result);
    TrustedClientDeleteEvent event =
        TrustedClientDeleteEvent.builder().payload(result).interaction(interaction).build();
    deletedEmitter.fire(event);
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
