package net.civeira.phylax.features.access.securityscope.application.usecase.retrieve;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.securityscope.SecurityScopeRef;
import net.civeira.phylax.features.access.securityscope.application.projection.SecurityScopeStateProyection;
import net.civeira.phylax.features.access.securityscope.application.service.visibility.SecurityScopesVisibility;
import net.civeira.phylax.features.access.securityscope.gateway.SecurityScopeCached;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityScopeRetrieveUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<SecurityScopeAllowRetrieveProposal> retrieveAllowEmitter;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final SecurityScopesVisibility visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final SecurityScopeRef reference) {
    SecurityScopeAllowRetrieveProposal base = SecurityScopeAllowRetrieveProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    retrieveAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    SecurityScopeAllowRetrieveProposal base = SecurityScopeAllowRetrieveProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    retrieveAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return The slide with some values
   */
  public SecurityScopeStateProyection retrieve(final Interaction query,
      final SecurityScopeRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    SecurityScopeCached retrieveCachedVisible =
        visibility.retrieveCachedVisible(query, reference.getUidValue());
    return retrieveCachedVisible.first().map(first -> visibility.copyWithHidden(query, first))
        .orElseThrow(() -> new NotFoundException(""));
  }
}
