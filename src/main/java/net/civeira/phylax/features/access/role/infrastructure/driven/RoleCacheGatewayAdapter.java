package net.civeira.phylax.features.access.role.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.role.Role;
import net.civeira.phylax.features.access.role.gateway.RoleCacheGateway;
import net.civeira.phylax.features.access.role.gateway.RoleCached;
import net.civeira.phylax.features.access.role.query.RoleCursor;
import net.civeira.phylax.features.access.role.query.RoleFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class RoleCacheGatewayAdapter implements RoleCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("role")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param role
   */
  @Override
  public void remove(final Role role) {
    log.trace("Invalidating role cache due to the removal of {}", role);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<RoleCached> retrieve(final RoleFilter filter, final RoleCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at role cache for the key {}", key);
    return cache.<String, RoleCached>get(key, k -> null).map(cached -> Optional.ofNullable(cached))
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param roles
   * @return
   */
  public RoleCached store(final RoleFilter filter, final RoleCursor cursor,
      final List<Role> roles) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache
        .<String, RoleCached>get(key,
            k -> RoleCached.builder().since(OffsetDateTime.now()).value(roles).build())
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param role
   */
  @Override
  public void update(final Role role) {
    log.trace("Invalidating role cache due to the update of {}", role);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final RoleFilter filter, final RoleCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
