package net.civeira.phylax.features.access.user.rule;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.user.User;
import net.civeira.phylax.features.access.user.UserMetadataProvider;
import net.civeira.phylax.features.access.user.transition.UserChangeProposal;
import net.civeira.phylax.features.access.user.transition.create.UserCreateStep;
import net.civeira.phylax.features.access.user.transition.create.UserCreateTransition;
import net.civeira.phylax.features.access.user.transition.update.UserUpdateStep;
import net.civeira.phylax.features.access.user.transition.update.UserUpdateTransition;
import net.civeira.phylax.features.access.user.valueobject.BlockedUntilVO;

@ApplicationScoped
@RequiredArgsConstructor
public class PreserveBlockedUntil implements UserMetadataProvider, UserCreateStep, UserUpdateStep {

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveBlockedUntil
   * @return
   */
  @Override
  public User create(final UserCreateTransition transition,
      final Function<UserCreateTransition, User> next) {
    return next.apply(transition.map(calculate(transition.getData(), Optional.empty())));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @return
   */
  @Override
  public Set<String> readonlyFields() {
    return Set.of("blockedUntil");
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveBlockedUntil
   * @return
   */
  @Override
  public User update(final UserUpdateTransition transition,
      final Function<UserUpdateTransition, User> next) {
    return next.apply(
        transition.map(calculate(transition.getData(), Optional.of(transition.getOriginal()))));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param attributes
   * @param original
   * @return
   */
  private UserChangeProposal calculate(final UserChangeProposal attributes,
      final Optional<User> original) {
    return attributes.setBlockedUntil(original.map(User::getBlockedUntil)
        .flatMap(BlockedUntilVO::getValue).orElseGet(() -> null));
  }
}
