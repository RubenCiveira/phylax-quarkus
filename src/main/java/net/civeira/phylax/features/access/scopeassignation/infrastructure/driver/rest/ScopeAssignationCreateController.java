package net.civeira.phylax.features.access.scopeassignation.infrastructure.driver.rest;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.create.ScopeAssignationCreateInput;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.create.ScopeAssignationCreateProjection;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.create.ScopeAssignationCreateUsecase;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeReference;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationApiDto;
import net.civeira.phylax.generated.openapi.model.SecurityDomainApiRef;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiRef;

@RequiredArgsConstructor
@RequestScoped
public class ScopeAssignationCreateController {

  /**
   * @autogenerated CreateControllerGenerator
   */
  private final ScopeAssignationCreateUsecase create;

  /**
   * @autogenerated CreateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated CreateControllerGenerator
   * @param scopeAssignation
   * @return
   */
  @Transactional
  public Response scopeAssignationApiCreate(ScopeAssignationApiDto scopeAssignation) {
    ScopeAssignationCreateProjection created =
        create.create(currentRequest.interaction(), toDomainModel(scopeAssignation));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param dto
   * @return
   */
  private ScopeAssignationApiDto toApiModel(ScopeAssignationCreateProjection dto) {
    ScopeAssignationApiDto scopeAssignationApiDto = new ScopeAssignationApiDto();
    scopeAssignationApiDto.setUid(dto.getUid());
    scopeAssignationApiDto
        .setSecurityDomain(new SecurityDomainApiRef().$ref(dto.getSecurityDomainReference()));
    scopeAssignationApiDto
        .setSecurityScope(new SecurityScopeApiRef().$ref(dto.getSecurityScopeReference()));
    scopeAssignationApiDto.setVersion(dto.getVersion());
    return scopeAssignationApiDto;
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param scopeAssignationApiDto
   * @return
   */
  private ScopeAssignationCreateInput toDomainModel(ScopeAssignationApiDto scopeAssignationApiDto) {
    ScopeAssignationCreateInput dto = new ScopeAssignationCreateInput();
    if (null != scopeAssignationApiDto.getUid()) {
      dto.setUid(scopeAssignationApiDto.getUid());
    }
    if (null != scopeAssignationApiDto.getSecurityDomain()) {
      dto.setSecurityDomain(
          SecurityDomainReference.of(scopeAssignationApiDto.getSecurityDomain().get$Ref()));
    }
    if (null != scopeAssignationApiDto.getSecurityScope()) {
      dto.setSecurityScope(
          SecurityScopeReference.of(scopeAssignationApiDto.getSecurityScope().get$Ref()));
    }
    if (null != scopeAssignationApiDto.getVersion()) {
      dto.setVersion(scopeAssignationApiDto.getVersion());
    }
    return dto;
  }
}
