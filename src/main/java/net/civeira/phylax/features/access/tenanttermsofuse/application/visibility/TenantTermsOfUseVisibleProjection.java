package net.civeira.phylax.features.access.tenanttermsofuse.application.visibility;

import java.time.OffsetDateTime;
import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseReference;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.ActivationDateVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.AttachedVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TextVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold tenant terms of use attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TenantTermsOfUseVisibleProjection {

  /**
   * Date when the Terms of Use become active.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<ActivationDateVO> activationDate = Optional.empty();

  /**
   * An optional file attachment (e.g., PDF or signed document).
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<AttachedVO> attached = Optional.empty();

  /**
   * The tenant this Terms of Use document belongs to.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * The content of the Terms of Use document.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TextVO> text = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant terms of use para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public TenantTermsOfUseVisibleProjection(final TenantTermsOfUse entity) {
    uid = Optional.of(entity.getUidValue());
    tenant = Optional.of(entity.getTenantValue());
    text = Optional.of(entity.getTextValue());
    attached = Optional.of(entity.getAttachedValue());
    activationDate = Optional.of(entity.getActivationDateValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for tenant terms of use with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public TenantTermsOfUseReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(TenantTermsOfUseReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in ActivationDate
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for ActivationDate, otherwise the value for
   *         ActivationDate
   */
  public Optional<ActivationDateVO> getActivationDate() {
    return activationDate;
  }

  /**
   * Inform for a possible change propolsal in Attached
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Attached, otherwise the value for Attached
   */
  public Optional<AttachedVO> getAttached() {
    return attached;
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * Inform for a possible change propolsal in Text
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Text, otherwise the value for Text
   */
  public Optional<TextVO> getText() {
    return text;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for ActivationDate to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantTermsOfUseVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseVisibleProjection setActivationDate(final OffsetDateTime value) {
    this.activationDate = Optional.of(ActivationDateVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Attached to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantTermsOfUseVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseVisibleProjection setAttached(final String value) {
    this.attached = Optional.of(AttachedVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Tenant to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantTermsOfUseVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseVisibleProjection setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Text to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantTermsOfUseVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseVisibleProjection setText(final String value) {
    this.text = Optional.of(TextVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantTermsOfUseVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantTermsOfUseVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("text".equals(field)) {
      this.unsetText();
    }
    if ("attached".equals(field)) {
      this.unsetAttached();
    }
    if ("activationDate".equals(field)) {
      this.unsetActivationDate();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for ActivationDate
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantTermsOfUseVisibleProjection unsetActivationDate() {
    this.activationDate = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Attached
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantTermsOfUseVisibleProjection unsetAttached() {
    this.attached = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantTermsOfUseVisibleProjection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Text
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantTermsOfUseVisibleProjection unsetText() {
    this.text = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantTermsOfUseVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantTermsOfUseVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
