package net.civeira.phylax.features.access.securitydomain.application.usecase.delete;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.securitydomain.application.visibility.SecurityDomainVisibilityFilter;
import net.civeira.phylax.features.access.securitydomain.application.visibility.SecurityDomainsVisibility;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainRef;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainCacheGateway;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainDeleteUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final SecurityDomainCacheGateway cache;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<SecurityDomainDeleteAllowDecision> deleteAllowEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<SecurityDomainDeleteCheck> deleteCheckEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final SecurityDomainWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final SecurityDomainsVisibility visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final SecurityDomainRef reference) {
    SecurityDomainDeleteAllowDecision base = SecurityDomainDeleteAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    SecurityDomainDeleteAllowDecision base = SecurityDomainDeleteAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final SecurityDomainCheckBatchDeleteStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   */
  public void delete(final Interaction query, final SecurityDomainRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    SecurityDomain original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    delete(query, original);
    flush();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator delete(final Interaction query,
      final SecurityDomainDeleteFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    SecurityDomainVisibilityFilter filterOnVisibles =
        SecurityDomainVisibilityFilter.builder().uid(filter.getUid().orElse(null))
            .uids(filter.getUids().stream().toList()).search(filter.getSearch().orElse(null))
            .enabled(filter.getEnabled().orElse(null)).name(filter.getName().orElse(null)).build();
    SecurityDomainDeleteAllInBatchCommand command = SecurityDomainDeleteAllInBatchCommand.builder()
        .interaction(query).filter(filterOnVisibles).build();
    return batch.start(query.getActor().getName().orElse("-"), Duration.ofHours(6), ExecutorPlan
        .<SecurityDomainDeleteAllInBatchCommand>builder().params(command).name("delete-color")
        .executor(
            ExecutorByDeferSteps.<SecurityDomain, SecurityDomain, SecurityDomainDeleteAllInBatchCommand, SecurityDomainsInBatchExecutor.SecurityDomainPaginableBatch>builder()
                .initializer(SecurityDomainsInBatchExecutor.class)
                .counter(SecurityDomainsInBatchExecutor.class)
                .descriptor(SecurityDomainsInBatchExecutor.class)
                .reader(SecurityDomainsInBatchExecutor.class)
                .processor(SecurityDomainsInBatchExecutor.class)
                .writer(SecurityDomainsInBatchExecutor.class)
                .finalizer(SecurityDomainsInBatchExecutor.class).build())
        .build());
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param interaction
   * @param original
   */
  void delete(final Interaction interaction, final SecurityDomain original) {
    SecurityDomainDeleteCheck proposal =
        SecurityDomainDeleteCheck.builder().reference(original).interaction(interaction).build();
    deleteCheckEmitter.fire(proposal);
    SecurityDomain clean = original.delete();
    gateway.delete(clean);
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
