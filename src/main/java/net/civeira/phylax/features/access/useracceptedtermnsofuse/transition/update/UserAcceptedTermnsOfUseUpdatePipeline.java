package net.civeira.phylax.features.access.useracceptedtermnsofuse.transition.update;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.UserAcceptedTermnsOfUse;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.command.UserAcceptedTermnsOfUseWriteAttributes;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.transition.UserAcceptedTermnsOfUseChangeProposal;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAcceptedTermnsOfUseUpdatePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<UserAcceptedTermnsOfUseUpdateStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param attributes
   * @param original
   * @param last
   * @return
   */
  public UserAcceptedTermnsOfUse update(final UserAcceptedTermnsOfUseWriteAttributes attributes,
      final UserAcceptedTermnsOfUse original,
      final Function<UserAcceptedTermnsOfUseChangeProposal, UserAcceptedTermnsOfUse> last) {
    Function<UserAcceptedTermnsOfUseUpdateTransition, UserAcceptedTermnsOfUse> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.apply(t.getData());
    };
    List<UserAcceptedTermnsOfUseUpdateStep> reversed =
        new ArrayList<>(steps.stream().toList()).reversed();
    Function<UserAcceptedTermnsOfUseUpdateTransition, UserAcceptedTermnsOfUse> pipeline =
        reversed.stream().reduce(finalHandler,
            (next, step) -> transition -> step.update(transition, next), (f1, f2) -> f1);
    return pipeline.apply(UserAcceptedTermnsOfUseUpdateTransition.builder()
        .data(new UserAcceptedTermnsOfUseChangeProposal(attributes)).original(original).build());
  }
}
