package net.civeira.phylax.features.access.useracceptedtermnsofuse.valueobject;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUseReference;

/**
 * Value Object representing el conditions de user accepted termns of use of
 * userAcceptedTermnsOfUse.
 * <p>
 * This class ensures that the conditions is a non-null {@code String} and encapsulates its
 * validation and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design)
 * principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class ConditionsVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param conditions
   * @return An empty instance
   */
  public static ConditionsVO from(final TenantTermsOfUseRef conditions) {
    return tryFrom(conditions);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param conditionsUid
   * @return An empty instance
   */
  public static ConditionsVO fromReference(final String conditionsUid) {
    return from(TenantTermsOfUseReference.of(conditionsUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param conditions
   * @return An empty instance
   */
  public static ConditionsVO tryFrom(final Object conditions) {
    ConstraintFailList list = new ConstraintFailList();
    ConditionsVO result = tryFrom(conditions, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param conditions temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> ConditionsVO tryFrom(final Object conditions,
      final T fails) {
    if (null == conditions) {
      fails.add(new ConstraintFail("not-null", "conditions", null, "Cant be null"));
      return null;
    } else if (conditions instanceof TenantTermsOfUseRef castedConditions) {
      return new ConditionsVO(castedConditions);
    } else {
      fails.add(new ConstraintFail("wrong-type", "conditions", conditions.getClass(),
          "A TenantTermsOfUseRef type is expected for conditions"));
      return null;
    }
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param conditionsUid
   * @return An empty instance
   */
  public static ConditionsVO tryFromReference(final String conditionsUid) {
    return tryFrom(TenantTermsOfUseReference.of(conditionsUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param conditionsUid
   * @param fails Error list
   * @return An empty instance
   */
  public static ConditionsVO tryFromReference(final String conditionsUid,
      final ConstraintFailList fails) {
    return tryFrom(TenantTermsOfUseReference.of(conditionsUid), fails);
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final TenantTermsOfUseRef value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public String getReferenceValue() {
    return value.getUidValue();
  }

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
