package net.civeira.phylax.features.access.loginprovider.infrastructure.driver.rest;

import java.util.ArrayList;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.loginprovider.application.usecase.create.LoginProviderCreateUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.delete.LoginProviderDeleteUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.disable.LoginProviderDisableUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.enable.LoginProviderEnableUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.list.LoginProviderListUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.metadataupload.LoginProviderMetadataTemporalUploadUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.retrieve.LoginProviderRetrieveUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.update.LoginProviderUpdateUsecase;
import net.civeira.phylax.features.access.loginprovider.application.visibility.LoginProvidersVisibility;
import net.civeira.phylax.generated.openapi.api.LoginProviderAclApi;
import net.civeira.phylax.generated.openapi.model.CommonAllow;
import net.civeira.phylax.generated.openapi.model.LoginProviderAclFields;
import net.civeira.phylax.generated.openapi.model.LoginProviderAclGenericAllows;
import net.civeira.phylax.generated.openapi.model.LoginProviderAclSpecificAllows;
import net.civeira.phylax.generated.openapi.model.LoginProviderGenericAcl;
import net.civeira.phylax.generated.openapi.model.LoginProviderSpecificAcl;

@RequiredArgsConstructor
public class LoginProviderAclController implements LoginProviderAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProviderCreateUsecase create;

  /**
   * LoginProvider
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProviderDeleteUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProviderDisableUsecase disable;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProviderEnableUsecase enable;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProviderListUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProviderRetrieveUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProviderUpdateUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProviderMetadataTemporalUploadUsecase uploadMetadata;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final LoginProvidersVisibility visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response loginProviderApiContextualAcl(final String uid) {
    Interaction interaction = currentRequest.interaction();
    LoginProviderSpecificAcl response = new LoginProviderSpecificAcl();
    response.setAllows(new LoginProviderAclSpecificAllows());
    response.setFields(new LoginProviderAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    enableAllows(response, interaction);
    disableAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response loginProviderApiGenericAcl() {
    Interaction interaction = currentRequest.interaction();
    LoginProviderGenericAcl response = new LoginProviderGenericAcl();
    response.setAllows(new LoginProviderAclGenericAllows());
    response.setFields(new LoginProviderAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    listAllows(response, interaction);
    createAllows(response, interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    uploadMetadataAllows(response, interaction);
    enableAllows(response, interaction);
    disableAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void createAllows(final LoginProviderGenericAcl response, final Interaction query) {
    Allow detail = create.allow(query);
    response.getAllows()
        .setCreate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final LoginProviderGenericAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final LoginProviderSpecificAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void disableAllows(final LoginProviderGenericAcl response, final Interaction query) {
    Allow detail = disable.allow(query);
    response.getAllows()
        .setDisable(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void disableAllows(final LoginProviderSpecificAcl response, final Interaction query) {
    Allow detail = disable.allow(query);
    response.getAllows()
        .setDisable(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void enableAllows(final LoginProviderGenericAcl response, final Interaction query) {
    Allow detail = enable.allow(query);
    response.getAllows()
        .setEnable(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void enableAllows(final LoginProviderSpecificAcl response, final Interaction query) {
    Allow detail = enable.allow(query);
    response.getAllows()
        .setEnable(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void fixedFields(final LoginProviderAclFields response, final Interaction query) {
    visibility.fieldsToFix(query).forEach(field -> response.getNoEditables().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void hiddenFields(final LoginProviderAclFields response, final Interaction query) {
    visibility.fieldsToHide(query).forEach(field -> response.getNoVisibles().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void listAllows(final LoginProviderGenericAcl response, final Interaction query) {
    Allow detail = list.allow(query);
    response.getAllows()
        .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final LoginProviderGenericAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final LoginProviderSpecificAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final LoginProviderGenericAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final LoginProviderSpecificAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void uploadMetadataAllows(final LoginProviderGenericAcl response,
      final Interaction query) {
    Allow detail = uploadMetadata.allow(query);
    response.getAllows().setUploadMetadata(
        new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }
}
