package net.civeira.phylax.features.access.relyingparty.application.service.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.relyingparty.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyFacade;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyRef;
import net.civeira.phylax.features.access.relyingparty.application.projection.RelyingPartyStateProyection;
import net.civeira.phylax.features.access.relyingparty.application.request.RelyingPartyStateChange;
import net.civeira.phylax.features.access.relyingparty.gateway.RelyingPartyCacheGateway;
import net.civeira.phylax.features.access.relyingparty.gateway.RelyingPartyCached;
import net.civeira.phylax.features.access.relyingparty.gateway.RelyingPartyReadRepositoryGateway;
import net.civeira.phylax.features.access.relyingparty.gateway.RelyingPartyWriteRepositoryGateway;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyCursor;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class RelyingPartysVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartyFacade aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartyCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyFilterProposal> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyFixedFieldsProposal> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyVisibleContentProposal> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyHiddenFieldsProposal> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyPresetProposal> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartyReadRepositoryGateway relyingPartyReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartyWriteRepositoryGateway relyingPartyWriteRepositoryGateway;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, RelyingPartyFilter.builder().uids(uids).build(),
        RelyingPartyCursor.builder().build()).size();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public RelyingPartyStateChange copyWithFixed(Interaction prev, RelyingParty original,
      RelyingPartyStateChange source) {
    fieldsToFix(prev, original).forEach(source::unset);
    RelyingPartyPresetProposal proposal = RelyingPartyPresetProposal.builder().dto(source)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public RelyingPartyStateChange copyWithFixed(Interaction prev, RelyingPartyStateChange source) {
    fieldsToFix(prev).forEach(source::unset);
    RelyingPartyPresetProposal proposal =
        RelyingPartyPresetProposal.builder().dto(source).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param relyingParty
   * @return The input dto with hidden values
   */
  public RelyingPartyStateProyection copyWithHidden(Interaction prev, RelyingParty relyingParty) {
    RelyingPartyStateProyection target = new RelyingPartyStateProyection(relyingParty);
    fieldsToHide(prev, relyingParty).forEach(target::unset);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, RelyingPartyFilter filter) {
    return relyingPartyReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.readonlyFields());
    RelyingPartyFixedFieldsProposal proposal =
        RelyingPartyFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param relyingParty
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, RelyingPartyRef relyingParty) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, relyingParty));
    fields.addAll(aggregate.readonlyFields());
    RelyingPartyFixedFieldsProposal proposal = RelyingPartyFixedFieldsProposal.builder()
        .fields(fields).relyingParty(relyingParty).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    RelyingPartyHiddenFieldsProposal proposal =
        RelyingPartyHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param relyingParty
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, RelyingPartyRef relyingParty) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    RelyingPartyHiddenFieldsProposal proposal = RelyingPartyHiddenFieldsProposal.builder()
        .fields(fields).relyingParty(relyingParty).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public RelyingPartyCached listCachedVisibles(Interaction prev, RelyingPartyFilter filter,
      RelyingPartyCursor cursor) {
    RelyingPartyFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<RelyingParty> listVisibles(Interaction prev, RelyingPartyFilter filter,
      RelyingPartyCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<RelyingParty> listVisiblesForUpdate(Interaction prev, RelyingPartyFilter filter,
      RelyingPartyCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public RelyingPartyCached retrieveCachedVisible(Interaction prev, String uid) {
    RelyingPartyCursor cursor = RelyingPartyCursor.builder().limit(1).build();
    RelyingPartyFilter visibleFilter =
        applyPreVisibilityFilter(prev, RelyingPartyFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<RelyingParty> list =
          retrieveVisible(prev, uid).<List<RelyingParty>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<RelyingParty> retrieveVisible(Interaction prev, String uid) {
    RelyingPartyFilter filter =
        applyPreVisibilityFilter(prev, RelyingPartyFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<RelyingParty> retrieveVisibleForUpdate(Interaction prev, String uid) {
    RelyingPartyFilter filter =
        applyPreVisibilityFilter(prev, RelyingPartyFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private RelyingPartyFilter applyPreVisibilityFilter(Interaction prev, RelyingPartyFilter filter) {
    RelyingPartyFilterProposal proposal =
        RelyingPartyFilterProposal.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    return proposal.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param relyingPartyRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, RelyingParty relyingPartyRef) {
    RelyingPartyVisibleContentProposal proposal = RelyingPartyVisibleContentProposal.builder()
        .visible(true).entity(relyingPartyRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<RelyingParty> queryItem(Interaction prev, String uid,
      RelyingPartyFilter filter) {
    return relyingPartyReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<RelyingParty> queryItemForUpdate(Interaction prev, String uid,
      RelyingPartyFilter filter) {
    return relyingPartyWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<RelyingParty> queryItems(Interaction prev, RelyingPartyFilter filter,
      RelyingPartyCursor cursor) {
    List<RelyingParty> list = new ArrayList<>();
    Iterator<RelyingParty> slide = relyingPartyReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<RelyingParty> queryItemsForUpdate(Interaction prev, RelyingPartyFilter filter,
      RelyingPartyCursor cursor) {
    List<RelyingParty> list = new ArrayList<>();
    Iterator<RelyingParty> slide = relyingPartyWriteRepositoryGateway.slideForUpdate(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }
}
