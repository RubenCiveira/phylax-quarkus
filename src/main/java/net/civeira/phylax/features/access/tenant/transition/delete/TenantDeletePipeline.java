package net.civeira.phylax.features.access.tenant.transition.delete;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;
import java.util.function.Supplier;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.tenant.Tenant;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantDeletePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<TenantDeleteStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param original
   * @param last
   * @return
   */
  public Tenant delete(final Tenant original, final Supplier<Tenant> last) {
    Function<TenantDeleteTransition, Tenant> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.get();
    };
    List<TenantDeleteStep> reversed = new ArrayList<>(steps.stream().toList()).reversed();
    Function<TenantDeleteTransition, Tenant> pipeline = reversed.stream().reduce(finalHandler,
        (next, step) -> transition -> step.delete(transition, next), (f1, f2) -> f1);
    return pipeline.apply(TenantDeleteTransition.builder().original(original).build());
  }
}
