package net.civeira.phylax.features.access.tenantconfig.application.visibility;

import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfig;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfigReference;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.ForceMfaVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.InnerLabelVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold tenant config attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TenantConfigVisibleProjection {

  /**
   * Indicates if Multi-Factor Authentication (MFA) is enforced for the tenant.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<ForceMfaVO> forceMfa = Optional.empty();

  /**
   * A customizable label that tenants can use to personalize the application UI.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<InnerLabelVO> innerLabel = Optional.empty();

  /**
   * The tenant this configuration applies to.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant config para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public TenantConfigVisibleProjection(final TenantConfig entity) {
    uid = Optional.of(entity.getUidValue());
    tenant = Optional.of(entity.getTenantValue());
    innerLabel = Optional.of(entity.getInnerLabelValue());
    forceMfa = Optional.of(entity.getForceMfaValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for tenant config with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public TenantConfigReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(TenantConfigReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in ForceMfa
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for ForceMfa, otherwise the value for ForceMfa
   */
  public Optional<ForceMfaVO> getForceMfa() {
    return forceMfa;
  }

  /**
   * Inform for a possible change propolsal in InnerLabel
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for InnerLabel, otherwise the value for InnerLabel
   */
  public Optional<InnerLabelVO> getInnerLabel() {
    return innerLabel;
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for ForceMfa to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantConfigVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantConfigVisibleProjection setForceMfa(final Boolean value) {
    this.forceMfa = Optional.of(ForceMfaVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for InnerLabel to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantConfigVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantConfigVisibleProjection setInnerLabel(final String value) {
    this.innerLabel = Optional.of(InnerLabelVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Tenant to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantConfigVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantConfigVisibleProjection setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantConfigVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantConfigVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantConfigVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantConfigVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("innerLabel".equals(field)) {
      this.unsetInnerLabel();
    }
    if ("forceMfa".equals(field)) {
      this.unsetForceMfa();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for ForceMfa
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantConfigVisibleProjection unsetForceMfa() {
    this.forceMfa = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for InnerLabel
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantConfigVisibleProjection unsetInnerLabel() {
    this.innerLabel = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantConfigVisibleProjection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantConfigVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantConfigVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
