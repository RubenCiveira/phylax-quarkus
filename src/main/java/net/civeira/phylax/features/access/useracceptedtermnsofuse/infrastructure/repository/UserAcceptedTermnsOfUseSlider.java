package net.civeira.phylax.features.access.useracceptedtermnsofuse.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.UserAcceptedTermnsOfUse;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.query.UserAcceptedTermnsOfUseCursor;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.query.UserAcceptedTermnsOfUseFilter;

class UserAcceptedTermnsOfUseSlider extends Slider<UserAcceptedTermnsOfUse> {

  /**
   * @autogenerated SlideGenerator
   */
  private final UserAcceptedTermnsOfUseCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final UserAcceptedTermnsOfUseFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<UserAcceptedTermnsOfUseFilter, UserAcceptedTermnsOfUseCursor, Iterator<UserAcceptedTermnsOfUse>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  UserAcceptedTermnsOfUseSlider(final Iterator<UserAcceptedTermnsOfUse> multi, final int limit,
      final BiFunction<UserAcceptedTermnsOfUseFilter, UserAcceptedTermnsOfUseCursor, Iterator<UserAcceptedTermnsOfUse>> gateway,
      final UserAcceptedTermnsOfUseFilter filter, final UserAcceptedTermnsOfUseCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param userAcceptedTermnsOfUses
   * @param limit
   * @return
   */
  @Override
  public Iterator<UserAcceptedTermnsOfUse> next(
      List<UserAcceptedTermnsOfUse> userAcceptedTermnsOfUses, int limit) {
    UserAcceptedTermnsOfUse last =
        userAcceptedTermnsOfUses.get(userAcceptedTermnsOfUses.size() - 1);
    UserAcceptedTermnsOfUseCursor cr =
        this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
