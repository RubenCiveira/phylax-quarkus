package net.civeira.phylax.features.access.relyingparty.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.relyingparty.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyRef;
import net.civeira.phylax.features.access.relyingparty.gateway.RelyingPartyWriteRepositoryGateway;
import net.civeira.phylax.features.access.relyingparty.infrastructure.event.RelyingPartyEventDispacher;
import net.civeira.phylax.features.access.relyingparty.infrastructure.repository.RelyingPartyRepository;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyCursor;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class RelyingPartyWriteGatewayAdapter implements RelyingPartyWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final RelyingPartyEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final RelyingPartyRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(RelyingPartyFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public RelyingParty create(RelyingParty entity) {
    RelyingParty result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public RelyingParty create(RelyingParty entity, Predicate<RelyingParty> verifier) {
    RelyingParty result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(RelyingParty entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public RelyingParty enrichForUpdate(RelyingPartyRef reference) {
    return repository.enrichForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<RelyingPartyFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<RelyingParty> findForUpdate(RelyingPartyFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<RelyingParty> listForUpdate(RelyingPartyFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<RelyingParty> retrieveForUpdate(String uid, Optional<RelyingPartyFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<RelyingParty> slideForUpdate(RelyingPartyFilter filter, RelyingPartyCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public RelyingParty update(RelyingPartyRef reference, RelyingParty entity) {
    RelyingParty result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
