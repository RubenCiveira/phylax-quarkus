package net.civeira.phylax.features.access.trustedclient.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientCursor;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientFilter;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientWriteRepositoryGateway;
import net.civeira.phylax.features.access.trustedclient.infrastructure.event.TrustedClientEventDispacher;
import net.civeira.phylax.features.access.trustedclient.infrastructure.repository.TrustedClientRepository;

@ApplicationScoped
@RequiredArgsConstructor
public class TrustedClientWriteGatewayAdapter implements TrustedClientWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TrustedClientEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TrustedClientRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(TrustedClientFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public TrustedClient create(TrustedClient entity) {
    TrustedClient result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public TrustedClient create(TrustedClient entity, Predicate<TrustedClient> verifier) {
    TrustedClient result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(TrustedClient entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<TrustedClientFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<TrustedClient> findForUpdate(TrustedClientFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<TrustedClient> listForUpdate(TrustedClientFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public TrustedClient resolveForUpdate(TrustedClientRef reference) {
    return repository.resolveForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<TrustedClient> retrieveForUpdate(String uid,
      Optional<TrustedClientFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<TrustedClient> slideForUpdate(TrustedClientFilter filter,
      TrustedClientCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public TrustedClient update(TrustedClientRef reference, TrustedClient entity) {
    TrustedClient result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
