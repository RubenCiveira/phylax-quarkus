package net.civeira.phylax.features.access.trustedclient.rule;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.trustedclient.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.TrustedClientMetadataProvider;
import net.civeira.phylax.features.access.trustedclient.transition.TrustedClientChangeProposal;
import net.civeira.phylax.features.access.trustedclient.transition.create.TrustedClientCreateStep;
import net.civeira.phylax.features.access.trustedclient.transition.create.TrustedClientCreateTransition;
import net.civeira.phylax.features.access.trustedclient.transition.update.TrustedClientUpdateStep;
import net.civeira.phylax.features.access.trustedclient.transition.update.TrustedClientUpdateTransition;
import net.civeira.phylax.features.access.trustedclient.valueobject.EnabledVO;

@ApplicationScoped
@RequiredArgsConstructor
public class PreserveEnabled
    implements TrustedClientMetadataProvider, TrustedClientCreateStep, TrustedClientUpdateStep {

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public TrustedClient create(final TrustedClientCreateTransition transition,
      final Function<TrustedClientCreateTransition, TrustedClient> next) {
    return next.apply(transition.map(calculate(transition.getData(), Optional.empty())));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @return
   */
  @Override
  public Set<String> readonlyFields() {
    return Set.of("enabled");
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public TrustedClient update(final TrustedClientUpdateTransition transition,
      final Function<TrustedClientUpdateTransition, TrustedClient> next) {
    return next.apply(
        transition.map(calculate(transition.getData(), Optional.of(transition.getOriginal()))));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param attributes
   * @param original
   * @return
   */
  private TrustedClientChangeProposal calculate(final TrustedClientChangeProposal attributes,
      final Optional<TrustedClient> original) {
    return attributes.setEnabled(original.map(TrustedClient::getEnabled)
        .flatMap(EnabledVO::getValue).orElseGet(() -> false));
  }
}
