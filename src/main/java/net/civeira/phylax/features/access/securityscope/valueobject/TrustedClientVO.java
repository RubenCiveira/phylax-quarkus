package net.civeira.phylax.features.access.securityscope.valueobject;

import java.util.Optional;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.TrustedClientReference;

/**
 * Value Object representing el trusted client de security scope of securityScope.
 * <p>
 * This class ensures that the trusted client is a {@code String} and encapsulates its validation
 * and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design) principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class TrustedClientVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClient
   * @return An empty instance
   */
  public static TrustedClientVO from(final TrustedClientRef trustedClient) {
    return tryFrom(trustedClient);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClientUid
   * @return An empty instance
   */
  public static TrustedClientVO fromReference(final String trustedClientUid) {
    return null == trustedClientUid ? nullValue()
        : from(TrustedClientReference.of(trustedClientUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static TrustedClientVO nullValue() {
    return new TrustedClientVO(null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClient
   * @return An empty instance
   */
  public static TrustedClientVO tryFrom(final Object trustedClient) {
    ConstraintFailList list = new ConstraintFailList();
    TrustedClientVO result = tryFrom(trustedClient, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClient temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> TrustedClientVO tryFrom(final Object trustedClient,
      final T fails) {
    if (null == trustedClient) {
      return new TrustedClientVO(null);
    } else if (trustedClient instanceof TrustedClientRef castedTrustedClient) {
      return new TrustedClientVO(castedTrustedClient);
    } else {
      fails.add(new ConstraintFail("wrong-type", "trustedClient", trustedClient.getClass(),
          "A TrustedClientRef type is expected for trustedClient"));
      return null;
    }
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClientUid
   * @return An empty instance
   */
  public static TrustedClientVO tryFromReference(final String trustedClientUid) {
    return tryFrom(TrustedClientReference.of(trustedClientUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param trustedClientUid
   * @param fails Error list
   * @return An empty instance
   */
  public static TrustedClientVO tryFromReference(final String trustedClientUid,
      final ConstraintFailList fails) {
    return tryFrom(TrustedClientReference.of(trustedClientUid), fails);
  }

  /**
   * The actual value of the name.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final TrustedClientRef value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<String> getReferenceValue() {
    return Optional.ofNullable(value).map(TrustedClientRef::getUidValue);
  }

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<TrustedClientRef> getValue() {
    return Optional.ofNullable(value);
  }

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
