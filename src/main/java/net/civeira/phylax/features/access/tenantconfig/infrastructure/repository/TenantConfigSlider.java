package net.civeira.phylax.features.access.tenantconfig.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfig;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigCursor;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigFilter;

class TenantConfigSlider extends Slider<TenantConfig> {

  /**
   * @autogenerated SlideGenerator
   */
  private final TenantConfigCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final TenantConfigFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<TenantConfigFilter, TenantConfigCursor, Iterator<TenantConfig>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  TenantConfigSlider(final Iterator<TenantConfig> multi, final int limit,
      final BiFunction<TenantConfigFilter, TenantConfigCursor, Iterator<TenantConfig>> gateway,
      final TenantConfigFilter filter, final TenantConfigCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param tenantConfigs
   * @param limit
   * @return
   */
  @Override
  public Iterator<TenantConfig> next(List<TenantConfig> tenantConfigs, int limit) {
    TenantConfig last = tenantConfigs.get(tenantConfigs.size() - 1);
    TenantConfigCursor cr = this.cursor.withSinceUid(last.getUid()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
