package net.civeira.phylax.features.access.securitydomain.application.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainChangeSet;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainRef;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainCacheGateway;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainCached;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainCursor;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainFilter;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainReadRepositoryGateway;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainsVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainVisibilityCheck> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainFixedFieldsCheck> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainAccesibleCheck> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainHiddenFieldsCheck> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainEntityEnrichment> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainReadRepositoryGateway securityDomainReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainWriteRepositoryGateway securityDomainWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids
        .size() == listVisibles(prev, SecurityDomainVisibilityFilter.builder().uids(uids).build(),
            SecurityDomainCursor.builder().build()).size();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public SecurityDomainChangeSet copyWithFixed(Interaction prev, SecurityDomain original,
      SecurityDomainChangeSet source) {
    fieldsToFix(prev, original).forEach(source::unset);
    SecurityDomainEntityEnrichment proposal = SecurityDomainEntityEnrichment.builder().dto(source)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public SecurityDomainChangeSet copyWithFixed(Interaction prev, SecurityDomainChangeSet source) {
    fieldsToFix(prev).forEach(source::unset);
    SecurityDomainEntityEnrichment proposal =
        SecurityDomainEntityEnrichment.builder().dto(source).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityDomain
   * @return The input dto with hidden values
   */
  public SecurityDomainVisibleProjection copyWithHidden(Interaction prev,
      SecurityDomain securityDomain) {
    SecurityDomainVisibleProjection target = new SecurityDomainVisibleProjection(securityDomain);
    fieldsToHide(prev, securityDomain).forEach(target::unset);
    return target;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, SecurityDomainVisibilityFilter filter) {
    return securityDomainReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    SecurityDomainFixedFieldsCheck proposal =
        SecurityDomainFixedFieldsCheck.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityDomain
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, SecurityDomainRef securityDomain) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, securityDomain));
    SecurityDomainFixedFieldsCheck proposal = SecurityDomainFixedFieldsCheck.builder()
        .fields(fields).securityDomain(securityDomain).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    SecurityDomainHiddenFieldsCheck proposal =
        SecurityDomainHiddenFieldsCheck.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityDomain
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, SecurityDomainRef securityDomain) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    SecurityDomainHiddenFieldsCheck proposal = SecurityDomainHiddenFieldsCheck.builder()
        .fields(fields).securityDomain(securityDomain).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public SecurityDomainCached listCachedVisibles(Interaction prev,
      SecurityDomainVisibilityFilter filter, SecurityDomainCursor cursor) {
    SecurityDomainFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<SecurityDomain> listVisibles(Interaction prev, SecurityDomainVisibilityFilter filter,
      SecurityDomainCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<SecurityDomain> listVisiblesForUpdate(Interaction prev,
      SecurityDomainVisibilityFilter filter, SecurityDomainCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public SecurityDomainCached retrieveCachedVisible(Interaction prev, String uid) {
    SecurityDomainCursor cursor = SecurityDomainCursor.builder().limit(1).build();
    SecurityDomainFilter visibleFilter =
        applyPreVisibilityFilter(prev, SecurityDomainVisibilityFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<SecurityDomain> list =
          retrieveVisible(prev, uid).<List<SecurityDomain>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<SecurityDomain> retrieveVisible(Interaction prev, String uid) {
    SecurityDomainFilter filter =
        applyPreVisibilityFilter(prev, SecurityDomainVisibilityFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<SecurityDomain> retrieveVisibleForUpdate(Interaction prev, String uid) {
    SecurityDomainFilter filter =
        applyPreVisibilityFilter(prev, SecurityDomainVisibilityFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private SecurityDomainFilter applyPreVisibilityFilter(Interaction prev,
      SecurityDomainVisibilityFilter filter) {
    SecurityDomainVisibilityCheck proposal =
        SecurityDomainVisibilityCheck.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    SecurityDomainVisibilityFilter modified = proposal.getFilter();
    return SecurityDomainFilter.builder().uid(modified.getUid().orElse(null))
        .uids(modified.getUids().stream().toList()).search(modified.getSearch().orElse(null))
        .enabled(modified.getEnabled().orElse(null)).name(modified.getName().orElse(null)).build();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityDomainRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, SecurityDomain securityDomainRef) {
    SecurityDomainAccesibleCheck proposal = SecurityDomainAccesibleCheck.builder().visible(true)
        .entity(securityDomainRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<SecurityDomain> queryItem(Interaction prev, String uid,
      SecurityDomainFilter filter) {
    return securityDomainReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<SecurityDomain> queryItemForUpdate(Interaction prev, String uid,
      SecurityDomainFilter filter) {
    return securityDomainWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<SecurityDomain> queryItems(Interaction prev, SecurityDomainFilter filter,
      SecurityDomainCursor cursor) {
    List<SecurityDomain> list = new ArrayList<>();
    Iterator<SecurityDomain> slide = securityDomainReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<SecurityDomain> queryItemsForUpdate(Interaction prev, SecurityDomainFilter filter,
      SecurityDomainCursor cursor) {
    List<SecurityDomain> list = new ArrayList<>();
    Iterator<SecurityDomain> slide = securityDomainWriteRepositoryGateway
        .slideForUpdate(filter, cursor).slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }
}
