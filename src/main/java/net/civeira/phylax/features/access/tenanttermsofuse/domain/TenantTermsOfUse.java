package net.civeira.phylax.features.access.tenanttermsofuse.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.event.TenantTermsOfUseCreateEvent;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.event.TenantTermsOfUseDeleteEvent;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.event.TenantTermsOfUseEvent;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.event.TenantTermsOfUseUpdateEvent;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.ActivationDateVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.AttachedVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TextVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.VersionVO;

/**
 * Defines legal or informational documents (Terms of Use) that users must accept to use services
 * within a tenant's scope.
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class TenantTermsOfUse implements TenantTermsOfUseRef {

  /**
   * Prepare a new tenant terms of use with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new tenant terms of use
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed tenant terms of use.
   */
  public static TenantTermsOfUse create(final TenantTermsOfUseChangeSet change)
      throws ConstraintException {
    TenantTermsOfUse instance = new TenantTermsOfUse(change, Optional.empty());
    instance.addEvent(TenantTermsOfUseCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Date when the Terms of Use become active.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private ActivationDateVO activationDateValue = ActivationDateVO.nullValue();

  /**
   * An optional file attachment (e.g., PDF or signed document).
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private AttachedVO attachedValue = AttachedVO.nullValue();

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<TenantTermsOfUseEvent> recordedEvents = List.of();

  /**
   * The tenant this Terms of Use document belongs to.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private TenantVO tenantValue;

  /**
   * The content of the Terms of Use document.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private TextVO textValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Campo con el n√∫mero de version de tenant terms of use para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private TenantTermsOfUse(final TenantTermsOfUseChangeSet attribute,
      final Optional<TenantTermsOfUse> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue =
        attribute.getUid().orElse(previous.map(TenantTermsOfUse::getUidValue).orElse(null));
    this.tenantValue =
        attribute.getTenant().orElse(previous.map(TenantTermsOfUse::getTenantValue).orElse(null));
    this.textValue =
        attribute.getText().orElse(previous.map(TenantTermsOfUse::getTextValue).orElse(null));
    this.attachedValue = attribute.getAttached()
        .orElse(previous.map(TenantTermsOfUse::getAttachedValue).orElseGet(AttachedVO::nullValue));
    this.activationDateValue = attribute.getActivationDate().orElse(previous
        .map(TenantTermsOfUse::getActivationDateValue).orElseGet(ActivationDateVO::nullValue));
    this.versionValue = attribute.getVersion()
        .orElse(previous.map(TenantTermsOfUse::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == tenantValue) {
      list.add(new ConstraintFail("REQUIRED", "tenant", null));
    }
    if (null == textValue) {
      list.add(new ConstraintFail("REQUIRED", "text", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(TenantTermsOfUse::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a tenant terms of use
   *
   * @autogenerated EntityGenerator
   * @return A instance of tenant terms of use ready to be deleted
   */
  public TenantTermsOfUse delete() {
    TenantTermsOfUse instance = this;
    instance.addEvent(TenantTermsOfUseDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a tenant terms of use
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of tenant terms of use
   */
  public TenantTermsOfUse update(final TenantTermsOfUseChangeSet change)
      throws ConstraintException {
    TenantTermsOfUse instance = new TenantTermsOfUse(change, Optional.of(this));
    instance.addEvent(TenantTermsOfUseUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public TenantTermsOfUse withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final TenantTermsOfUseEvent event) {
    List<TenantTermsOfUseEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
