package net.civeira.phylax.features.access.useraccesstemporalcode.infrastructure.driven;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCode;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCodeRef;
import net.civeira.phylax.features.access.useraccesstemporalcode.gateway.UserAccessTemporalCodeReadRepositoryGateway;
import net.civeira.phylax.features.access.useraccesstemporalcode.infrastructure.repository.UserAccessTemporalCodeRepository;
import net.civeira.phylax.features.access.useraccesstemporalcode.query.UserAccessTemporalCodeCursor;
import net.civeira.phylax.features.access.useraccesstemporalcode.query.UserAccessTemporalCodeFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAccessTemporalCodeReadGatewayAdapter
    implements UserAccessTemporalCodeReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final UserAccessTemporalCodeRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(UserAccessTemporalCodeFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public UserAccessTemporalCode enrich(UserAccessTemporalCodeRef reference) {
    return repository.enrich(reference);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<UserAccessTemporalCodeFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<UserAccessTemporalCode> find(UserAccessTemporalCodeFilter filter) {
    return repository.find(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<UserAccessTemporalCode> list(UserAccessTemporalCodeFilter filter) {
    return repository.list(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<UserAccessTemporalCode> retrieve(String uid,
      Optional<UserAccessTemporalCodeFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<UserAccessTemporalCode> slide(UserAccessTemporalCodeFilter filter,
      UserAccessTemporalCodeCursor cursor) {
    return repository.slide(filter, cursor);
  }
}
