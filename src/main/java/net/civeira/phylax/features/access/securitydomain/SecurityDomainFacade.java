package net.civeira.phylax.features.access.securitydomain;

import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.securitydomain.command.SecurityDomainWriteAttributes;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainFacade {

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain create(final SecurityDomainWriteAttributes attributes) {
    return SecurityDomain.create(attributes);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain delete(final SecurityDomain entity) {
    return entity.delete();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain disable(final SecurityDomain base) {
    return base.disable();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain enable(final SecurityDomain base) {
    return base.enable();
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    return SecurityDomain.readonlyFields();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain update(final SecurityDomain base,
      final SecurityDomainWriteAttributes attributes) {
    return base.update(attributes);
  }
}
