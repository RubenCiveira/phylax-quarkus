package net.civeira.phylax.features.access.securitydomain;

import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.securitydomain.command.SecurityDomainWriteAttributes;
import net.civeira.phylax.features.access.securitydomain.transition.create.SecurityDomainCreatePipeline;
import net.civeira.phylax.features.access.securitydomain.transition.delete.SecurityDomainDeletePipeline;
import net.civeira.phylax.features.access.securitydomain.transition.disable.SecurityDomainDisablePipeline;
import net.civeira.phylax.features.access.securitydomain.transition.enable.SecurityDomainEnablePipeline;
import net.civeira.phylax.features.access.securitydomain.transition.update.SecurityDomainUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityDomainCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityDomainDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityDomainDisablePipeline disablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityDomainEnablePipeline enablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<SecurityDomainMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityDomainUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain create(final SecurityDomainWriteAttributes attributes) {
    return SecurityDomain.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain delete(final SecurityDomain entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain disable(final SecurityDomain base) {
    return base.disable(disablePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain enable(final SecurityDomain base) {
    return base.enable(enablePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityDomain update(final SecurityDomain base,
      final SecurityDomainWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
