package net.civeira.phylax.features.access.role.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.role.domain.event.RoleCreateEvent;
import net.civeira.phylax.features.access.role.domain.event.RoleDeleteEvent;
import net.civeira.phylax.features.access.role.domain.event.RoleEvent;
import net.civeira.phylax.features.access.role.domain.event.RoleUpdateEvent;
import net.civeira.phylax.features.access.role.domain.valueobject.DomainsVO;
import net.civeira.phylax.features.access.role.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.role.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.role.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.role.domain.valueobject.VersionVO;

/**
 * role
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class Role implements RoleRef {

  /**
   * Prepare a new role with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new role
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed role.
   */
  public static Role create(final RoleChangeSet change) throws ConstraintException {
    Role instance = new Role(change, Optional.empty());
    instance.addEvent(RoleCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * El domains de role
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private DomainsVO domainsValue;

  /**
   * The user name to identify on the login screen
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private NameVO nameValue;

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<RoleEvent> recordedEvents = List.of();

  /**
   * Domains without a tenant could be used only for admins
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private TenantVO tenantValue = TenantVO.nullValue();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Campo con el n√∫mero de version de role para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private Role(final RoleChangeSet attribute, final Optional<Role> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue = attribute.getUid().orElse(previous.map(Role::getUidValue).orElse(null));
    this.nameValue = attribute.getName().orElse(previous.map(Role::getNameValue).orElse(null));
    this.tenantValue = attribute.getTenant()
        .orElse(previous.map(Role::getTenantValue).orElseGet(TenantVO::nullValue));
    this.domainsValue = attribute.getDomains()
        .orElse(previous.map(Role::getDomainsValue).orElseGet(() -> DomainsVO.from(List.of())));
    this.versionValue = attribute.getVersion()
        .orElse(previous.map(Role::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == nameValue) {
      list.add(new ConstraintFail("REQUIRED", "name", null));
    }
    if (null == domainsValue) {
      list.add(new ConstraintFail("REQUIRED", "domains", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(Role::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a role
   *
   * @autogenerated EntityGenerator
   * @return A instance of role ready to be deleted
   */
  public Role delete() {
    Role instance = this;
    instance.addEvent(RoleDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a role
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of role
   */
  public Role update(final RoleChangeSet change) throws ConstraintException {
    Role instance = new Role(change, Optional.of(this));
    instance.addEvent(RoleUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Role withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final RoleEvent event) {
    List<RoleEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
