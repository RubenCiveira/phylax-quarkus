package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.query.TenantTermsOfUseCursor;
import net.civeira.phylax.features.access.tenanttermsofuse.query.TenantTermsOfUseFilter;

class TenantTermsOfUseSlider extends Slider<TenantTermsOfUse> {

  /**
   * @autogenerated SlideGenerator
   */
  private final TenantTermsOfUseCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final TenantTermsOfUseFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<TenantTermsOfUseFilter, TenantTermsOfUseCursor, Iterator<TenantTermsOfUse>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  TenantTermsOfUseSlider(final Iterator<TenantTermsOfUse> multi, final int limit,
      final BiFunction<TenantTermsOfUseFilter, TenantTermsOfUseCursor, Iterator<TenantTermsOfUse>> gateway,
      final TenantTermsOfUseFilter filter, final TenantTermsOfUseCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param tenantTermsOfUses
   * @param limit
   * @return
   */
  @Override
  public Iterator<TenantTermsOfUse> next(List<TenantTermsOfUse> tenantTermsOfUses, int limit) {
    TenantTermsOfUse last = tenantTermsOfUses.get(tenantTermsOfUses.size() - 1);
    TenantTermsOfUseCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
