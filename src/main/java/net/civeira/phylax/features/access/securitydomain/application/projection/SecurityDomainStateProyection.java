package net.civeira.phylax.features.access.securitydomain.application.projection;

import java.util.Optional;

import net.civeira.phylax.features.access.securitydomain.SecurityDomain;

public class SecurityDomainStateProyection {

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> enabled = Optional.empty();

  /**
   * The user inherit level, and can view only domain with his level or lower
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> level = Optional.empty();

  /**
   * Allow to write on every scope
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> manageAll = Optional.empty();

  /**
   * El name de security domain
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> name = Optional.empty();

  /**
   * Allow to read on every scope
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> readAll = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de security domain para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * Allow to write on every scope
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> writeAll = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public SecurityDomainStateProyection(final SecurityDomain entity) {
    uid = Optional.of(entity.getUid().getValue());
    name = Optional.of(entity.getName().getValue());
    level = Optional.of(entity.getLevel().getValue());
    readAll = entity.getReadAll().getValue();
    writeAll = entity.getWriteAll().getValue();
    manageAll = entity.getManageAll().getValue();
    enabled = entity.getEnabled().getValue();
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getEnabled() {
    return enabled;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getLevel() {
    return level;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getManageAll() {
    return manageAll;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getName() {
    return name;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getReadAll() {
    return readAll;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getWriteAll() {
    return writeAll;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateProyection setEnabled(final Optional<Boolean> value) {
    this.enabled = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateProyection setLevel(final Optional<Integer> value) {
    this.level = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateProyection setManageAll(final Optional<Boolean> value) {
    this.manageAll = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateProyection setName(final Optional<String> value) {
    this.name = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateProyection setReadAll(final Optional<Boolean> value) {
    this.readAll = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateProyection setWriteAll(final Optional<Boolean> value) {
    this.writeAll = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("level".equals(field)) {
      this.unsetLevel();
    }
    if ("readAll".equals(field)) {
      this.unsetReadAll();
    }
    if ("writeAll".equals(field)) {
      this.unsetWriteAll();
    }
    if ("manageAll".equals(field)) {
      this.unsetManageAll();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public SecurityDomainStateProyection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public SecurityDomainStateProyection unsetLevel() {
    this.level = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public SecurityDomainStateProyection unsetManageAll() {
    this.manageAll = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public SecurityDomainStateProyection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public SecurityDomainStateProyection unsetReadAll() {
    this.readAll = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public SecurityDomainStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public SecurityDomainStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public SecurityDomainStateProyection unsetWriteAll() {
    this.writeAll = Optional.empty();
    return this;
  }
}
