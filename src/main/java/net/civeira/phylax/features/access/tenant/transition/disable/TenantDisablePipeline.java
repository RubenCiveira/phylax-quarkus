package net.civeira.phylax.features.access.tenant.transition.disable;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.tenant.Tenant;
import net.civeira.phylax.features.access.tenant.transition.TenantChangeProposal;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantDisablePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<TenantDisableStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param original
   * @param last
   * @return
   */
  public Tenant disable(final Tenant original, final Function<TenantChangeProposal, Tenant> last) {
    Function<TenantDisableTransition, Tenant> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.apply(t.getData());
    };
    List<TenantDisableStep> reversed = new ArrayList<>(steps.stream().toList()).reversed();
    Function<TenantDisableTransition, Tenant> pipeline = reversed.stream().reduce(finalHandler,
        (next, step) -> transition -> step.disable(transition, next), (f1, f2) -> f1);
    return pipeline.apply(TenantDisableTransition.builder().data(new TenantChangeProposal(original))
        .original(original).build());
  }
}
