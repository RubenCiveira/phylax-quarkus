package net.civeira.phylax.features.access.scopeassignation.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.delete.ScopeAssignationCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.delete.ScopeAssignationDeleteFilter;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.delete.ScopeAssignationDeleteUsecase;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignationReference;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeReference;

@RequiredArgsConstructor
public class ScopeAssignationDeleteController {

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final ScopeAssignationDeleteUsecase delete;

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uids
   * @param search
   * @param securityDomain
   * @param securityDomains
   * @param securityScope
   * @param securityScopes
   * @return
   */
  public Response scopeAssignationApiBatchDelete(final List<String> uids, final String search,
      final String securityDomain, final List<String> securityDomains, final String securityScope,
      final List<String> securityScopes) {
    ScopeAssignationDeleteFilter.ScopeAssignationDeleteFilterBuilder filterBuilder =
        ScopeAssignationDeleteFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    if (null != securityDomain) {
      filterBuilder = filterBuilder.securityDomain(SecurityDomainReference.of(securityDomain));
    }
    filterBuilder = filterBuilder.securityDomains(
        securityDomains.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    if (null != securityScope) {
      filterBuilder = filterBuilder.securityScope(SecurityScopeReference.of(securityScope));
    }
    filterBuilder = filterBuilder.securityScopes(
        securityScopes.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    ScopeAssignationDeleteFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param batchId
   * @return
   */
  public Response scopeAssignationApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(ScopeAssignationCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response scopeAssignationApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), ScopeAssignationReference.of(uid));
    return Response.noContent().build();
  }
}
