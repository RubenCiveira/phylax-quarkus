package net.civeira.phylax.features.access.useridentity.domain.valueobject;

import lombok.EqualsAndHashCode;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.role.domain.RoleRef;
import net.civeira.phylax.features.access.role.domain.RoleReference;

/**
 * Value Object representing la cuenta a la que pertenece of userIdentityRole.
 * <p>
 * This class ensures that the role is a non-null {@code String} and encapsulates its validation and
 * formatting logic. It is immutable and compliant with DDD (Domain-Driven Design) principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@RequiredArgsConstructor
@EqualsAndHashCode
public class RoleVO {

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param role
   * @return An empty instance
   */
  public static RoleVO from(final RoleRef role) {
    return tryFrom(role);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param roleUid
   * @return An empty instance
   */
  public static RoleVO fromReference(final String roleUid) {
    return from(RoleReference.of(roleUid));
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param role
   * @return An empty instance
   */
  public static RoleVO tryFrom(final Object role) {
    ConstraintFailList list = new ConstraintFailList();
    RoleVO result = tryFrom(role, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param role temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> RoleVO tryFrom(final Object role, final T fails) {
    if (null == role) {
      fails.add(new ConstraintFail("not-null", "role", null, "Cant be null"));
      return null;
    } else if (role instanceof RoleRef castedRole) {
      return new RoleVO(castedRole);
    } else {
      fails.add(new ConstraintFail("wrong-type", "role", role.getClass(),
          "A RoleRef type is expected for role"));
      return null;
    }
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param roleUid
   * @return An empty instance
   */
  public static RoleVO tryFromReference(final String roleUid) {
    return tryFrom(RoleReference.of(roleUid));
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param roleUid
   * @param fails Error list
   * @return An empty instance
   */
  public static RoleVO tryFromReference(final String roleUid, final ConstraintFailList fails) {
    return tryFrom(RoleReference.of(roleUid), fails);
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final RoleRef value;

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public RoleRef getRole() {
    return value;
  }

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public String getRoleUid() {
    return value.getUid();
  }

  /**
   * Returns a formatted string representation of the name.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
