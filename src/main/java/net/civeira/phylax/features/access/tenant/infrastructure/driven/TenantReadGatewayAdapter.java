package net.civeira.phylax.features.access.tenant.infrastructure.driven;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingParty;
import net.civeira.phylax.features.access.tenant.domain.RelingParties;
import net.civeira.phylax.features.access.tenant.domain.Tenant;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCursor;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantFilter;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantReadRepositoryGateway;
import net.civeira.phylax.features.access.tenant.infrastructure.repository.TenantRepository;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClient;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantReadGatewayAdapter implements TenantReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final TenantRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(TenantFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<TenantFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<Tenant> find(TenantFilter filter) {
    return repository.find(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<Tenant> list(TenantFilter filter) {
    return repository.list(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public Tenant resolve(TenantRef reference) {
    return repository.resolve(reference);
  }

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated ReadAdaterGatewayGenerator
   * @param childs
   * @return Retrieve one single value
   */
  @Override
  public List<RelyingParty> resolveRelingParties(final List<RelingParties> childs) {
    return repository.resolveRelingParties(childs);
  }

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated ReadAdaterGatewayGenerator
   * @param childs
   * @return Retrieve one single value
   */
  @Override
  public List<TrustedClient> resolveTrustedClients(final List<TrustedClients> childs) {
    return repository.resolveTrustedClients(childs);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<Tenant> retrieve(String uid, Optional<TenantFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<Tenant> slide(TenantFilter filter, TenantCursor cursor) {
    return repository.slide(filter, cursor);
  }
}
