package net.civeira.phylax.features.access.role.application.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.role.domain.Role;
import net.civeira.phylax.features.access.role.domain.RoleChangeSet;
import net.civeira.phylax.features.access.role.domain.RoleRef;
import net.civeira.phylax.features.access.role.domain.gateway.RoleCacheGateway;
import net.civeira.phylax.features.access.role.domain.gateway.RoleCached;
import net.civeira.phylax.features.access.role.domain.gateway.RoleCursor;
import net.civeira.phylax.features.access.role.domain.gateway.RoleFilter;
import net.civeira.phylax.features.access.role.domain.gateway.RoleReadRepositoryGateway;
import net.civeira.phylax.features.access.role.domain.gateway.RoleWriteRepositoryGateway;
import net.civeira.phylax.features.access.role.domain.valueobject.DomainsVO;
import net.civeira.phylax.features.access.role.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.securitydomain.application.visibility.SecurityDomainsVisibility;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantsVisibility;

@ApplicationScoped
@RequiredArgsConstructor
public class RolesVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RoleCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RoleVisibilityCheck> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RoleFixedFieldsCheck> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RoleAccesibleCheck> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RoleHiddenFieldsCheck> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RoleEntityEnrichment> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RoleReadRepositoryGateway roleReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RoleWriteRepositoryGateway roleWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainsVisibility securityDomainsVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantsVisibility tenantsVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, RoleVisibilityFilter.builder().uids(uids).build(),
        RoleCursor.builder().build()).size();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public RoleChangeSet copyWithFixed(Interaction prev, RoleChangeSet source, Role original) {
    RoleChangeSet withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    RoleEntityEnrichment proposal = RoleEntityEnrichment.builder().dto(withReferences)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public RoleChangeSet copyWithFixed(Interaction prev, RoleChangeSet source) {
    RoleChangeSet withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    RoleEntityEnrichment proposal =
        RoleEntityEnrichment.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param role
   * @return The input dto with hidden values
   */
  public RoleVisibleProjection copyWithHidden(Interaction prev, Role role) {
    RoleVisibleProjection target = new RoleVisibleProjection(role);
    fieldsToHide(prev, role).forEach(target::unset);
    return target;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, RoleVisibilityFilter filter) {
    return roleReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    RoleFixedFieldsCheck proposal =
        RoleFixedFieldsCheck.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param role
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, RoleRef role) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, role));
    RoleFixedFieldsCheck proposal =
        RoleFixedFieldsCheck.builder().fields(fields).role(role).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    RoleHiddenFieldsCheck proposal =
        RoleHiddenFieldsCheck.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param role
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, RoleRef role) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    RoleHiddenFieldsCheck proposal =
        RoleHiddenFieldsCheck.builder().fields(fields).role(role).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public RoleCached listCachedVisibles(Interaction prev, RoleVisibilityFilter filter,
      RoleCursor cursor) {
    RoleFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<Role> listVisibles(Interaction prev, RoleVisibilityFilter filter, RoleCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<Role> listVisiblesForUpdate(Interaction prev, RoleVisibilityFilter filter,
      RoleCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public RoleCached retrieveCachedVisible(Interaction prev, String uid) {
    RoleCursor cursor = RoleCursor.builder().limit(1).build();
    RoleFilter visibleFilter =
        applyPreVisibilityFilter(prev, RoleVisibilityFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<Role> list = retrieveVisible(prev, uid).<List<Role>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<Role> retrieveVisible(Interaction prev, String uid) {
    RoleFilter filter =
        applyPreVisibilityFilter(prev, RoleVisibilityFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<Role> retrieveVisibleForUpdate(Interaction prev, String uid) {
    RoleFilter filter =
        applyPreVisibilityFilter(prev, RoleVisibilityFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private RoleFilter applyPreVisibilityFilter(Interaction prev, RoleVisibilityFilter filter) {
    RoleVisibilityCheck proposal =
        RoleVisibilityCheck.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    RoleVisibilityFilter modified = proposal.getFilter();
    return RoleFilter.builder().uid(modified.getUid().orElse(null))
        .uids(modified.getUids().stream().toList()).search(modified.getSearch().orElse(null))
        .name(modified.getName().orElse(null)).tenant(modified.getTenant().orElse(null))
        .tenants(modified.getTenants())
        .tenantTenantAccesible(modified.getTenantTenantAccesible().orElse(null)).build();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param roleRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, Role roleRef) {
    RoleAccesibleCheck proposal =
        RoleAccesibleCheck.builder().visible(true).entity(roleRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<Role> queryItem(Interaction prev, String uid, RoleFilter filter) {
    return roleReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<Role> queryItemForUpdate(Interaction prev, String uid, RoleFilter filter) {
    return roleWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<Role> queryItems(Interaction prev, RoleFilter filter, RoleCursor cursor) {
    List<Role> list = new ArrayList<>();
    Iterator<Role> slide = roleReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<Role> queryItemsForUpdate(Interaction prev, RoleFilter filter, RoleCursor cursor) {
    List<Role> list = new ArrayList<>();
    Iterator<Role> slide = roleWriteRepositoryGateway.slideForUpdate(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private RoleChangeSet visiblesReferences(Interaction prev, RoleChangeSet source) {
    source.getTenant().flatMap(TenantVO::getTenantUid).ifPresent(ref -> {
      boolean visible = tenantsVisibility.checkVisibility(prev, ref);
      if (!visible) {
        throw new NotFoundException("No tenant - " + ref);
      }
    });
    visiblesReferencesFromDomains(prev, source);
    return source;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   */
  private void visiblesReferencesFromDomains(Interaction prev, RoleChangeSet source) {
    source.getDomains().map(DomainsVO::getDomains).ifPresent(collector -> {
      List<String> collectSecurityDomain = new ArrayList<>();
      collector.forEach(item -> {
        if (null != item.getSecurityDomain()) {
          String idSecurityDomain = item.getSecurityDomainUid();
          if (!collectSecurityDomain.contains(idSecurityDomain)) {
            collectSecurityDomain.add(idSecurityDomain);
          }
        }
      });
      if (!collectSecurityDomain.isEmpty()) {
        boolean visible = securityDomainsVisibility.checkVisibility(prev, collectSecurityDomain);
        if (!visible) {
          throw new NotFoundException("No all security domain exists: " + collectSecurityDomain);
        }
      }
    });
  }
}
