package net.civeira.phylax.features.access.useridentity.application.service.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.relyingparty.application.service.visibility.RelyingPartysVisibility;
import net.civeira.phylax.features.access.role.application.service.visibility.RolesVisibility;
import net.civeira.phylax.features.access.trustedclient.application.service.visibility.TrustedClientsVisibility;
import net.civeira.phylax.features.access.user.application.service.visibility.UsersVisibility;
import net.civeira.phylax.features.access.useridentity.UserIdentity;
import net.civeira.phylax.features.access.useridentity.UserIdentityFacade;
import net.civeira.phylax.features.access.useridentity.UserIdentityRef;
import net.civeira.phylax.features.access.useridentity.application.projection.UserIdentityStateProyection;
import net.civeira.phylax.features.access.useridentity.application.request.UserIdentityStateChange;
import net.civeira.phylax.features.access.useridentity.gateway.UserIdentityCacheGateway;
import net.civeira.phylax.features.access.useridentity.gateway.UserIdentityCached;
import net.civeira.phylax.features.access.useridentity.gateway.UserIdentityReadRepositoryGateway;
import net.civeira.phylax.features.access.useridentity.gateway.UserIdentityWriteRepositoryGateway;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityCursor;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityFilter;
import net.civeira.phylax.features.access.useridentity.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.useridentity.valueobject.RolesVO;
import net.civeira.phylax.features.access.useridentity.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.useridentity.valueobject.UserVO;

@ApplicationScoped
@RequiredArgsConstructor
public class UserIdentitysVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UserIdentityFacade aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UserIdentityCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserIdentityFilterProposal> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserIdentityFixedFieldsProposal> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserIdentityVisibleContentProposal> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserIdentityHiddenFieldsProposal> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserIdentityPresetProposal> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartysVisibility relyingPartysVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RolesVisibility rolesVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TrustedClientsVisibility trustedClientsVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UserIdentityReadRepositoryGateway userIdentityReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UserIdentityWriteRepositoryGateway userIdentityWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UsersVisibility usersVisibility;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, UserIdentityFilter.builder().uids(uids).build(),
        UserIdentityCursor.builder().build()).size();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public UserIdentityStateChange copyWithFixed(Interaction prev, UserIdentityStateChange source,
      UserIdentity original) {
    UserIdentityStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    UserIdentityPresetProposal proposal = UserIdentityPresetProposal.builder().dto(withReferences)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public UserIdentityStateChange copyWithFixed(Interaction prev, UserIdentityStateChange source) {
    UserIdentityStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    UserIdentityPresetProposal proposal =
        UserIdentityPresetProposal.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param userIdentity
   * @return The input dto with hidden values
   */
  public UserIdentityStateProyection copyWithHidden(Interaction prev, UserIdentity userIdentity) {
    UserIdentityStateProyection target = new UserIdentityStateProyection(userIdentity);
    fieldsToHide(prev, userIdentity).forEach(target::unset);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, UserIdentityFilter filter) {
    return userIdentityReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.readonlyFields());
    UserIdentityFixedFieldsProposal proposal =
        UserIdentityFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param userIdentity
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, UserIdentityRef userIdentity) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, userIdentity));
    fields.addAll(aggregate.readonlyFields());
    UserIdentityFixedFieldsProposal proposal = UserIdentityFixedFieldsProposal.builder()
        .fields(fields).userIdentity(userIdentity).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    UserIdentityHiddenFieldsProposal proposal =
        UserIdentityHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param userIdentity
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, UserIdentityRef userIdentity) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    UserIdentityHiddenFieldsProposal proposal = UserIdentityHiddenFieldsProposal.builder()
        .fields(fields).userIdentity(userIdentity).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public UserIdentityCached listCachedVisibles(Interaction prev, UserIdentityFilter filter,
      UserIdentityCursor cursor) {
    UserIdentityFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<UserIdentity> listVisibles(Interaction prev, UserIdentityFilter filter,
      UserIdentityCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<UserIdentity> listVisiblesForUpdate(Interaction prev, UserIdentityFilter filter,
      UserIdentityCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public UserIdentityCached retrieveCachedVisible(Interaction prev, String uid) {
    UserIdentityCursor cursor = UserIdentityCursor.builder().limit(1).build();
    UserIdentityFilter visibleFilter =
        applyPreVisibilityFilter(prev, UserIdentityFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<UserIdentity> list =
          retrieveVisible(prev, uid).<List<UserIdentity>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<UserIdentity> retrieveVisible(Interaction prev, String uid) {
    UserIdentityFilter filter =
        applyPreVisibilityFilter(prev, UserIdentityFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<UserIdentity> retrieveVisibleForUpdate(Interaction prev, String uid) {
    UserIdentityFilter filter =
        applyPreVisibilityFilter(prev, UserIdentityFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private UserIdentityFilter applyPreVisibilityFilter(Interaction prev, UserIdentityFilter filter) {
    UserIdentityFilterProposal proposal =
        UserIdentityFilterProposal.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    return proposal.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param userIdentityRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, UserIdentity userIdentityRef) {
    UserIdentityVisibleContentProposal proposal = UserIdentityVisibleContentProposal.builder()
        .visible(true).entity(userIdentityRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<UserIdentity> queryItem(Interaction prev, String uid,
      UserIdentityFilter filter) {
    return userIdentityReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<UserIdentity> queryItemForUpdate(Interaction prev, String uid,
      UserIdentityFilter filter) {
    return userIdentityWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<UserIdentity> queryItems(Interaction prev, UserIdentityFilter filter,
      UserIdentityCursor cursor) {
    List<UserIdentity> list = new ArrayList<>();
    Iterator<UserIdentity> slide = userIdentityReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<UserIdentity> queryItemsForUpdate(Interaction prev, UserIdentityFilter filter,
      UserIdentityCursor cursor) {
    List<UserIdentity> list = new ArrayList<>();
    Iterator<UserIdentity> slide = userIdentityWriteRepositoryGateway.slideForUpdate(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private UserIdentityStateChange visiblesReferences(Interaction prev,
      UserIdentityStateChange source) {
    source.getUser().map(UserVO::getReferenceValue).ifPresent(user -> {
      boolean visible = usersVisibility.checkVisibility(prev, user);
      if (!visible) {
        throw new NotFoundException("No user - " + user);
      }
    });
    source.getRelyingParty().flatMap(RelyingPartyVO::getReferenceValue).ifPresent(ref -> {
      boolean visible = relyingPartysVisibility.checkVisibility(prev, ref);
      if (!visible) {
        throw new NotFoundException("No relying party - " + ref);
      }
    });
    source.getTrustedClient().flatMap(TrustedClientVO::getReferenceValue).ifPresent(ref -> {
      boolean visible = trustedClientsVisibility.checkVisibility(prev, ref);
      if (!visible) {
        throw new NotFoundException("No trusted client - " + ref);
      }
    });
    visiblesReferencesFromRoles(prev, source);
    return source;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   */
  private void visiblesReferencesFromRoles(Interaction prev, UserIdentityStateChange source) {
    source.getRoles().map(RolesVO::getValue).ifPresent(collector -> {
      List<String> collectRole = new ArrayList<>();
      collector.forEach(item -> {
        if (null != item.getRole()) {
          String idRole = item.getRoleReferenceValue();
          if (!collectRole.contains(idRole)) {
            collectRole.add(idRole);
          }
        }
      });
      if (!collectRole.isEmpty()) {
        boolean visible = rolesVisibility.checkVisibility(prev, collectRole);
        if (!visible) {
          throw new NotFoundException("No all role exists: " + collectRole);
        }
      }
    });
  }
}
