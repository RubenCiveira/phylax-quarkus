package net.civeira.phylax.features.access.relyingparty;

import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.command.RelyingPartyWriteAttributes;
import net.civeira.phylax.features.access.relyingparty.transition.create.RelyingPartyCreatePipeline;
import net.civeira.phylax.features.access.relyingparty.transition.delete.RelyingPartyDeletePipeline;
import net.civeira.phylax.features.access.relyingparty.transition.disable.RelyingPartyDisablePipeline;
import net.civeira.phylax.features.access.relyingparty.transition.enable.RelyingPartyEnablePipeline;
import net.civeira.phylax.features.access.relyingparty.transition.update.RelyingPartyUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class RelyingPartyFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final RelyingPartyCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final RelyingPartyDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final RelyingPartyDisablePipeline disablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final RelyingPartyEnablePipeline enablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<RelyingPartyMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final RelyingPartyUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty create(final RelyingPartyWriteAttributes attributes) {
    return RelyingParty.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty delete(final RelyingParty entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty disable(final RelyingParty base) {
    return base.disable(disablePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty enable(final RelyingParty base) {
    return base.enable(enablePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty update(final RelyingParty base,
      final RelyingPartyWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
