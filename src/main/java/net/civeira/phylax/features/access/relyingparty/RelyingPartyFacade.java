package net.civeira.phylax.features.access.relyingparty;

import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.command.RelyingPartyWriteAttributes;

@ApplicationScoped
@RequiredArgsConstructor
public class RelyingPartyFacade {

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty create(final RelyingPartyWriteAttributes attributes) {
    return RelyingParty.create(attributes);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty delete(final RelyingParty entity) {
    return entity.delete();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty disable(final RelyingParty base) {
    return base.disable();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty enable(final RelyingParty base) {
    return base.enable();
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    return RelyingParty.readonlyFields();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public RelyingParty update(final RelyingParty base,
      final RelyingPartyWriteAttributes attributes) {
    return base.update(attributes);
  }
}
