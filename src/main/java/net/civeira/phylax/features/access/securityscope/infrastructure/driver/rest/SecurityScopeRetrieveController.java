package net.civeira.phylax.features.access.securityscope.infrastructure.driver.rest;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.securityscope.application.usecase.retrieve.SecurityScopeRetrieveProjection;
import net.civeira.phylax.features.access.securityscope.application.usecase.retrieve.SecurityScopeRetrieveUsecase;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeKindOptions;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeReference;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeVisibilityOptions;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto.KindEnum;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto.VisibilityEnum;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;

@RequiredArgsConstructor
public class SecurityScopeRetrieveController {

  /**
   * @autogenerated RetrieveControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated RetrieveControllerGenerator
   */
  private final SecurityScopeRetrieveUsecase retrieve;

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param uid
   * @return
   */
  public Response securityScopeApiRetrieve(final String uid) {
    SecurityScopeRetrieveProjection retrieved =
        retrieve.retrieve(currentRequest.interaction(), SecurityScopeReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param domainEnum
   * @return
   */
  private KindEnum kindEnumToApi(SecurityScopeKindOptions domainEnum) {
    KindEnum result;
    if (domainEnum == SecurityScopeKindOptions.READ) {
      result = KindEnum.READ;
    } else if (domainEnum == SecurityScopeKindOptions.WRITE) {
      result = KindEnum.WRITE;
    } else if (domainEnum == SecurityScopeKindOptions.MANAGE) {
      result = KindEnum.MANAGE;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param dto
   * @return
   */
  private SecurityScopeApiDto toApiModel(SecurityScopeRetrieveProjection dto) {
    SecurityScopeApiDto securityScopeApiDto = new SecurityScopeApiDto();
    securityScopeApiDto.setUid(dto.getUid());
    securityScopeApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientReference()));
    securityScopeApiDto
        .setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyReference()));
    securityScopeApiDto.setResource(dto.getResource());
    securityScopeApiDto.setScope(dto.getScope());
    securityScopeApiDto.setEnabled(dto.getEnabled());
    securityScopeApiDto.setKind(kindEnumToApi(dto.getKind()));
    securityScopeApiDto.setVisibility(visibilityEnumToApi(dto.getVisibility()));
    securityScopeApiDto.setVersion(dto.getVersion());
    return securityScopeApiDto;
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param domainEnum
   * @return
   */
  private VisibilityEnum visibilityEnumToApi(SecurityScopeVisibilityOptions domainEnum) {
    VisibilityEnum result;
    if (domainEnum == SecurityScopeVisibilityOptions.PUBLIC) {
      result = VisibilityEnum.PUBLIC;
    } else if (domainEnum == SecurityScopeVisibilityOptions.AUTHORIZED) {
      result = VisibilityEnum.AUTHORIZED;
    } else if (domainEnum == SecurityScopeVisibilityOptions.EXPLICIT) {
      result = VisibilityEnum.EXPLICIT;
    } else {
      result = null;
    }
    return result;
  }
}
