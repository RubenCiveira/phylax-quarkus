package net.civeira.phylax.features.access.useridentity.application.usecase.list;

import java.util.List;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.metadata.TimestampedList;
import net.civeira.phylax.common.algorithms.metadata.WrapMetadata;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.useridentity.application.visibility.UserIdentityVisibilityFilter;
import net.civeira.phylax.features.access.useridentity.application.visibility.UserIdentitysVisibility;
import net.civeira.phylax.features.access.useridentity.domain.gateway.UserIdentityCached;
import net.civeira.phylax.features.access.useridentity.domain.gateway.UserIdentityCursor;

@ApplicationScoped
@RequiredArgsConstructor
public class UserIdentityListUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<UserIdentityListAllowDecision> listAllowEmitter;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final UserIdentitysVisibility visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    UserIdentityListAllowDecision proposal = UserIdentityListAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    listAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param filter
   * @param cursor
   * @return The slide with some values
   */
  public List<UserIdentityListProjection> list(final Interaction query,
      final UserIdentityListFilter filter, final UserIdentityListCursor cursor) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    UserIdentityVisibilityFilter visibleFilter = UserIdentityVisibilityFilter.builder()
        .uid(filter.getUid().orElse(null)).uids(filter.getUids().stream().toList())
        .search(filter.getSearch().orElse(null)).user(filter.getUser().orElse(null))
        .users(filter.getUsers()).relyingParty(filter.getRelyingParty().orElse(null))
        .relyingPartys(filter.getRelyingPartys())
        .trustedClient(filter.getTrustedClient().orElse(null))
        .trustedClients(filter.getTrustedClients())
        .userTenantTenantAccesible(filter.getUserTenantTenantAccesible().orElse(null)).build();
    UserIdentityCursor gatewayCursor = UserIdentityCursor.builder().build();
    UserIdentityCached values = visibility.listCachedVisibles(query, visibleFilter, gatewayCursor);
    List<UserIdentityListProjection> list =
        values.getValue().stream().map(value -> visibility.copyWithHidden(query, value))
            .map(UserIdentityListProjection::from).toList();
    return new TimestampedList<>(WrapMetadata.<List<UserIdentityListProjection>>builder().data(list)
        .since(values.getSince().toInstant()).build());
  }
}
