package net.civeira.phylax.features.access.securityscope.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyRef;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyReference;
import net.civeira.phylax.features.access.securityscope.SecurityScopeKindOptions;
import net.civeira.phylax.features.access.securityscope.SecurityScopeReference;
import net.civeira.phylax.features.access.securityscope.SecurityScopeVisibilityOptions;
import net.civeira.phylax.features.access.securityscope.application.projection.SecurityScopeStateProyection;
import net.civeira.phylax.features.access.securityscope.application.request.SecurityScopeStateChange;
import net.civeira.phylax.features.access.securityscope.application.usecase.create.SecurityScopeCreateUsecase;
import net.civeira.phylax.features.access.securityscope.application.usecase.delete.SecurityScopeCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.securityscope.application.usecase.delete.SecurityScopeDeleteUsecase;
import net.civeira.phylax.features.access.securityscope.application.usecase.disable.SecurityScopeDisableStatus;
import net.civeira.phylax.features.access.securityscope.application.usecase.disable.SecurityScopeDisableUsecase;
import net.civeira.phylax.features.access.securityscope.application.usecase.enable.SecurityScopeEnableStatus;
import net.civeira.phylax.features.access.securityscope.application.usecase.enable.SecurityScopeEnableUsecase;
import net.civeira.phylax.features.access.securityscope.application.usecase.list.SecurityScopeListUsecase;
import net.civeira.phylax.features.access.securityscope.application.usecase.retrieve.SecurityScopeRetrieveUsecase;
import net.civeira.phylax.features.access.securityscope.application.usecase.update.SecurityScopeUpdateUsecase;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeCursor;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeFilter;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.TrustedClientReference;
import net.civeira.phylax.generated.openapi.api.SecurityScopeApi;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto.KindEnum;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto.VisibilityEnum;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDtoList;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;

@RequiredArgsConstructor
public class SecurityScopeController implements SecurityScopeApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String RELYING_PARTYS_A_P_P_E_N_D = "&relying-partys=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String RESOURCE_A_P_P_E_N_D = "&resource=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String TRUSTED_CLIENTS_A_P_P_E_N_D = "&trusted-clients=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final SecurityScopeCreateUsecase create;

  /**
   * SecurityScope
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final SecurityScopeDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final SecurityScopeDisableUsecase disable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final SecurityScopeEnableUsecase enable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final SecurityScopeListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final SecurityScopeRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final SecurityScopeUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param resource
   * @param trustedClients
   * @param relyingPartys
   * @return
   */
  @Override
  public Response securityScopeApiBatchDelete(final List<String> uids, final String search,
      final String resource, final List<String> trustedClients, final List<String> relyingPartys) {
    SecurityScopeFilter.SecurityScopeFilterBuilder filterBuilder = SecurityScopeFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.resource(resource);
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    SecurityScopeFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response securityScopeApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(SecurityScopeCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param resource
   * @param trustedClients
   * @param relyingPartys
   * @return
   */
  @Override
  public Response securityScopeApiBatchDisable(final List<String> uids, final String search,
      final String resource, final List<String> trustedClients, final List<String> relyingPartys) {
    SecurityScopeFilter.SecurityScopeFilterBuilder filterBuilder = SecurityScopeFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.resource(resource);
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    SecurityScopeFilter filter = filterBuilder.build();
    BatchIdentificator task = disable.disable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response securityScopeApiBatchDisableQuery(final String batchId) {
    BatchProgress task = disable.checkProgress(
        SecurityScopeDisableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param resource
   * @param trustedClients
   * @param relyingPartys
   * @return
   */
  @Override
  public Response securityScopeApiBatchEnable(final List<String> uids, final String search,
      final String resource, final List<String> trustedClients, final List<String> relyingPartys) {
    SecurityScopeFilter.SecurityScopeFilterBuilder filterBuilder = SecurityScopeFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.resource(resource);
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    SecurityScopeFilter filter = filterBuilder.build();
    BatchIdentificator task = enable.enable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response securityScopeApiBatchEnableQuery(final String batchId) {
    BatchProgress task = enable.checkProgress(
        SecurityScopeEnableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param securityScope
   * @return
   */
  @Override
  @Transactional
  public Response securityScopeApiCreate(SecurityScopeApiDto securityScope) {
    SecurityScopeStateProyection created =
        create.create(currentRequest.interaction(), toDomainModel(securityScope));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response securityScopeApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), SecurityScopeReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response securityScopeApiDisable(final String uid) {
    SecurityScopeStateProyection updated =
        disable.disable(currentRequest.interaction(), SecurityScopeReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response securityScopeApiEnable(final String uid) {
    SecurityScopeStateProyection updated =
        enable.enable(currentRequest.interaction(), SecurityScopeReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param resource
   * @param trustedClients
   * @param relyingPartys
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response securityScopeApiList(final List<String> uids, final String search,
      final String resource, final List<String> trustedClients, final List<String> relyingPartys,
      final Integer limit, final String sinceUid) {
    SecurityScopeFilter.SecurityScopeFilterBuilder filterBuilder = SecurityScopeFilter.builder();
    SecurityScopeCursor.SecurityScopeCursorBuilder cursorBuilder = SecurityScopeCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.resource(resource);
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    SecurityScopeFilter filter = filterBuilder.build();
    SecurityScopeCursor cursor = cursorBuilder.build();
    List<SecurityScopeStateProyection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "security-scope-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response securityScopeApiRetrieve(final String uid) {
    SecurityScopeStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), SecurityScopeReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param securityScope
   * @return
   */
  @Override
  @Transactional
  public Response securityScopeApiUpdate(final String uid,
      final SecurityScopeApiDto securityScope) {
    SecurityScopeStateProyection updated = update.update(currentRequest.interaction(),
        SecurityScopeReference.of(uid), toDomainModel(securityScope));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param domainEnum
   * @return
   */
  private KindEnum kindEnumToApi(SecurityScopeKindOptions domainEnum) {
    KindEnum result;
    if (domainEnum == SecurityScopeKindOptions.READ) {
      result = KindEnum.READ;
    } else if (domainEnum == SecurityScopeKindOptions.WRITE) {
      result = KindEnum.WRITE;
    } else if (domainEnum == SecurityScopeKindOptions.MANAGE) {
      result = KindEnum.MANAGE;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param apiEnum
   * @return
   */
  private SecurityScopeKindOptions kindEnumToDomain(KindEnum apiEnum) {
    SecurityScopeKindOptions result;
    if (apiEnum == KindEnum.READ) {
      result = SecurityScopeKindOptions.READ;
    } else if (apiEnum == KindEnum.WRITE) {
      result = SecurityScopeKindOptions.WRITE;
    } else if (apiEnum == KindEnum.MANAGE) {
      result = SecurityScopeKindOptions.MANAGE;
    } else if (null == apiEnum) {
      result = null;
    } else {
      throw new IllegalArgumentException();
    }
    return result;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private SecurityScopeApiDto toApiModel(SecurityScopeStateProyection dto) {
    SecurityScopeApiDto securityScopeApiDto = new SecurityScopeApiDto();
    securityScopeApiDto.setUid(dto.getUid().orElse(null));
    securityScopeApiDto.setTrustedClient(new TrustedClientApiRef()
        .$ref(dto.getTrustedClient().map(TrustedClientRef::getUidValue).orElse(null)));
    securityScopeApiDto.setRelyingParty(new RelyingPartyApiRef()
        .$ref(dto.getRelyingParty().map(RelyingPartyRef::getUidValue).orElse(null)));
    securityScopeApiDto.setResource(dto.getResource().orElse(null));
    securityScopeApiDto.setScope(dto.getScope().orElse(null));
    securityScopeApiDto.setEnabled(dto.getEnabled().orElse(null));
    securityScopeApiDto.setKind(kindEnumToApi(dto.getKind().orElse(null)));
    securityScopeApiDto.setVisibility(visibilityEnumToApi(dto.getVisibility().orElse(null)));
    securityScopeApiDto.setVersion(dto.getVersion().orElse(null));
    return securityScopeApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param securityScopeApiDto
   * @return
   */
  private SecurityScopeStateChange toDomainModel(SecurityScopeApiDto securityScopeApiDto) {
    SecurityScopeStateChange dto = new SecurityScopeStateChange();
    if (null != securityScopeApiDto.getUid()) {
      dto.setUid(securityScopeApiDto.getUid());
    }
    if (null != securityScopeApiDto.getTrustedClient()) {
      dto.setTrustedClient(
          TrustedClientReference.of(securityScopeApiDto.getTrustedClient().get$Ref()));
    }
    if (null != securityScopeApiDto.getRelyingParty()) {
      dto.setRelyingParty(
          RelyingPartyReference.of(securityScopeApiDto.getRelyingParty().get$Ref()));
    }
    if (null != securityScopeApiDto.getResource()) {
      dto.setResource(securityScopeApiDto.getResource());
    }
    if (null != securityScopeApiDto.getScope()) {
      dto.setScope(securityScopeApiDto.getScope());
    }
    if (null != securityScopeApiDto.getEnabled()) {
      dto.setEnabled(securityScopeApiDto.getEnabled());
    }
    if (null != securityScopeApiDto.getKind()) {
      dto.setKind(kindEnumToDomain(securityScopeApiDto.getKind()));
    }
    if (null != securityScopeApiDto.getVisibility()) {
      dto.setVisibility(visibilityEnumToDomain(securityScopeApiDto.getVisibility()));
    }
    if (null != securityScopeApiDto.getVersion()) {
      dto.setVersion(securityScopeApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param securityScopes
   * @param filter
   * @param cursor
   * @return
   */
  private SecurityScopeApiDtoList toListApiModel(List<SecurityScopeStateProyection> securityScopes,
      SecurityScopeFilter filter, SecurityScopeCursor cursor) {
    Optional<SecurityScopeStateProyection> last = securityScopes.isEmpty() ? Optional.empty()
        : Optional.of(securityScopes.get(securityScopes.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getResource().ifPresent(filterResource -> {
      String resourceValue =
          URLEncoder.encode(String.valueOf(filterResource), StandardCharsets.UTF_8);
      self.append(RESOURCE_A_P_P_E_N_D + resourceValue);
      next.append(RESOURCE_A_P_P_E_N_D + resourceValue);
      first.append(RESOURCE_A_P_P_E_N_D + resourceValue);
    });
    if (!filter.getTrustedClients().isEmpty()) {
      String trustedClientsValue =
          URLEncoder.encode(String.join(",", filter.getTrustedClients()), StandardCharsets.UTF_8);
      self.append(TRUSTED_CLIENTS_A_P_P_E_N_D + trustedClientsValue);
      next.append(TRUSTED_CLIENTS_A_P_P_E_N_D + trustedClientsValue);
      first.append(TRUSTED_CLIENTS_A_P_P_E_N_D + trustedClientsValue);
    }
    if (!filter.getRelyingPartys().isEmpty()) {
      String relyingPartysValue =
          URLEncoder.encode(String.join(",", filter.getRelyingPartys()), StandardCharsets.UTF_8);
      self.append(RELYING_PARTYS_A_P_P_E_N_D + relyingPartysValue);
      next.append(RELYING_PARTYS_A_P_P_E_N_D + relyingPartysValue);
      first.append(RELYING_PARTYS_A_P_P_E_N_D + relyingPartysValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> lastDto.getUid().ifPresent(
        uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8))));
    return new SecurityScopeApiDtoList()
        .items(securityScopes.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param domainEnum
   * @return
   */
  private VisibilityEnum visibilityEnumToApi(SecurityScopeVisibilityOptions domainEnum) {
    VisibilityEnum result;
    if (domainEnum == SecurityScopeVisibilityOptions.PUBLIC) {
      result = VisibilityEnum.PUBLIC;
    } else if (domainEnum == SecurityScopeVisibilityOptions.AUTHORIZED) {
      result = VisibilityEnum.AUTHORIZED;
    } else if (domainEnum == SecurityScopeVisibilityOptions.EXPLICIT) {
      result = VisibilityEnum.EXPLICIT;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param apiEnum
   * @return
   */
  private SecurityScopeVisibilityOptions visibilityEnumToDomain(VisibilityEnum apiEnum) {
    SecurityScopeVisibilityOptions result;
    if (apiEnum == VisibilityEnum.PUBLIC) {
      result = SecurityScopeVisibilityOptions.PUBLIC;
    } else if (apiEnum == VisibilityEnum.AUTHORIZED) {
      result = SecurityScopeVisibilityOptions.AUTHORIZED;
    } else if (apiEnum == VisibilityEnum.EXPLICIT) {
      result = SecurityScopeVisibilityOptions.EXPLICIT;
    } else if (null == apiEnum) {
      result = null;
    } else {
      throw new IllegalArgumentException();
    }
    return result;
  }
}
