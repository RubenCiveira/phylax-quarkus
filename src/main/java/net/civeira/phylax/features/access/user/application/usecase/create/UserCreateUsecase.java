package net.civeira.phylax.features.access.user.application.usecase.create;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.user.application.visibility.UsersVisibility;
import net.civeira.phylax.features.access.user.domain.User;
import net.civeira.phylax.features.access.user.domain.UserChangeSet;
import net.civeira.phylax.features.access.user.domain.gateway.UserCacheGateway;
import net.civeira.phylax.features.access.user.domain.gateway.UserWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class UserCreateUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final UserCacheGateway cache;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<UserCreateAllowDecision> createAllowEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<UserCreateCheck> createCheckEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<UserCreateEnrich> createEnrichEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final UserWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final UsersVisibility visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    UserCreateAllowDecision proposal = UserCreateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    createAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param input
   * @return The slide with some values
   */
  public UserCreateProjection create(final Interaction query, final UserCreateInput input) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    UserCreateInput filled =
        UserCreateInput.fromChangeSet(visibility.copyWithFixed(query, input.toChangeSet()));
    UserCreateCheck check = UserCreateCheck.builder().interaction(query).input(filled).build();
    createCheckEmitter.fire(check);
    UserCreateEnrich proposal = UserCreateEnrich.builder().interaction(query).input(filled).build();
    createEnrichEmitter.fire(proposal);
    UserChangeSet dto = proposal.getInput().toChangeSet();
    User entity = User.create(dto);
    User created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUid()));
    cache.update(created);
    return UserCreateProjection.from(visibility.copyWithHidden(query, created));
  }
}
