package net.civeira.phylax.features.access.user.application.projection;

import java.time.OffsetDateTime;
import java.util.Optional;

import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.user.User;

public class UserStateProyection {

  /**
   * A bloqued user cant login on the system, until these date. On his login attempst, hue will
   * recive a generic not allowed message.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<OffsetDateTime> blockedUntil = Optional.empty();

  /**
   * An optional email used to send notifications to the user
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> email = Optional.empty();

  /**
   * A disabled user cant login on the system. On his login attempts, he will recive a specific warn
   * of his disabled account.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> enabled = Optional.empty();

  /**
   * El language de user
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> language = Optional.empty();

  /**
   * The user name to identify on the login screen
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> name = Optional.empty();

  /**
   * If the user is not delegated, the phrasse to identify
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> password = Optional.empty();

  /**
   * Si se identificó con un proveedor, se marca con cual (aunque el provedor cambie luego)
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> provider = Optional.empty();

  /**
   * the seed used to the otp login
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> secondFactorSeed = Optional.empty();

  /**
   * El temporal password de user
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> temporalPassword = Optional.empty();

  /**
   * Los usuarios que no tienen tenant son roots del sistema
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<TenantRef> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * If is true, the user has a otp to force mfa on login
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> useSecondFactors = Optional.empty();

  /**
   * Campo con el número de version de user para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public UserStateProyection(final User entity) {
    uid = Optional.of(entity.getUid().getValue());
    tenant = entity.getTenant().getValue();
    name = Optional.of(entity.getName().getValue());
    password = Optional.of("******");
    email = entity.getEmail().getValue();
    enabled = entity.getEnabled().getValue();
    temporalPassword = entity.getTemporalPassword().getValue();
    useSecondFactors = entity.getUseSecondFactors().getValue();
    secondFactorSeed = Optional.of("******");
    blockedUntil = entity.getBlockedUntil().getValue();
    language = entity.getLanguage().getValue();
    provider = entity.getProvider().getValue();
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<OffsetDateTime> getBlockedUntil() {
    return blockedUntil;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getEnabled() {
    return enabled;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getLanguage() {
    return language;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getName() {
    return name;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getPassword() {
    return password;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getProvider() {
    return provider;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getSecondFactorSeed() {
    return secondFactorSeed;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getTemporalPassword() {
    return temporalPassword;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<TenantRef> getTenant() {
    return tenant;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getUseSecondFactors() {
    return useSecondFactors;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setBlockedUntil(final Optional<OffsetDateTime> value) {
    this.blockedUntil = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setEmail(final Optional<String> value) {
    this.email = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setEnabled(final Optional<Boolean> value) {
    this.enabled = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setLanguage(final Optional<String> value) {
    this.language = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setName(final Optional<String> value) {
    this.name = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setPassword(final Optional<String> value) {
    this.password = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setProvider(final Optional<String> value) {
    this.provider = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setSecondFactorSeed(final Optional<String> value) {
    this.secondFactorSeed = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setTemporalPassword(final Optional<Boolean> value) {
    this.temporalPassword = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setTenant(final Optional<TenantRef> value) {
    this.tenant = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setUseSecondFactors(final Optional<Boolean> value) {
    this.useSecondFactors = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public UserStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("password".equals(field)) {
      this.unsetPassword();
    }
    if ("email".equals(field)) {
      this.unsetEmail();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("temporalPassword".equals(field)) {
      this.unsetTemporalPassword();
    }
    if ("useSecondFactors".equals(field)) {
      this.unsetUseSecondFactors();
    }
    if ("secondFactorSeed".equals(field)) {
      this.unsetSecondFactorSeed();
    }
    if ("blockedUntil".equals(field)) {
      this.unsetBlockedUntil();
    }
    if ("language".equals(field)) {
      this.unsetLanguage();
    }
    if ("provider".equals(field)) {
      this.unsetProvider();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetBlockedUntil() {
    this.blockedUntil = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetEmail() {
    this.email = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetLanguage() {
    this.language = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetPassword() {
    this.password = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetProvider() {
    this.provider = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetSecondFactorSeed() {
    this.secondFactorSeed = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetTemporalPassword() {
    this.temporalPassword = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetUseSecondFactors() {
    this.useSecondFactors = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public UserStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
