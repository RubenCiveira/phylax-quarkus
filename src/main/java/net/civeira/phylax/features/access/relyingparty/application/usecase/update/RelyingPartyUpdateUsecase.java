package net.civeira.phylax.features.access.relyingparty.application.usecase.update;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.relyingparty.application.visibility.RelyingPartysVisibility;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyChangeSet;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyRef;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyCacheGateway;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class RelyingPartyUpdateUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final RelyingPartyCacheGateway cache;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final RelyingPartyWriteRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<RelyingPartyUpdateAllowDecision> updateAllowEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<RelyingPartyUpdateCheck> updateCheckEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<RelyingPartyUpdateEnrich> updateEnrichEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final RelyingPartysVisibility visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final RelyingPartyRef reference) {
    RelyingPartyUpdateAllowDecision base = RelyingPartyUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    RelyingPartyUpdateAllowDecision base = RelyingPartyUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @param input
   * @return The slide with some values
   */
  public RelyingPartyUpdateProjection update(final Interaction query,
      final RelyingPartyRef reference, final RelyingPartyUpdateInput input) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    RelyingParty original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    RelyingPartyUpdateInput filled =
        RelyingPartyUpdateInput.fromChangeSet(visibility.copyWithFixed(query, input.toChangeSet()));
    RelyingPartyUpdateCheck check = RelyingPartyUpdateCheck.builder().input(filled)
        .interaction(query).reference(reference).build();
    updateCheckEmitter.fire(check);
    RelyingPartyUpdateEnrich proposal = RelyingPartyUpdateEnrich.builder().input(filled)
        .interaction(query).reference(reference).build();
    updateEnrichEmitter.fire(proposal);
    RelyingPartyChangeSet dto = proposal.getInput().toChangeSet();
    RelyingParty saved = gateway.update(original, original.update(dto));
    cache.update(saved);
    return RelyingPartyUpdateProjection.from(visibility.copyWithHidden(query, saved));
  }
}
