package net.civeira.phylax.features.access.user.valueobject;

import java.util.Optional;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing si se identific√≥ con un proveedor, se marca con cual (aunque el
 * provedor cambie luego) of user.
 * <p>
 * This class ensures that the provider is a {@code String} and encapsulates its validation and
 * formatting logic. It is immutable and compliant with DDD (Domain-Driven Design) principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class ProviderVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param provider
   * @return An empty instance
   */
  public static ProviderVO from(final String provider) {
    return tryFrom(provider);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static ProviderVO nullValue() {
    return new ProviderVO(null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param provider
   * @return An empty instance
   */
  public static ProviderVO tryFrom(final Object provider) {
    ConstraintFailList list = new ConstraintFailList();
    ProviderVO result = tryFrom(provider, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param provider temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> ProviderVO tryFrom(final Object provider,
      final T fails) {
    if (null == provider) {
      return new ProviderVO(null);
    } else if (provider instanceof String castedProvider) {
      return new ProviderVO(castedProvider);
    } else {
      fails.add(new ConstraintFail("wrong-type", "provider", provider.getClass(),
          "A String type is expected for provider"));
      return null;
    }
  }

  /**
   * The actual value of the name.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final String value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<String> getValue() {
    return Optional.ofNullable(value);
  }

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
