package net.civeira.phylax.features.access.relyingparty.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyReference;
import net.civeira.phylax.features.access.relyingparty.application.projection.RelyingPartyStateProyection;
import net.civeira.phylax.features.access.relyingparty.application.request.RelyingPartyStateChange;
import net.civeira.phylax.features.access.relyingparty.application.usecase.create.RelyingPartyCreateUsecase;
import net.civeira.phylax.features.access.relyingparty.application.usecase.delete.RelyingPartyCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.relyingparty.application.usecase.delete.RelyingPartyDeleteUsecase;
import net.civeira.phylax.features.access.relyingparty.application.usecase.disable.RelyingPartyDisableStatus;
import net.civeira.phylax.features.access.relyingparty.application.usecase.disable.RelyingPartyDisableUsecase;
import net.civeira.phylax.features.access.relyingparty.application.usecase.enable.RelyingPartyEnableStatus;
import net.civeira.phylax.features.access.relyingparty.application.usecase.enable.RelyingPartyEnableUsecase;
import net.civeira.phylax.features.access.relyingparty.application.usecase.list.RelyingPartyListUsecase;
import net.civeira.phylax.features.access.relyingparty.application.usecase.retrieve.RelyingPartyRetrieveUsecase;
import net.civeira.phylax.features.access.relyingparty.application.usecase.update.RelyingPartyUpdateUsecase;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyCursor;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyFilter;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyOrder;
import net.civeira.phylax.generated.openapi.api.RelyingPartyApi;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiDto;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiDtoList;

@RequiredArgsConstructor
public class RelyingPartyController implements RelyingPartyApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String API_KEY_A_P_P_E_N_D = "&api-key=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String CODE_A_P_P_E_N_D = "&code=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RelyingPartyCreateUsecase create;

  /**
   * RelyingParty
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RelyingPartyDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RelyingPartyDisableUsecase disable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RelyingPartyEnableUsecase enable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RelyingPartyListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RelyingPartyRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RelyingPartyUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param apiKey
   * @param code
   * @return
   */
  @Override
  public Response relyingPartyApiBatchDelete(final List<String> uids, final String search,
      final String apiKey, final String code) {
    RelyingPartyFilter.RelyingPartyFilterBuilder filterBuilder = RelyingPartyFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.apiKey(apiKey);
    filterBuilder = filterBuilder.code(code);
    RelyingPartyFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response relyingPartyApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(RelyingPartyCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param apiKey
   * @param code
   * @return
   */
  @Override
  public Response relyingPartyApiBatchDisable(final List<String> uids, final String search,
      final String apiKey, final String code) {
    RelyingPartyFilter.RelyingPartyFilterBuilder filterBuilder = RelyingPartyFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.apiKey(apiKey);
    filterBuilder = filterBuilder.code(code);
    RelyingPartyFilter filter = filterBuilder.build();
    BatchIdentificator task = disable.disable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response relyingPartyApiBatchDisableQuery(final String batchId) {
    BatchProgress task = disable.checkProgress(
        RelyingPartyDisableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param apiKey
   * @param code
   * @return
   */
  @Override
  public Response relyingPartyApiBatchEnable(final List<String> uids, final String search,
      final String apiKey, final String code) {
    RelyingPartyFilter.RelyingPartyFilterBuilder filterBuilder = RelyingPartyFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.apiKey(apiKey);
    filterBuilder = filterBuilder.code(code);
    RelyingPartyFilter filter = filterBuilder.build();
    BatchIdentificator task = enable.enable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response relyingPartyApiBatchEnableQuery(final String batchId) {
    BatchProgress task = enable.checkProgress(
        RelyingPartyEnableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param relyingParty
   * @return
   */
  @Override
  @Transactional
  public Response relyingPartyApiCreate(RelyingPartyApiDto relyingParty) {
    RelyingPartyStateProyection created =
        create.create(currentRequest.interaction(), toDomainModel(relyingParty));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response relyingPartyApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), RelyingPartyReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response relyingPartyApiDisable(final String uid) {
    RelyingPartyStateProyection updated =
        disable.disable(currentRequest.interaction(), RelyingPartyReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response relyingPartyApiEnable(final String uid) {
    RelyingPartyStateProyection updated =
        enable.enable(currentRequest.interaction(), RelyingPartyReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param apiKey
   * @param code
   * @param limit
   * @param sinceUid
   * @param sinceCode
   * @param order
   * @return
   */
  @Override
  public Response relyingPartyApiList(final List<String> uids, final String search,
      final String apiKey, final String code, final Integer limit, final String sinceUid,
      final String sinceCode, final String order) {
    List<RelyingPartyOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    RelyingPartyFilter.RelyingPartyFilterBuilder filterBuilder = RelyingPartyFilter.builder();
    RelyingPartyCursor.RelyingPartyCursorBuilder cursorBuilder = RelyingPartyCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.apiKey(apiKey);
    filterBuilder = filterBuilder.code(code);
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    cursorBuilder = cursorBuilder.sinceCode(sinceCode);
    cursorBuilder = cursorBuilder.order(orderSteps);
    RelyingPartyFilter filter = filterBuilder.build();
    RelyingPartyCursor cursor = cursorBuilder.build();
    List<RelyingPartyStateProyection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "relying-party-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response relyingPartyApiRetrieve(final String uid) {
    RelyingPartyStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), RelyingPartyReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param relyingParty
   * @return
   */
  @Override
  @Transactional
  public Response relyingPartyApiUpdate(final String uid, final RelyingPartyApiDto relyingParty) {
    RelyingPartyStateProyection updated = update.update(currentRequest.interaction(),
        RelyingPartyReference.of(uid), toDomainModel(relyingParty));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param label
   * @return
   */
  private RelyingPartyOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("code-asc")) {
      return RelyingPartyOrder.CODE_ASC;
    } else if (label.trim().equals("code-desc")) {
      return RelyingPartyOrder.CODE_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private RelyingPartyApiDto toApiModel(RelyingPartyStateProyection dto) {
    RelyingPartyApiDto relyingPartyApiDto = new RelyingPartyApiDto();
    relyingPartyApiDto.setUid(dto.getUid().orElse(null));
    relyingPartyApiDto.setCode(dto.getCode().orElse(null));
    relyingPartyApiDto.setApiKey(dto.getApiKey().orElse(null));
    relyingPartyApiDto.setEnabled(dto.getEnabled().orElse(null));
    relyingPartyApiDto.setVersion(dto.getVersion().orElse(null));
    return relyingPartyApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param relyingPartyApiDto
   * @return
   */
  private RelyingPartyStateChange toDomainModel(RelyingPartyApiDto relyingPartyApiDto) {
    RelyingPartyStateChange dto = new RelyingPartyStateChange();
    if (null != relyingPartyApiDto.getUid()) {
      dto.setUid(relyingPartyApiDto.getUid());
    }
    if (null != relyingPartyApiDto.getCode()) {
      dto.setCode(relyingPartyApiDto.getCode());
    }
    if (null != relyingPartyApiDto.getApiKey()) {
      dto.setApiKey(relyingPartyApiDto.getApiKey());
    }
    if (null != relyingPartyApiDto.getEnabled()) {
      dto.setEnabled(relyingPartyApiDto.getEnabled());
    }
    if (null != relyingPartyApiDto.getVersion()) {
      dto.setVersion(relyingPartyApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param relyingPartys
   * @param filter
   * @param cursor
   * @return
   */
  private RelyingPartyApiDtoList toListApiModel(List<RelyingPartyStateProyection> relyingPartys,
      RelyingPartyFilter filter, RelyingPartyCursor cursor) {
    Optional<RelyingPartyStateProyection> last = relyingPartys.isEmpty() ? Optional.empty()
        : Optional.of(relyingPartys.get(relyingPartys.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getApiKey().ifPresent(filterApiKey -> {
      String apiKeyValue = URLEncoder.encode(String.valueOf(filterApiKey), StandardCharsets.UTF_8);
      self.append(API_KEY_A_P_P_E_N_D + apiKeyValue);
      next.append(API_KEY_A_P_P_E_N_D + apiKeyValue);
      first.append(API_KEY_A_P_P_E_N_D + apiKeyValue);
    });
    filter.getCode().ifPresent(filterCode -> {
      String codeValue = URLEncoder.encode(String.valueOf(filterCode), StandardCharsets.UTF_8);
      self.append(CODE_A_P_P_E_N_D + codeValue);
      next.append(CODE_A_P_P_E_N_D + codeValue);
      first.append(CODE_A_P_P_E_N_D + codeValue);
    });
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceCode().ifPresent(sinceCode -> self
        .append("&since-code=" + URLEncoder.encode(sinceCode, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      lastDto.getUid().ifPresent(
          uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8)));
      cursor.getSinceCode().ifPresent(sinceCode -> next
          .append("&since-code=" + URLEncoder.encode(sinceCode, StandardCharsets.UTF_8)));
    });
    return new RelyingPartyApiDtoList().items(relyingPartys.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final RelyingPartyOrder order) {
    if (null == order) {
      return null;
    } else if (order == RelyingPartyOrder.CODE_ASC) {
      return "code-asc";
    } else if (order == RelyingPartyOrder.CODE_DESC) {
      return "code-desc";
    } else {
      return null;
    }
  }
}
