package net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.gateway;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.UserAcceptedTermnsOfUse;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.UserAcceptedTermnsOfUseRef;

public interface UserAcceptedTermnsOfUseWriteRepositoryGateway {

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long countForUpdate(UserAcceptedTermnsOfUseFilter filter);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @param verifier a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  UserAcceptedTermnsOfUse create(UserAcceptedTermnsOfUse entity,
      Predicate<UserAcceptedTermnsOfUse> verifier);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  UserAcceptedTermnsOfUse create(UserAcceptedTermnsOfUse entity);

  /**
   * Delete an existing record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   */
  void delete(UserAcceptedTermnsOfUse entity);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean existsForUpdate(String uid, Optional<UserAcceptedTermnsOfUseFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<UserAcceptedTermnsOfUse> findForUpdate(UserAcceptedTermnsOfUseFilter filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<UserAcceptedTermnsOfUse> listForUpdate(UserAcceptedTermnsOfUseFilter filter);

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  UserAcceptedTermnsOfUse resolveForUpdate(UserAcceptedTermnsOfUseRef reference);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<UserAcceptedTermnsOfUse> retrieveForUpdate(String uid,
      Optional<UserAcceptedTermnsOfUseFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<UserAcceptedTermnsOfUse> slideForUpdate(UserAcceptedTermnsOfUseFilter filter,
      UserAcceptedTermnsOfUseCursor cursor);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  UserAcceptedTermnsOfUse update(UserAcceptedTermnsOfUseRef reference,
      UserAcceptedTermnsOfUse entity);
}
