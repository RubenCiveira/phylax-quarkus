package net.civeira.phylax.features.access.useracceptedtermnsofuse.command;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.user.UserRef;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.UserAcceptedTermnsOfUse;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.UserAcceptedTermnsOfUseReference;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.valueobject.AcceptDateVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.valueobject.ConditionsVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.valueobject.UidVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.valueobject.UserVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.valueobject.VersionVO;

@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserAcceptedTermnsOfUseChangeProposal
    implements UserAcceptedTermnsOfUseWriteAttributes {

  /**
   * @autogenerated EntityChangeProposalGenerator
   */
  public static class UserAcceptedTermnsOfUseChangeProposalBuilder {

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param acceptDate
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder acceptDate(
        final OffsetDateTime acceptDate) {
      return acceptDate(Optional.of(AcceptDateVO.from(acceptDate)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param acceptDate
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder acceptDate(
        final Optional<AcceptDateVO> acceptDate) {
      this.acceptDate$value = acceptDate;
      this.acceptDate$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param conditions
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder conditions(
        final TenantTermsOfUseRef conditions) {
      return conditions(Optional.of(ConditionsVO.from(conditions)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param conditions
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder conditions(
        final Optional<ConditionsVO> conditions) {
      this.conditions$value = conditions;
      this.conditions$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param uid
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param uid
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param user
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder user(final UserRef user) {
      return user(Optional.of(UserVO.from(user)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param user
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder user(final Optional<UserVO> user) {
      this.user$value = user;
      this.user$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param version
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param version
     * @return
     */
    public UserAcceptedTermnsOfUseChangeProposalBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * El accept date de user accepted termns of use
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<AcceptDateVO> acceptDate = Optional.empty();

  /**
   * El conditions de user accepted termns of use
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<ConditionsVO> conditions = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * El user de user accepted termns of use
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<UserVO> user = Optional.empty();

  /**
   * Campo con el n√∫mero de version de user accepted termns of use para controlar bloqueos
   * optimistas
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param attributes
   */
  public UserAcceptedTermnsOfUseChangeProposal(
      final UserAcceptedTermnsOfUseWriteAttributes attributes) {
    uid = attributes.getUid();
    user = attributes.getUser();
    conditions = attributes.getConditions();
    acceptDate = attributes.getAcceptDate();
    version = attributes.getVersion();
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param entity
   */
  public UserAcceptedTermnsOfUseChangeProposal(final UserAcceptedTermnsOfUse entity) {
    uid = Optional.of(entity.getUid());
    user = Optional.of(entity.getUser());
    conditions = Optional.of(entity.getConditions());
    acceptDate = Optional.of(entity.getAcceptDate());
    version = Optional.of(entity.getVersion());
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAcceptedTermnsOfUseReference asReference() {
    return uid.map(UidVO::getValue).map(UserAcceptedTermnsOfUseReference::of).orElseThrow();
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<AcceptDateVO> getAcceptDate() {
    return acceptDate;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<ConditionsVO> getConditions() {
    return conditions;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<UserVO> getUser() {
    return user;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal setAcceptDate(final OffsetDateTime value) {
    this.acceptDate = Optional.of(AcceptDateVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal setConditions(final TenantTermsOfUseRef value) {
    this.conditions = Optional.of(ConditionsVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal setUser(final UserRef value) {
    this.user = Optional.of(UserVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("user".equals(field)) {
      this.unsetUser();
    }
    if ("conditions".equals(field)) {
      this.unsetConditions();
    }
    if ("acceptDate".equals(field)) {
      this.unsetAcceptDate();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal unsetAcceptDate() {
    this.acceptDate = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal unsetConditions() {
    this.conditions = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal unsetUser() {
    this.user = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserAcceptedTermnsOfUseChangeProposal unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
