package net.civeira.phylax.features.access.securityscope.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.features.access.securityscope.application.usecase.delete.SecurityScopeCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.securityscope.application.usecase.delete.SecurityScopeDeleteFilter;
import net.civeira.phylax.features.access.securityscope.application.usecase.delete.SecurityScopeDeleteUsecase;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeReference;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;

@RequiredArgsConstructor
public class SecurityScopeDeleteController {

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final SecurityScopeDeleteUsecase delete;

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uids
   * @param search
   * @param resource
   * @param trustedClient
   * @param trustedClients
   * @param relyingParty
   * @param relyingPartys
   * @return
   */
  public Response securityScopeApiBatchDelete(final List<String> uids, final String search,
      final String resource, final String trustedClient, final List<String> trustedClients,
      final String relyingParty, final List<String> relyingPartys) {
    SecurityScopeDeleteFilter.SecurityScopeDeleteFilterBuilder filterBuilder =
        SecurityScopeDeleteFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.resource(resource);
    if (null != trustedClient) {
      filterBuilder = filterBuilder.trustedClient(TrustedClientReference.of(trustedClient));
    }
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    if (null != relyingParty) {
      filterBuilder = filterBuilder.relyingParty(RelyingPartyReference.of(relyingParty));
    }
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    SecurityScopeDeleteFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param batchId
   * @return
   */
  public Response securityScopeApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(SecurityScopeCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response securityScopeApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), SecurityScopeReference.of(uid));
    return Response.noContent().build();
  }
}
