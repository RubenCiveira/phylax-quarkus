package net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.EqualsAndHashCode;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing el accept date de user accepted termns of use of
 * userAcceptedTermnsOfUse.
 * <p>
 * This class ensures that the accept date is a {@code String} and encapsulates its validation and
 * formatting logic. It is immutable and compliant with DDD (Domain-Driven Design) principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@RequiredArgsConstructor
@EqualsAndHashCode
public class AcceptDateVO {

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param acceptDate
   * @return An empty instance
   */
  public static AcceptDateVO from(final OffsetDateTime acceptDate) {
    return tryFrom(acceptDate);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static AcceptDateVO nullValue() {
    return new AcceptDateVO(null);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param acceptDate
   * @return An empty instance
   */
  public static AcceptDateVO tryFrom(final Object acceptDate) {
    ConstraintFailList list = new ConstraintFailList();
    AcceptDateVO result = tryFrom(acceptDate, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param acceptDate temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> AcceptDateVO tryFrom(final Object acceptDate,
      final T fails) {
    if (null == acceptDate) {
      return new AcceptDateVO(null);
    } else if (acceptDate instanceof OffsetDateTime castedAcceptDate) {
      return new AcceptDateVO(castedAcceptDate);
    } else {
      fails.add(new ConstraintFail("wrong-type", "acceptDate", acceptDate.getClass(),
          "A OffsetDateTime type is expected for acceptDate"));
      return null;
    }
  }

  /**
   * The actual value of the name.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final OffsetDateTime value;

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<OffsetDateTime> getAcceptDate() {
    return Optional.ofNullable(value);
  }

  /**
   * Returns a formatted string representation of the name.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
