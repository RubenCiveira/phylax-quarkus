package net.civeira.phylax.features.access.tenant.application.usecase.list;

import java.util.List;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.metadata.TimestampedList;
import net.civeira.phylax.common.algorithms.metadata.WrapMetadata;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantVisibilityFilter;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantsVisibility;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCached;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCursor;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantOrder;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantListUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<TenantListAllowDecision> listAllowEmitter;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final TenantsVisibility visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TenantListAllowDecision proposal = TenantListAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    listAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param filter
   * @param cursor
   * @return The slide with some values
   */
  public List<TenantListProjection> list(final Interaction query, final TenantListFilter filter,
      final TenantListCursor cursor) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TenantVisibilityFilter visibleFilter = TenantVisibilityFilter.builder()
        .uid(filter.getUid().orElse(null)).uids(filter.getUids().stream().toList())
        .search(filter.getSearch().orElse(null)).name(filter.getName().orElse(null))
        .tenantAccesible(filter.getTenantAccesible().orElse(null)).build();
    TenantCursor gatewayCursor = TenantCursor.builder().limit(cursor.getLimit().orElse(null))
        .sinceUid(cursor.getSinceUid().orElse(null))
        .order(cursor.getOrder().stream().map(Object::toString).map(TenantOrder::valueOf).toList())
        .sinceName(cursor.getSinceName().orElse(null)).sinceName(cursor.getSinceName().orElse(null))
        .build();
    TenantCached values = visibility.listCachedVisibles(query, visibleFilter, gatewayCursor);
    List<TenantListProjection> list =
        values.getValue().stream().map(value -> visibility.copyWithHidden(query, value))
            .map(TenantListProjection::from).toList();
    return new TimestampedList<>(WrapMetadata.<List<TenantListProjection>>builder().data(list)
        .since(values.getSince().toInstant()).build());
  }
}
