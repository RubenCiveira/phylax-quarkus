package net.civeira.phylax.features.access.useridentity.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.useridentity.UserIdentity;
import net.civeira.phylax.features.access.useridentity.gateway.UserIdentityCacheGateway;
import net.civeira.phylax.features.access.useridentity.gateway.UserIdentityCached;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityCursor;
import net.civeira.phylax.features.access.useridentity.query.UserIdentityFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class UserIdentityCacheGatewayAdapter implements UserIdentityCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("user-identity")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param userIdentity
   */
  @Override
  public void remove(final UserIdentity userIdentity) {
    log.trace("Invalidating userIdentity cache due to the removal of {}", userIdentity);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<UserIdentityCached> retrieve(final UserIdentityFilter filter,
      final UserIdentityCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at userIdentity cache for the key {}", key);
    return cache.<String, UserIdentityCached>get(key, k -> null)
        .map(cached -> Optional.ofNullable(cached)).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param userIdentitys
   * @return
   */
  public UserIdentityCached store(final UserIdentityFilter filter, final UserIdentityCursor cursor,
      final List<UserIdentity> userIdentitys) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache.<String, UserIdentityCached>get(key,
        k -> UserIdentityCached.builder().since(OffsetDateTime.now()).value(userIdentitys).build())
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param userIdentity
   */
  @Override
  public void update(final UserIdentity userIdentity) {
    log.trace("Invalidating userIdentity cache due to the update of {}", userIdentity);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final UserIdentityFilter filter, final UserIdentityCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
