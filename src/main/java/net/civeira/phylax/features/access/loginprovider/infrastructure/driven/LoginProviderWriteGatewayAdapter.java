package net.civeira.phylax.features.access.loginprovider.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderRef;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCursor;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderFilter;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderWriteRepositoryGateway;
import net.civeira.phylax.features.access.loginprovider.infrastructure.event.LoginProviderEventDispacher;
import net.civeira.phylax.features.access.loginprovider.infrastructure.repository.LoginProviderRepository;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProviderWriteGatewayAdapter implements LoginProviderWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final LoginProviderEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final LoginProviderMetadataUploadGatewayAdapter loginProviderMetadataUploadGatewayAdapter;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final LoginProviderRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(LoginProviderFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public LoginProvider create(LoginProvider entity) {
    loginProviderMetadataUploadGatewayAdapter.commitMetadata(entity, Optional.empty());
    LoginProvider result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public LoginProvider create(LoginProvider entity, Predicate<LoginProvider> verifier) {
    loginProviderMetadataUploadGatewayAdapter.commitMetadata(entity, Optional.empty());
    LoginProvider result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(LoginProvider entity) {
    repository.delete(entity);
    loginProviderMetadataUploadGatewayAdapter.deleteMetadata(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<LoginProviderFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<LoginProvider> findForUpdate(LoginProviderFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<LoginProvider> listForUpdate(LoginProviderFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public LoginProvider resolveForUpdate(LoginProviderRef reference) {
    return repository.resolveForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<LoginProvider> retrieveForUpdate(String uid,
      Optional<LoginProviderFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<LoginProvider> slideForUpdate(LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public LoginProvider update(LoginProviderRef reference, LoginProvider entity) {
    LoginProvider stored = resolveForUpdate(reference);
    loginProviderMetadataUploadGatewayAdapter.commitMetadata(entity, Optional.of(stored));
    LoginProvider result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
