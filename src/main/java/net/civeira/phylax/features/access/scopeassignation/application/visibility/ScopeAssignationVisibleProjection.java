package net.civeira.phylax.features.access.scopeassignation.application.visibility;

import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignationReference;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.SecurityDomainVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.SecurityScopeVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainRef;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeRef;

/**
 * A dto transfer to hold scope assignation attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ScopeAssignationVisibleProjection {

  /**
   * El security domain de scope assignation
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<SecurityDomainVO> securityDomain = Optional.empty();

  /**
   * El security scope de scope assignation
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<SecurityScopeVO> securityScope = Optional.empty();

  /**
   * El uid de scope assignation
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de scope assignation para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public ScopeAssignationVisibleProjection(final ScopeAssignation entity) {
    uid = Optional.of(entity.getUidValue());
    securityDomain = Optional.of(entity.getSecurityDomainValue());
    securityScope = Optional.of(entity.getSecurityScopeValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for scope assignation with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public ScopeAssignationReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(ScopeAssignationReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in SecurityDomain
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for SecurityDomain, otherwise the value for
   *         SecurityDomain
   */
  public Optional<SecurityDomainVO> getSecurityDomain() {
    return securityDomain;
  }

  /**
   * Inform for a possible change propolsal in SecurityScope
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for SecurityScope, otherwise the value for
   *         SecurityScope
   */
  public Optional<SecurityScopeVO> getSecurityScope() {
    return securityScope;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for SecurityDomain to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for ScopeAssignationVisibleProjection
   * @return self instance to enable a flow code
   */
  public ScopeAssignationVisibleProjection setSecurityDomain(final SecurityDomainRef value) {
    this.securityDomain = Optional.of(SecurityDomainVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for SecurityScope to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for ScopeAssignationVisibleProjection
   * @return self instance to enable a flow code
   */
  public ScopeAssignationVisibleProjection setSecurityScope(final SecurityScopeRef value) {
    this.securityScope = Optional.of(SecurityScopeVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for ScopeAssignationVisibleProjection
   * @return self instance to enable a flow code
   */
  public ScopeAssignationVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for ScopeAssignationVisibleProjection
   * @return self instance to enable a flow code
   */
  public ScopeAssignationVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("securityDomain".equals(field)) {
      this.unsetSecurityDomain();
    }
    if ("securityScope".equals(field)) {
      this.unsetSecurityScope();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for SecurityDomain
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public ScopeAssignationVisibleProjection unsetSecurityDomain() {
    this.securityDomain = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for SecurityScope
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public ScopeAssignationVisibleProjection unsetSecurityScope() {
    this.securityScope = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public ScopeAssignationVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public ScopeAssignationVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
