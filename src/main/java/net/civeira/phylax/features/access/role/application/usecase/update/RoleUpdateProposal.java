package net.civeira.phylax.features.access.role.application.usecase.update;

import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.With;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.role.RoleRef;
import net.civeira.phylax.features.access.role.application.request.RoleStateChange;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class RoleUpdateProposal {

  /**
   * @autogenerated UpdateProposalGenerator
   */
  @NonNull
  private final Interaction interaction;

  /**
   * @autogenerated UpdateProposalGenerator
   */
  private final RoleRef reference;

  /**
   * @autogenerated UpdateProposalGenerator
   */
  @NonNull
  private RoleStateChange dto;

  /**
   * @autogenerated UpdateProposalGenerator
   * @return
   */
  public Optional<RoleRef> getReference() {
    return Optional.ofNullable(reference);
  }

  /**
   * @autogenerated UpdateProposalGenerator
   * @param mapper
   */
  public void map(UnaryOperator<RoleStateChange> mapper) {
    dto = mapper.apply(dto);
  }

  /**
   * @autogenerated UpdateProposalGenerator
   * @param mapper
   */
  public void peek(Consumer<RoleStateChange> mapper) {
    mapper.accept(dto);
  }
}
