/* @autogenerated */
package net.civeira.phylax.features.access.oauth.application.service;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.function.Consumer;

import dev.samstevens.totp.code.CodeGenerator;
import dev.samstevens.totp.code.CodeVerifier;
import dev.samstevens.totp.code.DefaultCodeGenerator;
import dev.samstevens.totp.code.DefaultCodeVerifier;
import dev.samstevens.totp.code.HashingAlgorithm;
import dev.samstevens.totp.exceptions.QrGenerationException;
import dev.samstevens.totp.qr.QrData;
import dev.samstevens.totp.qr.QrGenerator;
import dev.samstevens.totp.qr.ZxingPngQrGenerator;
import dev.samstevens.totp.secret.DefaultSecretGenerator;
import dev.samstevens.totp.secret.SecretGenerator;
import dev.samstevens.totp.time.SystemTimeProvider;
import dev.samstevens.totp.time.TimeProvider;
import jakarta.activation.DataSource;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.Builder;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@ApplicationScoped
@RequiredArgsConstructor
public class OtpMfaService {
  private static final int SIZE = 32;
  private static final HashingAlgorithm ALGORITHM = HashingAlgorithm.SHA256;

  @Data
  @Builder
  public static class ApplicationInfo {
    private final String label;
    private final String issuer;
  }

  @RequiredArgsConstructor
  private class SelfDataSource implements DataSource {
    private final String contentType;
    private final InputStream stream;

    @Override
    public String getContentType() {
      return contentType;
    }

    @Override
    public InputStream getInputStream() throws IOException {
      return stream;
    }

    @Override
    public String getName() {
      return "";
    }

    @Override
    public OutputStream getOutputStream() throws IOException {
      return null;
    }
  }

  public DataSource getQr(ApplicationInfo info, String secret) {
    QrData data = new QrData.Builder().label(info.getLabel()).secret(secret)
        .issuer(info.getIssuer()).algorithm(ALGORITHM).digits(6).period(30).build();
    QrGenerator generator = new ZxingPngQrGenerator();
    try {
      final InputStream photoStream = new ByteArrayInputStream(generator.generate(data));
      SelfDataSource selfDataSource = new SelfDataSource(generator.getImageMimeType(), photoStream);
      return selfDataSource;
    } catch (QrGenerationException ex) {
      throw new IllegalStateException(ex);
    }
  }

  public DataSource getQr(ApplicationInfo info, Consumer<String> secretConsumer) {
    SecretGenerator secretGenerator = new DefaultSecretGenerator(SIZE);
    String secret = secretGenerator.generate();
    secretConsumer.accept(secret);
    return getQr(info, secret);
  }

  public boolean validateOtp(String otp, String seed) {
    TimeProvider timeProvider = new SystemTimeProvider();
    CodeGenerator codeGenerator = new DefaultCodeGenerator(ALGORITHM);
    CodeVerifier verifier = new DefaultCodeVerifier(codeGenerator, timeProvider);
    return verifier.isValidCode(seed, otp);
  }
}
