package net.civeira.phylax.features.access.useraccesstemporalcode.transition.create;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCode;
import net.civeira.phylax.features.access.useraccesstemporalcode.command.UserAccessTemporalCodeWriteAttributes;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.UserAccessTemporalCodeChangeProposal;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAccessTemporalCodeCreatePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<UserAccessTemporalCodeCreateStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param attributes
   * @param last
   * @return
   */
  public UserAccessTemporalCode create(final UserAccessTemporalCodeWriteAttributes attributes,
      final Function<UserAccessTemporalCodeChangeProposal, UserAccessTemporalCode> last) {
    Function<UserAccessTemporalCodeCreateTransition, UserAccessTemporalCode> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.apply(t.getData());
    };
    List<UserAccessTemporalCodeCreateStep> reversed =
        new ArrayList<>(steps.stream().toList()).reversed();
    Function<UserAccessTemporalCodeCreateTransition, UserAccessTemporalCode> pipeline =
        reversed.stream().reduce(finalHandler,
            (next, step) -> transition -> step.create(transition, next), (f1, f2) -> f1);
    return pipeline.apply(UserAccessTemporalCodeCreateTransition.builder()
        .data(new UserAccessTemporalCodeChangeProposal(attributes)).build());
  }
}
