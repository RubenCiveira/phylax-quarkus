/* @autogenerated */
package net.civeira.phylax.features.access.oauth.infrastructure.driver.impl.delegate;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.oauth.application.usecase.DelegeatedLoginProvidersUsecase;
import net.civeira.phylax.features.oauth.authentication.domain.model.AuthRequest;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedAccessExternalProvider;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedAccessExternalProvider.UserData;
import net.civeira.phylax.features.oauth.delegated.domain.spi.DelegatedAccessAuthValidatorSpi;

@Transactional
@ApplicationScoped
@RequiredArgsConstructor
public class DelegatedAccessAuthValidatorInteractor implements DelegatedAccessAuthValidatorSpi {
  private final DelegeatedLoginProvidersUsecase providers;

  @Override
  public List<DelegatedAccessExternalProvider> providers(AuthRequest request) {
    return providers.providers(request.getTenant(), request.getAudiences());
  }

  @Override
  public Optional<String> retrieveUsername(AuthRequest request, String provider,
      UserData codeInfo) {
    return providers.retrieveUsername(request.getTenant(), request.getAudiences(), provider,
        codeInfo);
  }
}
