package net.civeira.phylax.features.access.relyingparty.rule;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyMetadataProvider;
import net.civeira.phylax.features.access.relyingparty.transition.RelyingPartyChangeProposal;
import net.civeira.phylax.features.access.relyingparty.transition.create.RelyingPartyCreateStep;
import net.civeira.phylax.features.access.relyingparty.transition.create.RelyingPartyCreateTransition;
import net.civeira.phylax.features.access.relyingparty.transition.update.RelyingPartyUpdateStep;
import net.civeira.phylax.features.access.relyingparty.transition.update.RelyingPartyUpdateTransition;
import net.civeira.phylax.features.access.relyingparty.valueobject.EnabledVO;

@ApplicationScoped
@RequiredArgsConstructor
public class PreserveEnabled
    implements RelyingPartyMetadataProvider, RelyingPartyCreateStep, RelyingPartyUpdateStep {

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public RelyingParty create(final RelyingPartyCreateTransition transition,
      final Function<RelyingPartyCreateTransition, RelyingParty> next) {
    return next.apply(transition.map(calculate(transition.getData(), Optional.empty())));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @return
   */
  @Override
  public Set<String> readonlyFields() {
    return Set.of("enabled");
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public RelyingParty update(final RelyingPartyUpdateTransition transition,
      final Function<RelyingPartyUpdateTransition, RelyingParty> next) {
    return next.apply(
        transition.map(calculate(transition.getData(), Optional.of(transition.getOriginal()))));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param attributes
   * @param original
   * @return
   */
  private RelyingPartyChangeProposal calculate(final RelyingPartyChangeProposal attributes,
      final Optional<RelyingParty> original) {
    return attributes.setEnabled(
        original.map(RelyingParty::getEnabled).flatMap(EnabledVO::getValue).orElseGet(() -> false));
  }
}
