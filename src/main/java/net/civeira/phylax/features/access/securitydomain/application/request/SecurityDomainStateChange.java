package net.civeira.phylax.features.access.securitydomain.application.request;

import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.securitydomain.command.SecurityDomainWriteAttributes;
import net.civeira.phylax.features.access.securitydomain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.LevelVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.ManageAllVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.NameVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.ReadAllVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.UidVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.WriteAllVO;

@NoArgsConstructor
@AllArgsConstructor
@Builder
public class SecurityDomainStateChange implements SecurityDomainWriteAttributes {

  /**
   * @autogenerated EntityStateChangeGenerator
   */
  public static class SecurityDomainStateChangeBuilder {

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param enabled
     * @return
     */
    public SecurityDomainStateChangeBuilder enabled(final Boolean enabled) {
      return enabled(Optional.of(EnabledVO.from(enabled)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param enabled
     * @return
     */
    public SecurityDomainStateChangeBuilder enabled(final Optional<EnabledVO> enabled) {
      this.enabled$value = enabled;
      this.enabled$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param level
     * @return
     */
    public SecurityDomainStateChangeBuilder level(final Integer level) {
      return level(Optional.of(LevelVO.from(level)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param level
     * @return
     */
    public SecurityDomainStateChangeBuilder level(final Optional<LevelVO> level) {
      this.level$value = level;
      this.level$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param manageAll
     * @return
     */
    public SecurityDomainStateChangeBuilder manageAll(final Boolean manageAll) {
      return manageAll(Optional.of(ManageAllVO.from(manageAll)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param manageAll
     * @return
     */
    public SecurityDomainStateChangeBuilder manageAll(final Optional<ManageAllVO> manageAll) {
      this.manageAll$value = manageAll;
      this.manageAll$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param name
     * @return
     */
    public SecurityDomainStateChangeBuilder name(final String name) {
      return name(Optional.of(NameVO.from(name)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param name
     * @return
     */
    public SecurityDomainStateChangeBuilder name(final Optional<NameVO> name) {
      this.name$value = name;
      this.name$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @return
     */
    public SecurityDomainStateChangeBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param readAll
     * @return
     */
    public SecurityDomainStateChangeBuilder readAll(final Boolean readAll) {
      return readAll(Optional.of(ReadAllVO.from(readAll)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param readAll
     * @return
     */
    public SecurityDomainStateChangeBuilder readAll(final Optional<ReadAllVO> readAll) {
      this.readAll$value = readAll;
      this.readAll$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param uid
     * @return
     */
    public SecurityDomainStateChangeBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param uid
     * @return
     */
    public SecurityDomainStateChangeBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param version
     * @return
     */
    public SecurityDomainStateChangeBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param version
     * @return
     */
    public SecurityDomainStateChangeBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param writeAll
     * @return
     */
    public SecurityDomainStateChangeBuilder writeAll(final Boolean writeAll) {
      return writeAll(Optional.of(WriteAllVO.from(writeAll)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param writeAll
     * @return
     */
    public SecurityDomainStateChangeBuilder writeAll(final Optional<WriteAllVO> writeAll) {
      this.writeAll$value = writeAll;
      this.writeAll$set = true;
      return this;
    }
  }

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<EnabledVO> enabled = Optional.empty();

  /**
   * The user inherit level, and can view only domain with his level or lower
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<LevelVO> level = Optional.empty();

  /**
   * Allow to write on every scope
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<ManageAllVO> manageAll = Optional.empty();

  /**
   * El name de security domain
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * Allow to read on every scope
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<ReadAllVO> readAll = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de security domain para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Allow to write on every scope
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<WriteAllVO> writeAll = Optional.empty();

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param attributes
   */
  public SecurityDomainStateChange(final SecurityDomainWriteAttributes attributes) {
    uid = attributes.getUid();
    name = attributes.getName();
    level = attributes.getLevel();
    readAll = attributes.getReadAll();
    writeAll = attributes.getWriteAll();
    manageAll = attributes.getManageAll();
    enabled = attributes.getEnabled();
    version = attributes.getVersion();
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<EnabledVO> getEnabled() {
    return enabled;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<LevelVO> getLevel() {
    return level;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<ManageAllVO> getManageAll() {
    return manageAll;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<ReadAllVO> getReadAll() {
    return readAll;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<WriteAllVO> getWriteAll() {
    return writeAll;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateChange setEnabled(final Boolean value) {
    this.enabled = Optional.of(EnabledVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateChange setLevel(final Integer value) {
    this.level = Optional.of(LevelVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateChange setManageAll(final Boolean value) {
    this.manageAll = Optional.of(ManageAllVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateChange setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateChange setReadAll(final Boolean value) {
    this.readAll = Optional.of(ReadAllVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateChange setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateChange setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public SecurityDomainStateChange setWriteAll(final Boolean value) {
    this.writeAll = Optional.of(WriteAllVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("level".equals(field)) {
      this.unsetLevel();
    }
    if ("readAll".equals(field)) {
      this.unsetReadAll();
    }
    if ("writeAll".equals(field)) {
      this.unsetWriteAll();
    }
    if ("manageAll".equals(field)) {
      this.unsetManageAll();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public SecurityDomainStateChange unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public SecurityDomainStateChange unsetLevel() {
    this.level = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public SecurityDomainStateChange unsetManageAll() {
    this.manageAll = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public SecurityDomainStateChange unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public SecurityDomainStateChange unsetReadAll() {
    this.readAll = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public SecurityDomainStateChange unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public SecurityDomainStateChange unsetVersion() {
    this.version = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public SecurityDomainStateChange unsetWriteAll() {
    this.writeAll = Optional.empty();
    return this;
  }
}
