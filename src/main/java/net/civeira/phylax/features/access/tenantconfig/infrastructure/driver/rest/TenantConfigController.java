package net.civeira.phylax.features.access.tenantconfig.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenant.TenantReference;
import net.civeira.phylax.features.access.tenantconfig.TenantConfigReference;
import net.civeira.phylax.features.access.tenantconfig.application.projection.TenantConfigStateProyection;
import net.civeira.phylax.features.access.tenantconfig.application.request.TenantConfigStateChange;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.create.TenantConfigCreateUsecase;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.delete.TenantConfigCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.delete.TenantConfigDeleteUsecase;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.list.TenantConfigListUsecase;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.retrieve.TenantConfigRetrieveUsecase;
import net.civeira.phylax.features.access.tenantconfig.application.usecase.update.TenantConfigUpdateUsecase;
import net.civeira.phylax.features.access.tenantconfig.query.TenantConfigCursor;
import net.civeira.phylax.features.access.tenantconfig.query.TenantConfigFilter;
import net.civeira.phylax.generated.openapi.api.TenantConfigApi;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;
import net.civeira.phylax.generated.openapi.model.TenantConfigApiDto;
import net.civeira.phylax.generated.openapi.model.TenantConfigApiDtoList;

@RequiredArgsConstructor
public class TenantConfigController implements TenantConfigApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String TENANTS_A_P_P_E_N_D = "&tenants=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantConfigCreateUsecase create;

  /**
   * TenantConfig
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantConfigDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantConfigListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantConfigRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantConfigUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param tenants
   * @return
   */
  @Override
  public Response tenantConfigApiBatchDelete(final List<String> uids, final String search,
      final List<String> tenants) {
    TenantConfigFilter.TenantConfigFilterBuilder filterBuilder = TenantConfigFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    TenantConfigFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response tenantConfigApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(TenantConfigCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenantConfig
   * @return
   */
  @Override
  @Transactional
  public Response tenantConfigApiCreate(TenantConfigApiDto tenantConfig) {
    TenantConfigStateProyection created =
        create.create(currentRequest.interaction(), toDomainModel(tenantConfig));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response tenantConfigApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), TenantConfigReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param tenants
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response tenantConfigApiList(final List<String> uids, final String search,
      final List<String> tenants, final Integer limit, final String sinceUid) {
    TenantConfigFilter.TenantConfigFilterBuilder filterBuilder = TenantConfigFilter.builder();
    TenantConfigCursor.TenantConfigCursorBuilder cursorBuilder = TenantConfigCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    TenantConfigFilter filter = filterBuilder.build();
    TenantConfigCursor cursor = cursorBuilder.build();
    List<TenantConfigStateProyection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "tenant-config-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response tenantConfigApiRetrieve(final String uid) {
    TenantConfigStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), TenantConfigReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param tenantConfig
   * @return
   */
  @Override
  @Transactional
  public Response tenantConfigApiUpdate(final String uid, final TenantConfigApiDto tenantConfig) {
    TenantConfigStateProyection updated = update.update(currentRequest.interaction(),
        TenantConfigReference.of(uid), toDomainModel(tenantConfig));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private TenantConfigApiDto toApiModel(TenantConfigStateProyection dto) {
    TenantConfigApiDto tenantConfigApiDto = new TenantConfigApiDto();
    tenantConfigApiDto.setUid(dto.getUid().orElse(null));
    tenantConfigApiDto.setTenant(
        new TenantApiRef().$ref(dto.getTenant().map(TenantRef::getUidValue).orElse(null)));
    tenantConfigApiDto.setInnerLabel(dto.getInnerLabel().orElse(null));
    tenantConfigApiDto.setForceMfa(dto.getForceMfa().orElse(null));
    tenantConfigApiDto.setVersion(dto.getVersion().orElse(null));
    return tenantConfigApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenantConfigApiDto
   * @return
   */
  private TenantConfigStateChange toDomainModel(TenantConfigApiDto tenantConfigApiDto) {
    TenantConfigStateChange dto = new TenantConfigStateChange();
    if (null != tenantConfigApiDto.getUid()) {
      dto.setUid(tenantConfigApiDto.getUid());
    }
    if (null != tenantConfigApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(tenantConfigApiDto.getTenant().get$Ref()));
    }
    if (null != tenantConfigApiDto.getInnerLabel()) {
      dto.setInnerLabel(tenantConfigApiDto.getInnerLabel());
    }
    if (null != tenantConfigApiDto.getForceMfa()) {
      dto.setForceMfa(tenantConfigApiDto.getForceMfa());
    }
    if (null != tenantConfigApiDto.getVersion()) {
      dto.setVersion(tenantConfigApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenantConfigs
   * @param filter
   * @param cursor
   * @return
   */
  private TenantConfigApiDtoList toListApiModel(List<TenantConfigStateProyection> tenantConfigs,
      TenantConfigFilter filter, TenantConfigCursor cursor) {
    Optional<TenantConfigStateProyection> last = tenantConfigs.isEmpty() ? Optional.empty()
        : Optional.of(tenantConfigs.get(tenantConfigs.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    if (!filter.getTenants().isEmpty()) {
      String tenantsValue =
          URLEncoder.encode(String.join(",", filter.getTenants()), StandardCharsets.UTF_8);
      self.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      next.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      first.append(TENANTS_A_P_P_E_N_D + tenantsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> lastDto.getUid().ifPresent(
        uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8))));
    return new TenantConfigApiDtoList().items(tenantConfigs.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }
}
