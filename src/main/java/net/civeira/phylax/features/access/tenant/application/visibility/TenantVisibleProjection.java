package net.civeira.phylax.features.access.tenant.application.visibility;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.tenant.domain.RelingParties;
import net.civeira.phylax.features.access.tenant.domain.Tenant;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients;
import net.civeira.phylax.features.access.tenant.domain.valueobject.AccessToAllApplicationsVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.DomainVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.RelingPartiesVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.TrustedClientsVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold tenant attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TenantVisibleProjection {

  /**
   * Defines if users from this tenant can access all parties and clients, or only those explicitly
   * assigned.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<AccessToAllApplicationsVO> accessToAllApplications = Optional.empty();

  /**
   * A domain suffix to identify the account
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<DomainVO> domain = Optional.empty();

  /**
   * The users of a non enabled tenant could not make login on the system
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<EnabledVO> enabled = Optional.empty();

  /**
   * The name to identify the account.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * A list of relying parties (services or applications) associated with this tenant.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<RelingPartiesVO> relingParties = Optional.empty();

  /**
   * A list of OAuth clients marked as trusted for this tenant.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TrustedClientsVO> trustedClients = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public TenantVisibleProjection(final Tenant entity) {
    uid = Optional.of(entity.getUidValue());
    name = Optional.of(entity.getNameValue());
    domain = Optional.of(entity.getDomainValue());
    enabled = Optional.of(entity.getEnabledValue());
    accessToAllApplications = Optional.of(entity.getAccessToAllApplicationsValue());
    trustedClients = Optional.of(entity.getTrustedClientsValue());
    relingParties = Optional.of(entity.getRelingPartiesValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for tenant with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public TenantReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(TenantReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in AccessToAllApplications
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for AccessToAllApplications, otherwise the value
   *         for AccessToAllApplications
   */
  public Optional<AccessToAllApplicationsVO> getAccessToAllApplications() {
    return accessToAllApplications;
  }

  /**
   * Inform for a possible change propolsal in Domain
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Domain, otherwise the value for Domain
   */
  public Optional<DomainVO> getDomain() {
    return domain;
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Optional<EnabledVO> getEnabled() {
    return enabled;
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * Inform for a possible change propolsal in RelingParties
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for RelingParties, otherwise the value for
   *         RelingParties
   */
  public Optional<RelingPartiesVO> getRelingParties() {
    return relingParties;
  }

  /**
   * Inform for a possible change propolsal in TrustedClients
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for TrustedClients, otherwise the value for
   *         TrustedClients
   */
  public Optional<TrustedClientsVO> getTrustedClients() {
    return trustedClients;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for AccessToAllApplications to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantVisibleProjection setAccessToAllApplications(final Boolean value) {
    this.accessToAllApplications = Optional.of(AccessToAllApplicationsVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Domain to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantVisibleProjection setDomain(final String value) {
    this.domain = Optional.of(DomainVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Enabled to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantVisibleProjection setEnabled(final Boolean value) {
    this.enabled = Optional.of(EnabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Name to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantVisibleProjection setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for RelingParties to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantVisibleProjection setRelingParties(final List<RelingParties> value) {
    this.relingParties = Optional.of(RelingPartiesVO.from(null == value ? List.of() : value));
    return this;
  }

  /**
   * Assigna change proposal for TrustedClients to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantVisibleProjection setTrustedClients(final List<TrustedClients> value) {
    this.trustedClients = Optional.of(TrustedClientsVO.from(null == value ? List.of() : value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for TenantVisibleProjection
   * @return self instance to enable a flow code
   */
  public TenantVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("domain".equals(field)) {
      this.unsetDomain();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("accessToAllApplications".equals(field)) {
      this.unsetAccessToAllApplications();
    }
    if ("trustedClients".equals(field)) {
      this.unsetTrustedClients();
    }
    if ("relingParties".equals(field)) {
      this.unsetRelingParties();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for AccessToAllApplications
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantVisibleProjection unsetAccessToAllApplications() {
    this.accessToAllApplications = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Domain
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantVisibleProjection unsetDomain() {
    this.domain = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantVisibleProjection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantVisibleProjection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for RelingParties
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantVisibleProjection unsetRelingParties() {
    this.relingParties = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for TrustedClients
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantVisibleProjection unsetTrustedClients() {
    this.trustedClients = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public TenantVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
