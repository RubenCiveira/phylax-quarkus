package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.driven;

import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.store.BinaryContent;
import net.civeira.phylax.common.infrastructure.store.FileStore;
import net.civeira.phylax.common.infrastructure.store.RepositoryLink;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseAttachedUploadGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantTermsOfUseAttachedUploadGatewayAdapter
    implements TenantTermsOfUseAttachedUploadGateway {

  /**
   * @autogenerated StoreGatewayGenerator
   */
  private final FileStore store;

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   * @param orignal
   * @return
   */
  @Override
  public Optional<String> commitAttached(final TenantTermsOfUse key,
      final Optional<TenantTermsOfUse> orignal) {
    String theNew = key.getAttached().orElse(null);
    String theOld = orignal.flatMap(TenantTermsOfUse::getAttached).orElse(null);
    boolean wasRemoved = theNew == null && theOld != null;
    boolean wasAppend = theNew != null && theOld == null;
    boolean wasModified = theOld != null && theNew != null && !theNew.equals(theOld);
    if (wasAppend) {
      return Optional.of(store.commitContent(theNew).getKey());
    } else if (wasModified) {
      store.deleteFile(theOld);
      return Optional.of(store.commitContent(theNew).getKey());
    } else if (wasRemoved) {
      return Optional
          .of(store.commitReplace(theNew, RepositoryLink.builder().key(theOld).build()).getKey());
    } else {
      return Optional.empty();
    }
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   */
  @Override
  public void deleteAttached(final TenantTermsOfUse key) {
    key.getAttached().ifPresent(store::deleteFile);
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public Optional<BinaryContent> readAttached(final TenantTermsOfUse entity) {
    return entity.getAttached().map(store::retrieveFile).orElseThrow();
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   * @return
   */
  @Override
  public Optional<BinaryContent> readTemporalAttached(final String key) {
    return store.retrieveTemp(key);
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param content
   * @return
   */
  @Override
  public String storeTemporalAttached(final BinaryContent content) {
    return store.tempStore(content).getKey();
  }
}
