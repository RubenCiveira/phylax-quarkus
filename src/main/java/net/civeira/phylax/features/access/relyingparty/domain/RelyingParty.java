package net.civeira.phylax.features.access.relyingparty.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.relyingparty.domain.event.RelyingPartyCreateEvent;
import net.civeira.phylax.features.access.relyingparty.domain.event.RelyingPartyDeleteEvent;
import net.civeira.phylax.features.access.relyingparty.domain.event.RelyingPartyDisableEvent;
import net.civeira.phylax.features.access.relyingparty.domain.event.RelyingPartyEnableEvent;
import net.civeira.phylax.features.access.relyingparty.domain.event.RelyingPartyEvent;
import net.civeira.phylax.features.access.relyingparty.domain.event.RelyingPartyUpdateEvent;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.ApiKeyVO;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.CodeVO;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.VersionVO;

/**
 * relying-party
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class RelyingParty implements RelyingPartyRef {

  /**
   * Prepare a new relying party with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new relying party
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed relying party.
   */
  public static RelyingParty create(final RelyingPartyChangeSet change) throws ConstraintException {
    change.setEnabled(false);
    RelyingParty instance = new RelyingParty(change, Optional.empty());
    instance.addEvent(RelyingPartyCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * A identification for the aplication
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private ApiKeyVO apiKeyValue;

  /**
   * El código identificativo de la aplicación
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private CodeVO codeValue;

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private EnabledVO enabledValue = EnabledVO.nullValue();

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<RelyingPartyEvent> recordedEvents = List.of();

  /**
   * El identificador de la aplicacion
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Campo con el número de version de relying party para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private RelyingParty(final RelyingPartyChangeSet attribute,
      final Optional<RelyingParty> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue = attribute.getUid().orElse(previous.map(RelyingParty::getUidValue).orElse(null));
    this.codeValue =
        attribute.getCode().orElse(previous.map(RelyingParty::getCodeValue).orElse(null));
    this.apiKeyValue =
        attribute.getApiKey().orElse(previous.map(RelyingParty::getApiKeyValue).orElse(null));
    this.enabledValue = attribute.getEnabled()
        .orElse(previous.map(RelyingParty::getEnabledValue).orElseGet(EnabledVO::nullValue));
    this.versionValue = attribute.getVersion()
        .orElse(previous.map(RelyingParty::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == codeValue) {
      list.add(new ConstraintFail("REQUIRED", "code", null));
    }
    if (null == apiKeyValue) {
      list.add(new ConstraintFail("REQUIRED", "apiKey", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(RelyingParty::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a relying party
   *
   * @autogenerated EntityGenerator
   * @return A instance of relying party ready to be deleted
   */
  public RelyingParty delete() {
    RelyingParty instance = this;
    instance.addEvent(RelyingPartyDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply disable on relying party.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of relying party
   */
  public RelyingParty disable() {
    RelyingPartyChangeSet attr = new RelyingPartyChangeSet();
    attr.setEnabled(false);
    RelyingParty instance = new RelyingParty(attr, Optional.of(this));
    instance.addEvent(RelyingPartyDisableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply enable on relying party.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of relying party
   */
  public RelyingParty enable() {
    RelyingPartyChangeSet attr = new RelyingPartyChangeSet();
    attr.setEnabled(true);
    RelyingParty instance = new RelyingParty(attr, Optional.of(this));
    instance.addEvent(RelyingPartyEnableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a relying party
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of relying party
   */
  public RelyingParty update(final RelyingPartyChangeSet change) throws ConstraintException {
    change.unsetEnabled();
    RelyingParty instance = new RelyingParty(change, Optional.of(this));
    instance.addEvent(RelyingPartyUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public RelyingParty withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final RelyingPartyEvent event) {
    List<RelyingPartyEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
