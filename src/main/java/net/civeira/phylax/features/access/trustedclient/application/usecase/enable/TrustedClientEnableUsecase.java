package net.civeira.phylax.features.access.trustedclient.application.usecase.enable;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.trustedclient.application.visibility.TrustedClientVisibilityFilter;
import net.civeira.phylax.features.access.trustedclient.application.visibility.TrustedClientsVisibility;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientCacheGateway;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TrustedClientEnableUsecase {

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final TrustedClientCacheGateway cache;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final Event<TrustedClientEnableAllowDecision> execAllowEmitter;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final Event<TrustedClientEnableCheck> execProposalEmitter;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final TrustedClientWriteRepositoryGateway gateway;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final TrustedClientsVisibility visibility;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final TrustedClientRef reference) {
    TrustedClientEnableAllowDecision base = TrustedClientEnableAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    execAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TrustedClientEnableAllowDecision base = TrustedClientEnableAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    execAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final TrustedClientEnableStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query
   * @param reference
   * @return The slide with some values
   */
  public TrustedClientEnableProjection enable(final Interaction query,
      final TrustedClientRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TrustedClient original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    TrustedClient saved = enable(query, original);
    flush();
    return TrustedClientEnableProjection.from(visibility.copyWithHidden(query, saved));
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator enable(final Interaction query,
      final TrustedClientEnableFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TrustedClientVisibilityFilter filterWithVisibility = TrustedClientVisibilityFilter.builder()
        .uid(filter.getUid().orElse(null)).uids(filter.getUids().stream().toList())
        .search(filter.getSearch().orElse(null)).code(filter.getCode().orElse(null)).build();
    TrustedClientEnableAllInBatchCommand command = TrustedClientEnableAllInBatchCommand.builder()
        .interaction(query).filter(filterWithVisibility).build();
    return batch.start(command.getInteraction().getActor().getName().orElse("-"),
        Duration.ofHours(6),
        ExecutorPlan.<TrustedClientEnableAllInBatchCommand>builder().params(command)
            .name("enable-trusted-client")
            .executor(
                ExecutorByDeferSteps.<TrustedClient, TrustedClient, TrustedClientEnableAllInBatchCommand, TrustedClientEnablesInBatchExecutor.TrustedClientPaginableBatch>builder()
                    .initializer(TrustedClientEnablesInBatchExecutor.class)
                    .counter(TrustedClientEnablesInBatchExecutor.class)
                    .descriptor(TrustedClientEnablesInBatchExecutor.class)
                    .reader(TrustedClientEnablesInBatchExecutor.class)
                    .processor(TrustedClientEnablesInBatchExecutor.class)
                    .writer(TrustedClientEnablesInBatchExecutor.class)
                    .finalizer(TrustedClientEnablesInBatchExecutor.class).build())
            .build());
  }

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   * @param interaction
   * @param original
   * @return
   */
  TrustedClient enable(final Interaction interaction, final TrustedClient original) {
    TrustedClientEnableCheck proposal =
        TrustedClientEnableCheck.builder().reference(original).interaction(interaction).build();
    execProposalEmitter.fire(proposal);
    TrustedClient result = original.enable();
    TrustedClient saved = gateway.update(original, result);
    return saved;
  }

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
