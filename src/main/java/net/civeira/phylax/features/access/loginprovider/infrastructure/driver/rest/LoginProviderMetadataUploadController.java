package net.civeira.phylax.features.access.loginprovider.infrastructure.driver.rest;

import java.io.InputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.common.infrastructure.store.BinaryContent;
import net.civeira.phylax.features.access.loginprovider.application.usecase.metadataretrieve.LoginProviderMetadataRetrieveUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.metadataupload.LoginProviderMetadataTemporalUploadUsecase;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderReference;

@RequiredArgsConstructor
@RequestScoped
public class LoginProviderMetadataUploadController {

  /**
   * @autogenerated FileControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated FileControllerGenerator
   */
  private final LoginProviderMetadataRetrieveUsecase retrieveMetadataUploadUsecase;

  /**
   * @autogenerated FileControllerGenerator
   */
  private final LoginProviderMetadataTemporalUploadUsecase tempMetadataUploadUsecase;

  /**
   * @autogenerated FileControllerGenerator
   * @param uid
   * @return
   */
  public Response loginProviderApiRetrieveMetadata(final String uid) {
    BinaryContent stream = retrieveMetadataUploadUsecase.read(currentRequest.interaction(),
        LoginProviderReference.of(uid));
    String encodedFilename = URLEncoder.encode(stream.getName(), StandardCharsets.UTF_8);
    return Response.ok(stream.getInputStream()).header("Content-type", stream.getContentType())
        .header("Content-Disposition", "attachment; filename*=UTF-8''" + encodedFilename).build();
  }

  /**
   * @autogenerated FileControllerGenerator
   * @param temp
   * @return
   */
  public Response loginProviderApiRetrieveTempUploadMetadata(final String temp) {
    BinaryContent stream = tempMetadataUploadUsecase.read(currentRequest.interaction(), temp);
    return Response.ok(stream.getInputStream()).build();
  }

  /**
   * @autogenerated FileControllerGenerator
   * @param file
   * @param fileName
   * @param fileType
   * @return
   */
  public Response loginProviderApiUploadTempUploadMetadata(final InputStream file,
      final String fileName, final String fileType) {
    String key = tempMetadataUploadUsecase.upload(currentRequest.interaction(),
        BinaryContent.builder().name(fileName).contentType(fileType)
            .lastModification(System.currentTimeMillis()).inputStream(file).build());
    return Response.ok(
        currentRequest.getPublicHost() + "/api/access/login-providers/-/temp-metadata?temp=" + key)
        .build();
  }
}
