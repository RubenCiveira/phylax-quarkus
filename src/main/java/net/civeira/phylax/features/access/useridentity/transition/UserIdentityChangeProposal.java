package net.civeira.phylax.features.access.useridentity.transition;

import java.util.List;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyRef;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;
import net.civeira.phylax.features.access.user.UserRef;
import net.civeira.phylax.features.access.useridentity.Roles;
import net.civeira.phylax.features.access.useridentity.UserIdentity;
import net.civeira.phylax.features.access.useridentity.UserIdentityReference;
import net.civeira.phylax.features.access.useridentity.command.UserIdentityWriteAttributes;
import net.civeira.phylax.features.access.useridentity.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.useridentity.valueobject.RolesVO;
import net.civeira.phylax.features.access.useridentity.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.useridentity.valueobject.UidVO;
import net.civeira.phylax.features.access.useridentity.valueobject.UserVO;
import net.civeira.phylax.features.access.useridentity.valueobject.VersionVO;

@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserIdentityChangeProposal implements UserIdentityWriteAttributes {

  /**
   * @autogenerated EntityChangeProposalGenerator
   */
  public static class UserIdentityChangeProposalBuilder {

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @return
     */
    public UserIdentityChangeProposalBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param relyingParty
     * @return
     */
    public UserIdentityChangeProposalBuilder relyingParty(final RelyingPartyRef relyingParty) {
      return relyingParty(Optional.of(RelyingPartyVO.from(relyingParty)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param relyingParty
     * @return
     */
    public UserIdentityChangeProposalBuilder relyingParty(
        final Optional<RelyingPartyVO> relyingParty) {
      this.relyingParty$value = relyingParty;
      this.relyingParty$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param roles
     * @return
     */
    public UserIdentityChangeProposalBuilder roles(final List<Roles> roles) {
      return roles(Optional.of(RolesVO.from(roles)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param roles
     * @return
     */
    public UserIdentityChangeProposalBuilder roles(final Optional<RolesVO> roles) {
      this.roles$value = roles;
      this.roles$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param trustedClient
     * @return
     */
    public UserIdentityChangeProposalBuilder trustedClient(final TrustedClientRef trustedClient) {
      return trustedClient(Optional.of(TrustedClientVO.from(trustedClient)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param trustedClient
     * @return
     */
    public UserIdentityChangeProposalBuilder trustedClient(
        final Optional<TrustedClientVO> trustedClient) {
      this.trustedClient$value = trustedClient;
      this.trustedClient$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param uid
     * @return
     */
    public UserIdentityChangeProposalBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param uid
     * @return
     */
    public UserIdentityChangeProposalBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param user
     * @return
     */
    public UserIdentityChangeProposalBuilder user(final UserRef user) {
      return user(Optional.of(UserVO.from(user)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param user
     * @return
     */
    public UserIdentityChangeProposalBuilder user(final Optional<UserVO> user) {
      this.user$value = user;
      this.user$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param version
     * @return
     */
    public UserIdentityChangeProposalBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param version
     * @return
     */
    public UserIdentityChangeProposalBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * El relying party de user identity
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<RelyingPartyVO> relyingParty = Optional.empty();

  /**
   * El roles de user identity
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<RolesVO> roles = Optional.empty();

  /**
   * El trusted client de user identity
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<TrustedClientVO> trustedClient = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * El user de user identity
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<UserVO> user = Optional.empty();

  /**
   * Campo con el n√∫mero de version de user identity para controlar bloqueos optimistas
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param attributes
   */
  public UserIdentityChangeProposal(final UserIdentityWriteAttributes attributes) {
    uid = attributes.getUid();
    user = attributes.getUser();
    relyingParty = attributes.getRelyingParty();
    trustedClient = attributes.getTrustedClient();
    roles = attributes.getRoles();
    version = attributes.getVersion();
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param entity
   */
  public UserIdentityChangeProposal(final UserIdentity entity) {
    uid = Optional.of(entity.getUid());
    user = Optional.of(entity.getUser());
    relyingParty = Optional.of(entity.getRelyingParty());
    trustedClient = Optional.of(entity.getTrustedClient());
    roles = Optional.of(entity.getRoles());
    version = Optional.of(entity.getVersion());
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserIdentityReference asReference() {
    return uid.map(UidVO::getValue).map(UserIdentityReference::of).orElseThrow();
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<RelyingPartyVO> getRelyingParty() {
    return relyingParty;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<RolesVO> getRoles() {
    return roles;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<TrustedClientVO> getTrustedClient() {
    return trustedClient;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<UserVO> getUser() {
    return user;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserIdentityChangeProposal setRelyingParty(final RelyingPartyRef value) {
    this.relyingParty = Optional.of(RelyingPartyVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserIdentityChangeProposal setRoles(final List<Roles> value) {
    this.roles = Optional.of(RolesVO.from(null == value ? List.of() : value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserIdentityChangeProposal setTrustedClient(final TrustedClientRef value) {
    this.trustedClient = Optional.of(TrustedClientVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserIdentityChangeProposal setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserIdentityChangeProposal setUser(final UserRef value) {
    this.user = Optional.of(UserVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public UserIdentityChangeProposal setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("user".equals(field)) {
      this.unsetUser();
    }
    if ("relyingParty".equals(field)) {
      this.unsetRelyingParty();
    }
    if ("trustedClient".equals(field)) {
      this.unsetTrustedClient();
    }
    if ("roles".equals(field)) {
      this.unsetRoles();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserIdentityChangeProposal unsetRelyingParty() {
    this.relyingParty = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserIdentityChangeProposal unsetRoles() {
    this.roles = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserIdentityChangeProposal unsetTrustedClient() {
    this.trustedClient = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserIdentityChangeProposal unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserIdentityChangeProposal unsetUser() {
    this.user = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public UserIdentityChangeProposal unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
