package net.civeira.phylax.features.access.useraccesstemporalcode;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.user.UserRef;
import net.civeira.phylax.features.access.useraccesstemporalcode.command.UserAccessTemporalCodeWriteAttributes;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeCreateEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeDeleteEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeGenerateMfaTemporalCodeEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeGeneratePasswordRecoverEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeMarkLoginBlockEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeMarkLoginFailEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeMarkLoginOkEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeResetMfaTemporalCodeEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeResetPasswordRecoverEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.event.UserAccessTemporalCodeUpdateEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.create.UserAccessTemporalCodeCreatePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.delete.UserAccessTemporalCodeDeletePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.generatemfatemporalcode.UserAccessTemporalCodeGenerateMfaTemporalCodePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.generatepasswordrecover.UserAccessTemporalCodeGeneratePasswordRecoverPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.markloginblock.UserAccessTemporalCodeMarkLoginBlockPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.markloginfail.UserAccessTemporalCodeMarkLoginFailPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.markloginok.UserAccessTemporalCodeMarkLoginOkPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.resetmfatemporalcode.UserAccessTemporalCodeResetMfaTemporalCodePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.resetpasswordrecover.UserAccessTemporalCodeResetPasswordRecoverPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.update.UserAccessTemporalCodeUpdatePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.FailedLoginAttemptsVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.RecoveryCodeExpirationVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.RecoveryCodeVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.TempSecondFactorSeedExpirationVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.TempSecondFactorSeedVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.UidVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.UserVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.valueobject.VersionVO;

@AllArgsConstructor
@Getter
@ToString
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class UserAccessTemporalCode implements UserAccessTemporalCodeRef {

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @param pipeline
   * @return
   */
  public static UserAccessTemporalCode create(
      final UserAccessTemporalCodeWriteAttributes attributes,
      final UserAccessTemporalCodeCreatePipeline pipeline) {
    return pipeline.create(attributes, attr -> {
      UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.empty());
      instance.addEvent(UserAccessTemporalCodeCreateEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * The amount login attempts failed since the last right login.
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private FailedLoginAttemptsVO failedLoginAttempts = FailedLoginAttemptsVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private List<UserAccessTemporalCodeEvent> recordedEvents = List.of();

  /**
   * El codigo de recuperacion enviado por email
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private RecoveryCodeVO recoveryCode = RecoveryCodeVO.nullValue();

  /**
   * La caducidad del código de recuperacion
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private RecoveryCodeExpirationVO recoveryCodeExpiration = RecoveryCodeExpirationVO.nullValue();

  /**
   * the seed used to the otp login
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private TempSecondFactorSeedVO tempSecondFactorSeed = TempSecondFactorSeedVO.nullValue();

  /**
   * La caducidad del código de recuperacion
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private TempSecondFactorSeedExpirationVO tempSecondFactorSeedExpiration =
      TempSecondFactorSeedExpirationVO.nullValue();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UidVO uid;

  /**
   * El usuario para el que se tienen estos datos
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UserVO user;

  /**
   * Campo con el número de version de user access temporal code para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VersionVO version = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private UserAccessTemporalCode(final UserAccessTemporalCodeWriteAttributes attribute,
      final Optional<UserAccessTemporalCode> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uid = attribute.getUid().orElse(previous.map(UserAccessTemporalCode::getUid).orElse(null));
    this.user =
        attribute.getUser().orElse(previous.map(UserAccessTemporalCode::getUser).orElse(null));
    this.tempSecondFactorSeed = attribute.getTempSecondFactorSeed()
        .orElse(previous.map(UserAccessTemporalCode::getTempSecondFactorSeed)
            .orElseGet(TempSecondFactorSeedVO::nullValue));
    this.tempSecondFactorSeedExpiration = attribute.getTempSecondFactorSeedExpiration()
        .orElse(previous.map(UserAccessTemporalCode::getTempSecondFactorSeedExpiration)
            .orElseGet(TempSecondFactorSeedExpirationVO::nullValue));
    this.failedLoginAttempts = attribute.getFailedLoginAttempts()
        .orElse(previous.map(UserAccessTemporalCode::getFailedLoginAttempts)
            .orElseGet(FailedLoginAttemptsVO::nullValue));
    this.recoveryCode = attribute.getRecoveryCode().orElse(
        previous.map(UserAccessTemporalCode::getRecoveryCode).orElseGet(RecoveryCodeVO::nullValue));
    this.recoveryCodeExpiration = attribute.getRecoveryCodeExpiration()
        .orElse(previous.map(UserAccessTemporalCode::getRecoveryCodeExpiration)
            .orElseGet(RecoveryCodeExpirationVO::nullValue));
    this.version = attribute.getVersion()
        .orElse(previous.map(UserAccessTemporalCode::getVersion).orElseGet(VersionVO::nullValue));
    if (null == uid) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == user) {
      list.add(new ConstraintFail("REQUIRED", "user", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents =
        previous.map(UserAccessTemporalCode::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * @autogenerated EntityGenerator
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode delete(final UserAccessTemporalCodeDeletePipeline pipeline) {
    return pipeline.delete(this, () -> {
      UserAccessTemporalCode instance = this;
      instance.addEvent(UserAccessTemporalCodeDeleteEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @param tempSecondFactorSeed
   * @param tempSecondFactorSeedExpiration
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode generateMfaTemporalCode(final String tempSecondFactorSeed,
      final OffsetDateTime tempSecondFactorSeedExpiration,
      final UserAccessTemporalCodeGenerateMfaTemporalCodePipeline pipeline) {
    return pipeline.generateMfaTemporalCode(tempSecondFactorSeed, tempSecondFactorSeedExpiration,
        this, attr -> {
          attr.setTempSecondFactorSeedExpiration(tempSecondFactorSeedExpiration);
          UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
          instance.addEvent(UserAccessTemporalCodeGenerateMfaTemporalCodeEvent.builder()
              .payload(instance).build());
          return instance;
        });
  }

  /**
   * @autogenerated EntityGenerator
   * @param recoveryCode
   * @param recoveryCodeExpiration
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode generatePasswordRecover(final String recoveryCode,
      final OffsetDateTime recoveryCodeExpiration,
      final UserAccessTemporalCodeGeneratePasswordRecoverPipeline pipeline) {
    return pipeline.generatePasswordRecover(recoveryCode, recoveryCodeExpiration, this, attr -> {
      attr.setRecoveryCodeExpiration(recoveryCodeExpiration);
      UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
      instance.addEvent(
          UserAccessTemporalCodeGeneratePasswordRecoverEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getFailedLoginAttemptsValue() {
    return getFailedLoginAttempts().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<OffsetDateTime> getRecoveryCodeExpirationValue() {
    return getRecoveryCodeExpiration().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getRecoveryCodeValue() {
    return getRecoveryCode().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @param cypher
   * @return
   */
  public Optional<String> getTempSecondFactorSeedCypheredValue(final AesCipherService cypher) {
    return getTempSecondFactorSeed().getCypheredValue(cypher);
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<OffsetDateTime> getTempSecondFactorSeedExpirationValue() {
    return getTempSecondFactorSeedExpiration().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @param cypher
   * @return
   */
  public Optional<String> getTempSecondFactorSeedPlainValue(final AesCipherService cypher) {
    return getTempSecondFactorSeed().getPlainValue(cypher);
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  @Override
  public String getUidValue() {
    return this.uid.getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getUserReferenceValue() {
    return getUser().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public UserRef getUserValue() {
    return getUser().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode markLoginBlock(
      final UserAccessTemporalCodeMarkLoginBlockPipeline pipeline) {
    return pipeline.markLoginBlock(this, attr -> {
      attr.setFailedLoginAttempts(0);
      UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
      instance
          .addEvent(UserAccessTemporalCodeMarkLoginBlockEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode markLoginFail(
      final UserAccessTemporalCodeMarkLoginFailPipeline pipeline) {
    return pipeline.markLoginFail(this, attr -> {
      attr.setFailedLoginAttempts(this.getFailedLoginAttemptsValue().orElse(0) + 1);
      UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
      instance
          .addEvent(UserAccessTemporalCodeMarkLoginFailEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode markLoginOk(
      final UserAccessTemporalCodeMarkLoginOkPipeline pipeline) {
    return pipeline.markLoginOk(this, attr -> {
      attr.setFailedLoginAttempts(0);
      UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
      instance.addEvent(UserAccessTemporalCodeMarkLoginOkEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public UserAccessTemporalCode nextVersion() {
    return UserAccessTemporalCode.builder().uid(this.uid).user(this.user)
        .tempSecondFactorSeed(this.tempSecondFactorSeed)
        .tempSecondFactorSeedExpiration(this.tempSecondFactorSeedExpiration)
        .failedLoginAttempts(this.failedLoginAttempts).recoveryCode(this.recoveryCode)
        .recoveryCodeExpiration(this.recoveryCodeExpiration)
        .version(VersionVO.from(this.version() + 1)).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode resetMfaTemporalCode(
      final UserAccessTemporalCodeResetMfaTemporalCodePipeline pipeline) {
    return pipeline.resetMfaTemporalCode(this, attr -> {
      attr.setTempSecondFactorSeed(null);
      attr.setTempSecondFactorSeedExpiration(null);
      UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
      instance.addEvent(
          UserAccessTemporalCodeResetMfaTemporalCodeEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode resetPasswordRecover(
      final UserAccessTemporalCodeResetPasswordRecoverPipeline pipeline) {
    return pipeline.resetPasswordRecover(this, attr -> {
      attr.setTempSecondFactorSeed(null);
      attr.setTempSecondFactorSeedExpiration(null);
      UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
      instance.addEvent(
          UserAccessTemporalCodeResetPasswordRecoverEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @param pipeline
   * @return
   */
  public UserAccessTemporalCode update(final UserAccessTemporalCodeWriteAttributes attributes,
      final UserAccessTemporalCodeUpdatePipeline pipeline) {
    return pipeline.update(attributes, this, attr -> {
      UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
      instance.addEvent(UserAccessTemporalCodeUpdateEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer version() {
    return this.getVersion().getValue().orElse(0);
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final UserAccessTemporalCodeEvent event) {
    List<UserAccessTemporalCodeEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
