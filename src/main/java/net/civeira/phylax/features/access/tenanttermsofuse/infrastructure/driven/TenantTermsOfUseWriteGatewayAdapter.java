package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseCursor;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseFilter;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseWriteRepositoryGateway;
import net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.event.TenantTermsOfUseEventDispacher;
import net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.repository.TenantTermsOfUseRepository;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantTermsOfUseWriteGatewayAdapter implements TenantTermsOfUseWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TenantTermsOfUseEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TenantTermsOfUseRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TenantTermsOfUseAttachedUploadGatewayAdapter tenantTermsOfUseAttachedUploadGatewayAdapter;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(TenantTermsOfUseFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public TenantTermsOfUse create(TenantTermsOfUse entity) {
    tenantTermsOfUseAttachedUploadGatewayAdapter.commitAttached(entity, Optional.empty());
    TenantTermsOfUse result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public TenantTermsOfUse create(TenantTermsOfUse entity, Predicate<TenantTermsOfUse> verifier) {
    tenantTermsOfUseAttachedUploadGatewayAdapter.commitAttached(entity, Optional.empty());
    TenantTermsOfUse result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(TenantTermsOfUse entity) {
    repository.delete(entity);
    tenantTermsOfUseAttachedUploadGatewayAdapter.deleteAttached(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<TenantTermsOfUseFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<TenantTermsOfUse> findForUpdate(TenantTermsOfUseFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<TenantTermsOfUse> listForUpdate(TenantTermsOfUseFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public TenantTermsOfUse resolveForUpdate(TenantTermsOfUseRef reference) {
    return repository.resolveForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<TenantTermsOfUse> retrieveForUpdate(String uid,
      Optional<TenantTermsOfUseFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<TenantTermsOfUse> slideForUpdate(TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public TenantTermsOfUse update(TenantTermsOfUseRef reference, TenantTermsOfUse entity) {
    TenantTermsOfUse stored = resolveForUpdate(reference);
    tenantTermsOfUseAttachedUploadGatewayAdapter.commitAttached(entity, Optional.of(stored));
    TenantTermsOfUse result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
