package net.civeira.phylax.features.access.tenant.application.usecase.enable;

import java.util.List;

import io.quarkus.arc.Unremovable;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.stepper.ItemDescriptor;
import net.civeira.phylax.common.batch.stepper.ItemProcessor;
import net.civeira.phylax.common.batch.stepper.ItemReader;
import net.civeira.phylax.common.batch.stepper.ItemWriter;
import net.civeira.phylax.common.batch.stepper.StepContext;
import net.civeira.phylax.common.batch.stepper.StepCounter;
import net.civeira.phylax.common.batch.stepper.StepFinalizer;
import net.civeira.phylax.common.batch.stepper.StepInitializer;
import net.civeira.phylax.common.exception.ExecutionException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantsVisibility;
import net.civeira.phylax.features.access.tenant.domain.Tenant;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCursor;

@Unremovable
@ApplicationScoped
@RequiredArgsConstructor
class TenantEnablesInBatchExecutor implements
    StepCounter<TenantEnableAllInBatchCommand, TenantEnablesInBatchExecutor.TenantPaginableBatch>,
    StepFinalizer<TenantEnableAllInBatchCommand, TenantEnablesInBatchExecutor.TenantPaginableBatch>,
    StepInitializer<TenantEnableAllInBatchCommand, TenantEnablesInBatchExecutor.TenantPaginableBatch>,
    ItemReader<Tenant, TenantEnableAllInBatchCommand, TenantEnablesInBatchExecutor.TenantPaginableBatch>,
    ItemWriter<Tenant, TenantEnableAllInBatchCommand, TenantEnablesInBatchExecutor.TenantPaginableBatch>,
    ItemProcessor<Tenant, Tenant, TenantEnableAllInBatchCommand, TenantEnablesInBatchExecutor.TenantPaginableBatch>,
    ItemDescriptor<Tenant, TenantEnableAllInBatchCommand, TenantEnablesInBatchExecutor.TenantPaginableBatch> {

  /**
   * @autogenerated EntityGenerator
   */
  @Data
  public static class TenantPaginableBatch {

    /**
     * @autogenerated EntityGenerator
     */
    private String since;
  }

  /**
   * @autogenerated EntityGenerator
   */
  private final int size = 10;

  /**
   * @autogenerated EntityGenerator
   */
  private final TenantEnableUsecase usecase;

  /**
   * @autogenerated EntityGenerator
   */
  private final TenantsVisibility visibility;

  /**
   * @autogenerated EntityGenerator
   * @param context
   * @return
   */
  @Override
  public long approximatedItems(
      final StepContext<TenantEnableAllInBatchCommand, TenantPaginableBatch> context) {
    return visibility.countVisibles(context.getParams().getInteraction(),
        context.getParams().getFilter());
  }

  /**
   * @autogenerated EntityGenerator
   * @param context
   */
  @Override
  public void finish(
      final StepContext<TenantEnableAllInBatchCommand, TenantPaginableBatch> context) {
    usecase.flush();
  }

  /**
   * @autogenerated EntityGenerator
   * @param context
   */
  @Override
  public void init(final StepContext<TenantEnableAllInBatchCommand, TenantPaginableBatch> context) {
    context.setState(new TenantPaginableBatch());
  }

  /**
   * @autogenerated EntityGenerator
   * @param item
   * @param context
   * @return
   */
  @Override
  public String itemDescription(final Tenant item,
      final StepContext<TenantEnableAllInBatchCommand, TenantPaginableBatch> context) {
    return item.getUid();
  }

  /**
   * @autogenerated EntityGenerator
   * @param item
   * @param context
   * @return
   */
  @Override
  public Tenant process(final Tenant item,
      final StepContext<TenantEnableAllInBatchCommand, TenantPaginableBatch> context) {
    Allow allowed = usecase.allow(context.getParams().getInteraction(), item);
    if (!allowed.isAllowed()) {
      throw new ExecutionException("not-allowed", null);
    }
    return item;
  }

  /**
   * @autogenerated EntityGenerator
   * @param context
   * @return
   */
  @Override
  public List<Tenant> read(
      final StepContext<TenantEnableAllInBatchCommand, TenantPaginableBatch> context) {
    List<Tenant> page = visibility.listVisiblesForUpdate(context.getParams().getInteraction(),
        context.getParams().getFilter(),
        TenantCursor.builder().limit(size).sinceUid(context.getState().getSince()).build());
    context.getState().setSince(page.isEmpty() ? null : page.get(page.size() - 1).getUid());
    return page;
  }

  /**
   * @autogenerated EntityGenerator
   * @param items
   * @param context
   */
  @Override
  public void write(final List<Tenant> items,
      final StepContext<TenantEnableAllInBatchCommand, TenantPaginableBatch> context) {
    items.forEach(item -> usecase.enable(context.getParams().getInteraction(), item));
  }
}
