package net.civeira.phylax.features.access.role.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.role.Domains;
import net.civeira.phylax.features.access.role.Domains.DomainsBuilder;
import net.civeira.phylax.features.access.role.RoleReference;
import net.civeira.phylax.features.access.role.application.projection.RoleStateProyection;
import net.civeira.phylax.features.access.role.application.request.RoleStateChange;
import net.civeira.phylax.features.access.role.application.usecase.create.RoleCreateUsecase;
import net.civeira.phylax.features.access.role.application.usecase.delete.RoleCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.role.application.usecase.delete.RoleDeleteUsecase;
import net.civeira.phylax.features.access.role.application.usecase.list.RoleListUsecase;
import net.civeira.phylax.features.access.role.application.usecase.retrieve.RoleRetrieveUsecase;
import net.civeira.phylax.features.access.role.application.usecase.update.RoleUpdateUsecase;
import net.civeira.phylax.features.access.role.query.RoleCursor;
import net.civeira.phylax.features.access.role.query.RoleFilter;
import net.civeira.phylax.features.access.role.query.RoleOrder;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainReference;
import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenant.TenantReference;
import net.civeira.phylax.generated.openapi.api.RoleApi;
import net.civeira.phylax.generated.openapi.model.DomainsApiDto;
import net.civeira.phylax.generated.openapi.model.RoleApiDto;
import net.civeira.phylax.generated.openapi.model.RoleApiDtoList;
import net.civeira.phylax.generated.openapi.model.SecurityDomainApiRef;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;

@RequiredArgsConstructor
public class RoleController implements RoleApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String NAME_A_P_P_E_N_D = "&name=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String TENANTS_A_P_P_E_N_D = "&tenants=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RoleCreateUsecase create;

  /**
   * Role
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RoleDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RoleListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RoleRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RoleUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenants
   * @return
   */
  @Override
  public Response roleApiBatchDelete(final List<String> uids, final String search,
      final String name, final List<String> tenants) {
    RoleFilter.RoleFilterBuilder filterBuilder = RoleFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    RoleFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response roleApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(
        RoleCheckBatchDeleteStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param role
   * @return
   */
  @Override
  @Transactional
  public Response roleApiCreate(RoleApiDto role) {
    RoleStateProyection created = create.create(currentRequest.interaction(), toDomainModel(role));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response roleApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), RoleReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenants
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  @Override
  public Response roleApiList(final List<String> uids, final String search, final String name,
      final List<String> tenants, final Integer limit, final String sinceUid,
      final String sinceName, final String order) {
    List<RoleOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    RoleFilter.RoleFilterBuilder filterBuilder = RoleFilter.builder();
    RoleCursor.RoleCursorBuilder cursorBuilder = RoleCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    cursorBuilder = cursorBuilder.sinceName(sinceName);
    cursorBuilder = cursorBuilder.order(orderSteps);
    RoleFilter filter = filterBuilder.build();
    RoleCursor cursor = cursorBuilder.build();
    List<RoleStateProyection> listed = list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "role-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response roleApiRetrieve(final String uid) {
    RoleStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), RoleReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param role
   * @return
   */
  @Override
  @Transactional
  public Response roleApiUpdate(final String uid, final RoleApiDto role) {
    RoleStateProyection updated =
        update.update(currentRequest.interaction(), RoleReference.of(uid), toDomainModel(role));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param label
   * @return
   */
  private RoleOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("name-asc")) {
      return RoleOrder.NAME_ASC;
    } else if (label.trim().equals("name-desc")) {
      return RoleOrder.NAME_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private RoleApiDto toApiModel(RoleStateProyection dto) {
    RoleApiDto roleApiDto = new RoleApiDto();
    roleApiDto.setUid(dto.getUid().orElse(null));
    roleApiDto.setName(dto.getName().orElse(null));
    roleApiDto.setTenant(
        new TenantApiRef().$ref(dto.getTenant().map(TenantRef::getUidValue).orElse(null)));
    roleApiDto.setDomains(dto.getDomains()
        .map(domainsList -> domainsList.stream().map(this::toApiModelDomains).toList())
        .orElse(null));
    roleApiDto.setVersion(dto.getVersion().orElse(null));
    return roleApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private DomainsApiDto toApiModelDomains(Domains dto) {
    DomainsApiDto domainsApiDto = new DomainsApiDto();
    domainsApiDto.setUid(dto.getUidValue());
    domainsApiDto
        .setSecurityDomain(new SecurityDomainApiRef().$ref(dto.getSecurityDomainReferenceValue()));
    domainsApiDto.setVersion(dto.getVersionValue().orElse(null));
    return domainsApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param roleApiDto
   * @return
   */
  private RoleStateChange toDomainModel(RoleApiDto roleApiDto) {
    RoleStateChange dto = new RoleStateChange();
    if (null != roleApiDto.getUid()) {
      dto.setUid(roleApiDto.getUid());
    }
    if (null != roleApiDto.getName()) {
      dto.setName(roleApiDto.getName());
    }
    if (null != roleApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(roleApiDto.getTenant().get$Ref()));
    }
    if (null != roleApiDto.getDomains()) {
      dto.setDomains(roleApiDto.getDomains().stream().map(this::toDomainModelDomains).toList());
    }
    if (null != roleApiDto.getVersion()) {
      dto.setVersion(roleApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param domainsApiDto
   * @return
   */
  private Domains toDomainModelDomains(DomainsApiDto domainsApiDto) {
    DomainsBuilder builder = Domains.builder();
    if (null != domainsApiDto.getUid()) {
      builder = builder.uid(domainsApiDto.getUid());
    }
    if (null != domainsApiDto.getSecurityDomain()) {
      builder = builder
          .securityDomain(SecurityDomainReference.of(domainsApiDto.getSecurityDomain().get$Ref()));
    }
    if (null != domainsApiDto.getVersion()) {
      builder = builder.version(domainsApiDto.getVersion());
    }
    return builder.build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param roles
   * @param filter
   * @param cursor
   * @return
   */
  private RoleApiDtoList toListApiModel(List<RoleStateProyection> roles, RoleFilter filter,
      RoleCursor cursor) {
    Optional<RoleStateProyection> last =
        roles.isEmpty() ? Optional.empty() : Optional.of(roles.get(roles.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getName().ifPresent(filterName -> {
      String nameValue = URLEncoder.encode(String.valueOf(filterName), StandardCharsets.UTF_8);
      self.append(NAME_A_P_P_E_N_D + nameValue);
      next.append(NAME_A_P_P_E_N_D + nameValue);
      first.append(NAME_A_P_P_E_N_D + nameValue);
    });
    if (!filter.getTenants().isEmpty()) {
      String tenantsValue =
          URLEncoder.encode(String.join(",", filter.getTenants()), StandardCharsets.UTF_8);
      self.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      next.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      first.append(TENANTS_A_P_P_E_N_D + tenantsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceName().ifPresent(sinceName -> self
        .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      lastDto.getUid().ifPresent(
          uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8)));
      cursor.getSinceName().ifPresent(sinceName -> next
          .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    });
    return new RoleApiDtoList().items(roles.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final RoleOrder order) {
    if (null == order) {
      return null;
    } else if (order == RoleOrder.NAME_ASC) {
      return "name-asc";
    } else if (order == RoleOrder.NAME_DESC) {
      return "name-desc";
    } else {
      return null;
    }
  }
}
