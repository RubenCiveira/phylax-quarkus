package net.civeira.phylax.features.access.tenantconfig.valueobject;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing indicates if Multi-Factor Authentication (MFA) is enforced for the
 * tenant. of tenantConfig.
 * <p>
 * This class ensures that the force mfa is a non-null {@code String} and encapsulates its
 * validation and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design)
 * principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class ForceMfaVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param forceMfa
   * @return An empty instance
   */
  public static ForceMfaVO from(final Boolean forceMfa) {
    return tryFrom(forceMfa);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param forceMfa
   * @return An empty instance
   */
  public static ForceMfaVO tryFrom(final Object forceMfa) {
    ConstraintFailList list = new ConstraintFailList();
    ForceMfaVO result = tryFrom(forceMfa, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param forceMfa temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> ForceMfaVO tryFrom(final Object forceMfa,
      final T fails) {
    if (null == forceMfa) {
      fails.add(new ConstraintFail("not-null", "forceMfa", null, "Cant be null"));
      return null;
    } else if (forceMfa instanceof Boolean castedForceMfa) {
      return new ForceMfaVO(castedForceMfa);
    } else {
      fails.add(new ConstraintFail("wrong-type", "forceMfa", forceMfa.getClass(),
          "A Boolean type is expected for forceMfa"));
      return null;
    }
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final Boolean value;

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
