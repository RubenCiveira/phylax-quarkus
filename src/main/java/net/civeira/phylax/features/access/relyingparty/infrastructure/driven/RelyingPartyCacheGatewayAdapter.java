package net.civeira.phylax.features.access.relyingparty.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.relyingparty.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.gateway.RelyingPartyCacheGateway;
import net.civeira.phylax.features.access.relyingparty.gateway.RelyingPartyCached;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyCursor;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class RelyingPartyCacheGatewayAdapter implements RelyingPartyCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("relying-party")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param relyingParty
   */
  @Override
  public void remove(final RelyingParty relyingParty) {
    log.trace("Invalidating relyingParty cache due to the removal of {}", relyingParty);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<RelyingPartyCached> retrieve(final RelyingPartyFilter filter,
      final RelyingPartyCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at relyingParty cache for the key {}", key);
    return cache.<String, RelyingPartyCached>get(key, k -> null)
        .map(cached -> Optional.ofNullable(cached)).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param relyingPartys
   * @return
   */
  public RelyingPartyCached store(final RelyingPartyFilter filter, final RelyingPartyCursor cursor,
      final List<RelyingParty> relyingPartys) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache.<String, RelyingPartyCached>get(key,
        k -> RelyingPartyCached.builder().since(OffsetDateTime.now()).value(relyingPartys).build())
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param relyingParty
   */
  @Override
  public void update(final RelyingParty relyingParty) {
    log.trace("Invalidating relyingParty cache due to the update of {}", relyingParty);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final RelyingPartyFilter filter, final RelyingPartyCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
