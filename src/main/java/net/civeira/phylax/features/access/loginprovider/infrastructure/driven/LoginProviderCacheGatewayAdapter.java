package net.civeira.phylax.features.access.loginprovider.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCacheGateway;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCached;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCursor;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class LoginProviderCacheGatewayAdapter implements LoginProviderCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("login-provider")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param loginProvider
   */
  @Override
  public void remove(final LoginProvider loginProvider) {
    log.trace("Invalidating loginProvider cache due to the removal of {}", loginProvider);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<LoginProviderCached> retrieve(final LoginProviderFilter filter,
      final LoginProviderCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at loginProvider cache for the key {}", key);
    return cache.<String, LoginProviderCached>get(key, k -> null)
        .map(cached -> Optional.ofNullable(cached)).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param loginProviders
   * @return
   */
  public LoginProviderCached store(final LoginProviderFilter filter,
      final LoginProviderCursor cursor, final List<LoginProvider> loginProviders) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache.<String, LoginProviderCached>get(key, k -> LoginProviderCached.builder()
        .since(OffsetDateTime.now()).value(loginProviders).build()).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param loginProvider
   */
  @Override
  public void update(final LoginProvider loginProvider) {
    log.trace("Invalidating loginProvider cache due to the update of {}", loginProvider);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final LoginProviderFilter filter, final LoginProviderCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
