package net.civeira.phylax.features.access.tenant.infrastructure.bootstrap;

import java.util.List;

import io.quarkus.runtime.StartupEvent;
import jakarta.annotation.Priority;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Rbac;
import net.civeira.phylax.common.security.scope.FieldDescription;
import net.civeira.phylax.common.security.scope.Kind;
import net.civeira.phylax.common.security.scope.ResourceDescription;
import net.civeira.phylax.common.security.scope.ScopeDescription;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantRbacRegister {

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private static final ResourceDescription RESOURCE = ResourceDescription.builder().name("tenant")
      .description(
          "Represents a tenant or account in the system. Each tenant defines an isolated scope for users and applications, with optional access to global resources or restricted visibility. Tenants allow multi-tenancy features in the platform.")
      .build();

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private final Rbac rbac;

  /**
   * @autogenerated RegisterGeneratorGenerator
   * @param ev
   */
  void registerResource(@Observes @Priority(10) final StartupEvent ev) {
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.READ).name("list")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve").description("list").build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("create")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("update")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("delete")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.WRITE).name("enable")
            .description("Enables the tenant, allowing its users to access the system.")
            .required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.WRITE).name("disable")
            .description("Disables the tenant, preventing access without removing the record.")
            .required(List.of()).build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("uid")
        .description("A uid string to identify the entity").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("name")
        .description("The name to identify the account.").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("domain")
        .description("A domain suffix to identify the account").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("enabled")
            .description("The users of a non enabled tenant could not make login on the system")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("accessToAllApplications").description(
            "Defines if users from this tenant can access all parties and clients, or only those explicitly assigned.")
            .build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("trustedClients")
        .description("A list of OAuth clients marked as trusted for this tenant.").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("relingParties")
            .description(
                "A list of relying parties (services or applications) associated with this tenant.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("version")
            .description(
                "Campo con el n√∫mero de version de tenant para controlar bloqueos optimistas")
            .build());
  }
}
