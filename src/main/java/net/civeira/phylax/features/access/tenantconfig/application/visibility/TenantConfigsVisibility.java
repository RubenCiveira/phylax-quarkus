package net.civeira.phylax.features.access.tenantconfig.application.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantsVisibility;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfig;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfigChangeSet;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfigRef;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigCacheGateway;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigCached;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigCursor;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigFilter;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigReadRepositoryGateway;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigWriteRepositoryGateway;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.TenantVO;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantConfigsVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantConfigCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantConfigVisibilityCheck> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantConfigFixedFieldsCheck> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantConfigAccesibleCheck> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantConfigHiddenFieldsCheck> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TenantConfigEntityEnrichment> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantConfigReadRepositoryGateway tenantConfigReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantConfigWriteRepositoryGateway tenantConfigWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantsVisibility tenantsVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids
        .size() == listVisibles(prev, TenantConfigVisibilityFilter.builder().uids(uids).build(),
            TenantConfigCursor.builder().build()).size();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public TenantConfigChangeSet copyWithFixed(Interaction prev, TenantConfigChangeSet source,
      TenantConfig original) {
    TenantConfigChangeSet withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    TenantConfigEntityEnrichment proposal = TenantConfigEntityEnrichment.builder()
        .dto(withReferences).interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public TenantConfigChangeSet copyWithFixed(Interaction prev, TenantConfigChangeSet source) {
    TenantConfigChangeSet withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    TenantConfigEntityEnrichment proposal =
        TenantConfigEntityEnrichment.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param tenantConfig
   * @return The input dto with hidden values
   */
  public TenantConfigVisibleProjection copyWithHidden(Interaction prev, TenantConfig tenantConfig) {
    TenantConfigVisibleProjection target = new TenantConfigVisibleProjection(tenantConfig);
    fieldsToHide(prev, tenantConfig).forEach(target::unset);
    return target;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, TenantConfigVisibilityFilter filter) {
    return tenantConfigReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    TenantConfigFixedFieldsCheck proposal =
        TenantConfigFixedFieldsCheck.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param tenantConfig
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, TenantConfigRef tenantConfig) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, tenantConfig));
    TenantConfigFixedFieldsCheck proposal = TenantConfigFixedFieldsCheck.builder().fields(fields)
        .tenantConfig(tenantConfig).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    TenantConfigHiddenFieldsCheck proposal =
        TenantConfigHiddenFieldsCheck.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param tenantConfig
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, TenantConfigRef tenantConfig) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    TenantConfigHiddenFieldsCheck proposal = TenantConfigHiddenFieldsCheck.builder().fields(fields)
        .tenantConfig(tenantConfig).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public TenantConfigCached listCachedVisibles(Interaction prev,
      TenantConfigVisibilityFilter filter, TenantConfigCursor cursor) {
    TenantConfigFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<TenantConfig> listVisibles(Interaction prev, TenantConfigVisibilityFilter filter,
      TenantConfigCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<TenantConfig> listVisiblesForUpdate(Interaction prev,
      TenantConfigVisibilityFilter filter, TenantConfigCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public TenantConfigCached retrieveCachedVisible(Interaction prev, String uid) {
    TenantConfigCursor cursor = TenantConfigCursor.builder().limit(1).build();
    TenantConfigFilter visibleFilter =
        applyPreVisibilityFilter(prev, TenantConfigVisibilityFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<TenantConfig> list =
          retrieveVisible(prev, uid).<List<TenantConfig>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<TenantConfig> retrieveVisible(Interaction prev, String uid) {
    TenantConfigFilter filter =
        applyPreVisibilityFilter(prev, TenantConfigVisibilityFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<TenantConfig> retrieveVisibleForUpdate(Interaction prev, String uid) {
    TenantConfigFilter filter =
        applyPreVisibilityFilter(prev, TenantConfigVisibilityFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private TenantConfigFilter applyPreVisibilityFilter(Interaction prev,
      TenantConfigVisibilityFilter filter) {
    TenantConfigVisibilityCheck proposal =
        TenantConfigVisibilityCheck.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    TenantConfigVisibilityFilter modified = proposal.getFilter();
    return TenantConfigFilter.builder().uid(modified.getUid().orElse(null))
        .uids(modified.getUids().stream().toList()).search(modified.getSearch().orElse(null))
        .tenant(modified.getTenant().orElse(null)).tenants(modified.getTenants())
        .tenantTenantAccesible(modified.getTenantTenantAccesible().orElse(null)).build();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param tenantConfigRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, TenantConfig tenantConfigRef) {
    TenantConfigAccesibleCheck proposal = TenantConfigAccesibleCheck.builder().visible(true)
        .entity(tenantConfigRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<TenantConfig> queryItem(Interaction prev, String uid,
      TenantConfigFilter filter) {
    return tenantConfigReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<TenantConfig> queryItemForUpdate(Interaction prev, String uid,
      TenantConfigFilter filter) {
    return tenantConfigWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<TenantConfig> queryItems(Interaction prev, TenantConfigFilter filter,
      TenantConfigCursor cursor) {
    List<TenantConfig> list = new ArrayList<>();
    Iterator<TenantConfig> slide = tenantConfigReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<TenantConfig> queryItemsForUpdate(Interaction prev, TenantConfigFilter filter,
      TenantConfigCursor cursor) {
    List<TenantConfig> list = new ArrayList<>();
    Iterator<TenantConfig> slide = tenantConfigWriteRepositoryGateway.slideForUpdate(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private TenantConfigChangeSet visiblesReferences(Interaction prev, TenantConfigChangeSet source) {
    source.getTenant().map(TenantVO::getTenantUid).ifPresent(tenant -> {
      boolean visible = tenantsVisibility.checkVisibility(prev, tenant);
      if (!visible) {
        throw new NotFoundException("No tenant - " + tenant);
      }
    });
    return source;
  }
}
