package net.civeira.phylax.features.access.scopeassignation.application.usecase.create;

import java.util.Optional;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.scopeassignation.application.visibility.ScopeAssignationVisibleProjection;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.SecurityDomainVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.SecurityScopeVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainRef;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeRef;

/**
 * A dto transfer to hold scope assignation attribute values
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class ScopeAssignationCreateProjection {

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated CreateProjectionGenerator
   * @param visible The entity who provide values.
   * @return
   */
  public static ScopeAssignationCreateProjection from(
      final ScopeAssignationVisibleProjection visible) {
    ScopeAssignationCreateProjection instance = new ScopeAssignationCreateProjection();
    instance.uidValue = visible.getUid();
    instance.securityDomainValue = visible.getSecurityDomain();
    instance.securityScopeValue = visible.getSecurityScope();
    instance.versionValue = visible.getVersion();
    return instance;
  }

  /**
   * El security domain de scope assignation
   *
   * @autogenerated CreateProjectionGenerator
   */
  private Optional<SecurityDomainVO> securityDomainValue;

  /**
   * El security scope de scope assignation
   *
   * @autogenerated CreateProjectionGenerator
   */
  private Optional<SecurityScopeVO> securityScopeValue;

  /**
   * El uid de scope assignation
   *
   * @autogenerated CreateProjectionGenerator
   */
  private Optional<UidVO> uidValue;

  /**
   * Campo con el n√∫mero de version de scope assignation para controlar bloqueos optimistas
   *
   * @autogenerated CreateProjectionGenerator
   */
  private Optional<VersionVO> versionValue;

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated CreateProjectionGenerator
   * @param entity The entity who provide values.
   */
  public ScopeAssignationCreateProjection(final ScopeAssignation entity) {
    uidValue = Optional.of(entity.getUidValue());
    securityDomainValue = Optional.of(entity.getSecurityDomainValue());
    securityScopeValue = Optional.of(entity.getSecurityScopeValue());
    versionValue = Optional.of(entity.getVersionValue());
  }

  /**
   * Inform for a possible change propolsal in SecurityDomain
   *
   * @autogenerated CreateProjectionGenerator
   * @return empty if there is no change proposal for SecurityDomain, otherwise the value for
   *         SecurityDomain
   */
  public SecurityDomainRef getSecurityDomain() {
    return securityDomainValue.map(SecurityDomainVO::getSecurityDomain).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in SecurityDomain
   *
   * @autogenerated CreateProjectionGenerator
   * @return empty if there is no change proposal for SecurityDomain, otherwise the value for
   *         SecurityDomain
   */
  public String getSecurityDomainReference() {
    return getSecurityDomainReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in SecurityDomain
   *
   * @autogenerated CreateProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for SecurityDomain, otherwise the value for
   *         SecurityDomain
   */
  public String getSecurityDomainReferenceOrDefault(final String orDefault) {
    return securityDomainValue.map(SecurityDomainVO::getSecurityDomain)
        .map(SecurityDomainRef::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in SecurityScope
   *
   * @autogenerated CreateProjectionGenerator
   * @return empty if there is no change proposal for SecurityScope, otherwise the value for
   *         SecurityScope
   */
  public SecurityScopeRef getSecurityScope() {
    return securityScopeValue.map(SecurityScopeVO::getSecurityScope).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in SecurityScope
   *
   * @autogenerated CreateProjectionGenerator
   * @return empty if there is no change proposal for SecurityScope, otherwise the value for
   *         SecurityScope
   */
  public String getSecurityScopeReference() {
    return getSecurityScopeReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in SecurityScope
   *
   * @autogenerated CreateProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for SecurityScope, otherwise the value for
   *         SecurityScope
   */
  public String getSecurityScopeReferenceOrDefault(final String orDefault) {
    return securityScopeValue.map(SecurityScopeVO::getSecurityScope).map(SecurityScopeRef::getUid)
        .orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated CreateProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUid() {
    return getUidOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated CreateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUidOrDefault(final String orDefault) {
    return uidValue.map(UidVO::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated CreateProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersion() {
    return getVersionOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated CreateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersionOrDefault(final Integer orDefault) {
    return versionValue.flatMap(VersionVO::getVersion).orElse(orDefault);
  }
}
