package net.civeira.phylax.features.access.tenanttermsofuse.application.request;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenanttermsofuse.command.TenantTermsOfUseWriteAttributes;
import net.civeira.phylax.features.access.tenanttermsofuse.valueobject.ActivationDateVO;
import net.civeira.phylax.features.access.tenanttermsofuse.valueobject.AttachedVO;
import net.civeira.phylax.features.access.tenanttermsofuse.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenanttermsofuse.valueobject.TextVO;
import net.civeira.phylax.features.access.tenanttermsofuse.valueobject.UidVO;
import net.civeira.phylax.features.access.tenanttermsofuse.valueobject.VersionVO;

@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TenantTermsOfUseStateChange implements TenantTermsOfUseWriteAttributes {

  /**
   * @autogenerated EntityStateChangeGenerator
   */
  public static class TenantTermsOfUseStateChangeBuilder {

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param activationDate
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder activationDate(final OffsetDateTime activationDate) {
      return activationDate(Optional.of(ActivationDateVO.from(activationDate)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param activationDate
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder activationDate(
        final Optional<ActivationDateVO> activationDate) {
      this.activationDate$value = activationDate;
      this.activationDate$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param attached
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder attached(final String attached) {
      return attached(Optional.of(AttachedVO.from(attached)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param attached
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder attached(final Optional<AttachedVO> attached) {
      this.attached$value = attached;
      this.attached$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param tenant
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder tenant(final TenantRef tenant) {
      return tenant(Optional.of(TenantVO.from(tenant)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param tenant
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder tenant(final Optional<TenantVO> tenant) {
      this.tenant$value = tenant;
      this.tenant$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param text
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder text(final String text) {
      return text(Optional.of(TextVO.from(text)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param text
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder text(final Optional<TextVO> text) {
      this.text$value = text;
      this.text$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param uid
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param uid
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param version
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * @autogenerated EntityStateChangeGenerator
     * @param version
     * @return
     */
    public TenantTermsOfUseStateChangeBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * Date when the Terms of Use become active.
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<ActivationDateVO> activationDate = Optional.empty();

  /**
   * An optional file attachment (e.g., PDF or signed document).
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<AttachedVO> attached = Optional.empty();

  /**
   * The tenant this Terms of Use document belongs to.
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * The content of the Terms of Use document.
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<TextVO> text = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant terms of use para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateChangeGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param attributes
   */
  public TenantTermsOfUseStateChange(final TenantTermsOfUseWriteAttributes attributes) {
    uid = attributes.getUid();
    tenant = attributes.getTenant();
    text = attributes.getText();
    attached = attributes.getAttached();
    activationDate = attributes.getActivationDate();
    version = attributes.getVersion();
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<ActivationDateVO> getActivationDate() {
    return activationDate;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<AttachedVO> getAttached() {
    return attached;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<TextVO> getText() {
    return text;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  @Override
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateChange setActivationDate(final OffsetDateTime value) {
    this.activationDate = Optional.of(ActivationDateVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateChange setAttached(final String value) {
    this.attached = Optional.of(AttachedVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateChange setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateChange setText(final String value) {
    this.text = Optional.of(TextVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateChange setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateChange setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("text".equals(field)) {
      this.unsetText();
    }
    if ("attached".equals(field)) {
      this.unsetAttached();
    }
    if ("activationDate".equals(field)) {
      this.unsetActivationDate();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public TenantTermsOfUseStateChange unsetActivationDate() {
    this.activationDate = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public TenantTermsOfUseStateChange unsetAttached() {
    this.attached = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public TenantTermsOfUseStateChange unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public TenantTermsOfUseStateChange unsetText() {
    this.text = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public TenantTermsOfUseStateChange unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateChangeGenerator
   * @return
   */
  public TenantTermsOfUseStateChange unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
