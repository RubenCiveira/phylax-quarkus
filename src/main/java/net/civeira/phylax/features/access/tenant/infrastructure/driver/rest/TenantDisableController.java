package net.civeira.phylax.features.access.tenant.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.application.usecase.disable.TenantDisableFilter;
import net.civeira.phylax.features.access.tenant.application.usecase.disable.TenantDisableProjection;
import net.civeira.phylax.features.access.tenant.application.usecase.disable.TenantDisableStatus;
import net.civeira.phylax.features.access.tenant.application.usecase.disable.TenantDisableUsecase;
import net.civeira.phylax.features.access.tenant.domain.RelingParties;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients;
import net.civeira.phylax.generated.openapi.model.RelingPartiesApiDto;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.TenantApiDto;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;
import net.civeira.phylax.generated.openapi.model.TrustedClientsApiDto;

@RequiredArgsConstructor
@RequestScoped
public class TenantDisableController {

  /**
   * @autogenerated ActionControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ActionControllerGenerator
   */
  private final TenantDisableUsecase disable;

  /**
   * @autogenerated ActionControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @return
   */
  public Response tenantApiBatchDisable(final List<String> uids, final String search,
      final String name) {
    TenantDisableFilter.TenantDisableFilterBuilder filterBuilder = TenantDisableFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    TenantDisableFilter filter = filterBuilder.build();
    BatchIdentificator task = disable.disable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param batchId
   * @return
   */
  public Response tenantApiBatchDisableQuery(final String batchId) {
    BatchProgress task = disable.checkProgress(
        TenantDisableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response tenantApiDisable(final String uid) {
    TenantDisableProjection updated =
        disable.disable(currentRequest.interaction(), TenantReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param dto
   * @return
   */
  private TenantApiDto toApiModel(TenantDisableProjection dto) {
    TenantApiDto tenantApiDto = new TenantApiDto();
    tenantApiDto.setUid(dto.getUid());
    tenantApiDto.setName(dto.getName());
    tenantApiDto.setDomain(dto.getDomain());
    tenantApiDto.setEnabled(dto.getEnabled());
    tenantApiDto.setAccessToAllApplications(dto.getAccessToAllApplications());
    tenantApiDto.setTrustedClients(
        dto.getTrustedClients().stream().map(this::toApiModelTrustedClients).toList());
    tenantApiDto.setRelingParties(
        dto.getRelingParties().stream().map(this::toApiModelRelingParties).toList());
    tenantApiDto.setVersion(dto.getVersion());
    return tenantApiDto;
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param dto
   * @return
   */
  private RelingPartiesApiDto toApiModelRelingParties(RelingParties dto) {
    RelingPartiesApiDto relingPartiesApiDto = new RelingPartiesApiDto();
    relingPartiesApiDto.setUid(dto.getUid());
    relingPartiesApiDto.setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyUid()));
    relingPartiesApiDto.setVersion(dto.getVersion().orElse(null));
    return relingPartiesApiDto;
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param dto
   * @return
   */
  private TrustedClientsApiDto toApiModelTrustedClients(TrustedClients dto) {
    TrustedClientsApiDto trustedClientsApiDto = new TrustedClientsApiDto();
    trustedClientsApiDto.setUid(dto.getUid());
    trustedClientsApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientUid()));
    trustedClientsApiDto.setVersion(dto.getVersion().orElse(null));
    return trustedClientsApiDto;
  }
}
