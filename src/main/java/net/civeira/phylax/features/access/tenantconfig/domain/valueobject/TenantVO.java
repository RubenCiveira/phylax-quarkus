package net.civeira.phylax.features.access.tenantconfig.domain.valueobject;

import lombok.EqualsAndHashCode;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;

/**
 * Value Object representing the tenant this configuration applies to. of tenantConfig.
 * <p>
 * This class ensures that the tenant is a non-null {@code String} and encapsulates its validation
 * and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design) principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@RequiredArgsConstructor
@EqualsAndHashCode
public class TenantVO {

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param tenant
   * @return An empty instance
   */
  public static TenantVO from(final TenantRef tenant) {
    return tryFrom(tenant);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param tenantUid
   * @return An empty instance
   */
  public static TenantVO fromReference(final String tenantUid) {
    return from(TenantReference.of(tenantUid));
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param tenant
   * @return An empty instance
   */
  public static TenantVO tryFrom(final Object tenant) {
    ConstraintFailList list = new ConstraintFailList();
    TenantVO result = tryFrom(tenant, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param tenant temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> TenantVO tryFrom(final Object tenant, final T fails) {
    if (null == tenant) {
      fails.add(new ConstraintFail("not-null", "tenant", null, "Cant be null"));
      return null;
    } else if (tenant instanceof TenantRef castedTenant) {
      return new TenantVO(castedTenant);
    } else {
      fails.add(new ConstraintFail("wrong-type", "tenant", tenant.getClass(),
          "A TenantRef type is expected for tenant"));
      return null;
    }
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param tenantUid
   * @return An empty instance
   */
  public static TenantVO tryFromReference(final String tenantUid) {
    return tryFrom(TenantReference.of(tenantUid));
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param tenantUid
   * @param fails Error list
   * @return An empty instance
   */
  public static TenantVO tryFromReference(final String tenantUid, final ConstraintFailList fails) {
    return tryFrom(TenantReference.of(tenantUid), fails);
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final TenantRef value;

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public TenantRef getTenant() {
    return value;
  }

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public String getTenantUid() {
    return value.getUid();
  }

  /**
   * Returns a formatted string representation of the name.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
