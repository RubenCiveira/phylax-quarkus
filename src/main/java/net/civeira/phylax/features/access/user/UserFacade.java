package net.civeira.phylax.features.access.user;

import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.user.command.UserWriteAttributes;
import net.civeira.phylax.features.access.user.transition.block.UserBlockPipeline;
import net.civeira.phylax.features.access.user.transition.changepassword.UserChangePasswordPipeline;
import net.civeira.phylax.features.access.user.transition.create.UserCreatePipeline;
import net.civeira.phylax.features.access.user.transition.delete.UserDeletePipeline;
import net.civeira.phylax.features.access.user.transition.disable.UserDisablePipeline;
import net.civeira.phylax.features.access.user.transition.enable.UserEnablePipeline;
import net.civeira.phylax.features.access.user.transition.setmfaseed.UserSetMfaSeedPipeline;
import net.civeira.phylax.features.access.user.transition.unlock.UserUnlockPipeline;
import net.civeira.phylax.features.access.user.transition.update.UserUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class UserFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserBlockPipeline blockPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserChangePasswordPipeline changePasswordPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserDisablePipeline disablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserEnablePipeline enablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<UserMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserSetMfaSeedPipeline setMfaSeedPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserUnlockPipeline unlockPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param blockedUntil
   * @return The entity
   */
  public User block(final User base, final OffsetDateTime blockedUntil) {
    return base.block(blockedUntil, blockPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param password
   * @return The entity
   */
  public User changePassword(final User base, final String password) {
    return base.changePassword(password, changePasswordPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public User create(final UserWriteAttributes attributes) {
    return User.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public User delete(final User entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public User disable(final User base) {
    return base.disable(disablePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public User enable(final User base) {
    return base.enable(enablePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param secondFactorSeed
   * @return The entity
   */
  public User setMfaSeed(final User base, final String secondFactorSeed) {
    return base.setMfaSeed(secondFactorSeed, setMfaSeedPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public User unlock(final User base) {
    return base.unlock(unlockPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public User update(final User base, final UserWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
