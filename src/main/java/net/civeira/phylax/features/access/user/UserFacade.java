package net.civeira.phylax.features.access.user;

import java.time.OffsetDateTime;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.user.command.UserWriteAttributes;

@ApplicationScoped
@RequiredArgsConstructor
public class UserFacade {

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param blockedUntil
   * @return The entity
   */
  public User block(final User base, final OffsetDateTime blockedUntil) {
    return base.block(blockedUntil);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param password
   * @return The entity
   */
  public User changePassword(final User base, final String password) {
    return base.changePassword(password);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public User create(final UserWriteAttributes attributes) {
    return User.create(attributes);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public User delete(final User entity) {
    return entity.delete();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public User disable(final User base) {
    return base.disable();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public User enable(final User base) {
    return base.enable();
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    return User.readonlyFields();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param secondFactorSeed
   * @return The entity
   */
  public User setMfaSeed(final User base, final String secondFactorSeed) {
    return base.setMfaSeed(secondFactorSeed);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public User unlock(final User base) {
    return base.unlock();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public User update(final User base, final UserWriteAttributes attributes) {
    return base.update(attributes);
  }
}
