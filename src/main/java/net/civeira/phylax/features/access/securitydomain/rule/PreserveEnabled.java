package net.civeira.phylax.features.access.securitydomain.rule;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.securitydomain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainMetadataProvider;
import net.civeira.phylax.features.access.securitydomain.transition.SecurityDomainChangeProposal;
import net.civeira.phylax.features.access.securitydomain.transition.create.SecurityDomainCreateStep;
import net.civeira.phylax.features.access.securitydomain.transition.create.SecurityDomainCreateTransition;
import net.civeira.phylax.features.access.securitydomain.transition.update.SecurityDomainUpdateStep;
import net.civeira.phylax.features.access.securitydomain.transition.update.SecurityDomainUpdateTransition;
import net.civeira.phylax.features.access.securitydomain.valueobject.EnabledVO;

@ApplicationScoped
@RequiredArgsConstructor
public class PreserveEnabled
    implements SecurityDomainMetadataProvider, SecurityDomainCreateStep, SecurityDomainUpdateStep {

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public SecurityDomain create(final SecurityDomainCreateTransition transition,
      final Function<SecurityDomainCreateTransition, SecurityDomain> next) {
    return next.apply(transition.map(calculate(transition.getData(), Optional.empty())));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @return
   */
  @Override
  public Set<String> readonlyFields() {
    return Set.of("enabled");
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public SecurityDomain update(final SecurityDomainUpdateTransition transition,
      final Function<SecurityDomainUpdateTransition, SecurityDomain> next) {
    return next.apply(
        transition.map(calculate(transition.getData(), Optional.of(transition.getOriginal()))));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param attributes
   * @param original
   * @return
   */
  private SecurityDomainChangeProposal calculate(final SecurityDomainChangeProposal attributes,
      final Optional<SecurityDomain> original) {
    return attributes.setEnabled(original.map(SecurityDomain::getEnabled)
        .flatMap(EnabledVO::getValue).orElseGet(() -> false));
  }
}
