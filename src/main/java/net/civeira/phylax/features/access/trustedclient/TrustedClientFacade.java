package net.civeira.phylax.features.access.trustedclient;

import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.trustedclient.command.TrustedClientWriteAttributes;
import net.civeira.phylax.features.access.trustedclient.transition.create.TrustedClientCreatePipeline;
import net.civeira.phylax.features.access.trustedclient.transition.delete.TrustedClientDeletePipeline;
import net.civeira.phylax.features.access.trustedclient.transition.disable.TrustedClientDisablePipeline;
import net.civeira.phylax.features.access.trustedclient.transition.enable.TrustedClientEnablePipeline;
import net.civeira.phylax.features.access.trustedclient.transition.update.TrustedClientUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class TrustedClientFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TrustedClientCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TrustedClientDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TrustedClientDisablePipeline disablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TrustedClientEnablePipeline enablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<TrustedClientMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TrustedClientUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public TrustedClient create(final TrustedClientWriteAttributes attributes) {
    return TrustedClient.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public TrustedClient delete(final TrustedClient entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public TrustedClient disable(final TrustedClient base) {
    return base.disable(disablePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public TrustedClient enable(final TrustedClient base) {
    return base.enable(enablePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public TrustedClient update(final TrustedClient base,
      final TrustedClientWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
