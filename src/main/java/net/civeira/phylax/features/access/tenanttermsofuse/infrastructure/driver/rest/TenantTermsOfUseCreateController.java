package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.driver.rest;

import org.apache.commons.lang3.StringUtils;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.create.TenantTermsOfUseCreateInput;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.create.TenantTermsOfUseCreateProjection;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.create.TenantTermsOfUseCreateUsecase;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;
import net.civeira.phylax.generated.openapi.model.TenantTermsOfUseApiDto;

@RequiredArgsConstructor
public class TenantTermsOfUseCreateController {

  /**
   * @autogenerated CreateControllerGenerator
   */
  private final TenantTermsOfUseCreateUsecase create;

  /**
   * @autogenerated CreateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated CreateControllerGenerator
   * @param tenantTermsOfUse
   * @return
   */
  @Transactional
  public Response tenantTermsOfUseApiCreate(TenantTermsOfUseApiDto tenantTermsOfUse) {
    TenantTermsOfUseCreateProjection created =
        create.create(currentRequest.interaction(), toDomainModel(tenantTermsOfUse));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param dto
   * @return
   */
  private TenantTermsOfUseApiDto toApiModel(TenantTermsOfUseCreateProjection dto) {
    TenantTermsOfUseApiDto tenantTermsOfUseApiDto = new TenantTermsOfUseApiDto();
    tenantTermsOfUseApiDto.setUid(dto.getUid());
    tenantTermsOfUseApiDto.setTenant(new TenantApiRef().$ref(dto.getTenantReference()));
    tenantTermsOfUseApiDto.setText(dto.getText());
    String attached = dto.getAttached();
    if (null != attached) {
      tenantTermsOfUseApiDto.setAttached(currentRequest.getPublicHost()
          + "/api/access/tenants-terms-of-use/" + dto.getUidOrDefault("-") + "/attached");
    }
    tenantTermsOfUseApiDto.setActivationDate(dto.getActivationDate());
    tenantTermsOfUseApiDto.setVersion(dto.getVersion());
    return tenantTermsOfUseApiDto;
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param tenantTermsOfUseApiDto
   * @return
   */
  private TenantTermsOfUseCreateInput toDomainModel(TenantTermsOfUseApiDto tenantTermsOfUseApiDto) {
    TenantTermsOfUseCreateInput dto = new TenantTermsOfUseCreateInput();
    if (null != tenantTermsOfUseApiDto.getUid()) {
      dto.setUid(tenantTermsOfUseApiDto.getUid());
    }
    if (null != tenantTermsOfUseApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(tenantTermsOfUseApiDto.getTenant().get$Ref()));
    }
    if (null != tenantTermsOfUseApiDto.getText()) {
      dto.setText(tenantTermsOfUseApiDto.getText());
    }
    if (!StringUtils.isBlank(tenantTermsOfUseApiDto.getAttached())) {
      String url = tenantTermsOfUseApiDto.getAttached();
      if (tenantTermsOfUseApiDto.getAttached().startsWith(currentRequest.getPublicHost()
          + "/api/access/tenants-terms-of-use/-/temp-attached?temp=")) {
        dto.setAttached("temp://" + (url.substring((currentRequest.getPublicHost()
            + "/api/access/tenants-terms-of-use/-/temp-attached?temp=").length())));
      } else if (!(url.equals(currentRequest.getPublicHost() + "/api/access/tenants-terms-of-use/"
          + tenantTermsOfUseApiDto.getUid() + "/attached"))) {
        dto.setAttached(tenantTermsOfUseApiDto.getAttached());
      }
    }
    if (null != tenantTermsOfUseApiDto.getActivationDate()) {
      dto.setActivationDate(tenantTermsOfUseApiDto.getActivationDate());
    }
    if (null != tenantTermsOfUseApiDto.getVersion()) {
      dto.setVersion(tenantTermsOfUseApiDto.getVersion());
    }
    return dto;
  }
}
