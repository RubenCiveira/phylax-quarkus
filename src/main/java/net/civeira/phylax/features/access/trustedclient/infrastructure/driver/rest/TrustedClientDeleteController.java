package net.civeira.phylax.features.access.trustedclient.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.trustedclient.application.usecase.delete.TrustedClientCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.trustedclient.application.usecase.delete.TrustedClientDeleteFilter;
import net.civeira.phylax.features.access.trustedclient.application.usecase.delete.TrustedClientDeleteUsecase;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;

@RequiredArgsConstructor
public class TrustedClientDeleteController {

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final TrustedClientDeleteUsecase delete;

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uids
   * @param search
   * @param code
   * @return
   */
  public Response trustedClientApiBatchDelete(final List<String> uids, final String search,
      final String code) {
    TrustedClientDeleteFilter.TrustedClientDeleteFilterBuilder filterBuilder =
        TrustedClientDeleteFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.code(code);
    TrustedClientDeleteFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param batchId
   * @return
   */
  public Response trustedClientApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(TrustedClientCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response trustedClientApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), TrustedClientReference.of(uid));
    return Response.noContent().build();
  }
}
