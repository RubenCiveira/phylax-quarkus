package net.civeira.phylax.features.access.role.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.role.application.usecase.list.RoleListCursor;
import net.civeira.phylax.features.access.role.application.usecase.list.RoleListFilter;
import net.civeira.phylax.features.access.role.application.usecase.list.RoleListOrder;
import net.civeira.phylax.features.access.role.application.usecase.list.RoleListProjection;
import net.civeira.phylax.features.access.role.application.usecase.list.RoleListUsecase;
import net.civeira.phylax.features.access.role.domain.Domains;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.generated.openapi.model.DomainsApiDto;
import net.civeira.phylax.generated.openapi.model.RoleApiDto;
import net.civeira.phylax.generated.openapi.model.RoleApiDtoList;
import net.civeira.phylax.generated.openapi.model.SecurityDomainApiRef;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;

@RequiredArgsConstructor
public class RoleListController {

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String LIMIT_APPEND = "&limit=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String NAME_APPEND = "&name=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SINCE_APPEND = "&since-uid=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String TENANTS_APPEND = "&tenants=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String TENANT_APPEND = "&tenant=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * Role
   *
   * @autogenerated ListControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ListControllerGenerator
   */
  private final RoleListUsecase list;

  /**
   * @autogenerated ListControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenant
   * @param tenants
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  public Response roleApiList(final List<String> uids, final String search, final String name,
      final String tenant, final List<String> tenants, final Integer limit, final String sinceUid,
      final String sinceName, final String order) {
    List<RoleListOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    RoleListFilter.RoleListFilterBuilder filterBuilder = RoleListFilter.builder();
    RoleListCursor.RoleListCursorBuilder cursorBuilder = RoleListCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    if (null != tenant) {
      filterBuilder = filterBuilder.tenant(TenantReference.of(tenant));
    }
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    cursorBuilder = cursorBuilder.sinceName(sinceName);
    cursorBuilder = cursorBuilder.order(orderSteps);
    RoleListFilter filter = filterBuilder.build();
    RoleListCursor cursor = cursorBuilder.build();
    List<RoleListProjection> listed = list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "role-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param label
   * @return
   */
  private RoleListOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("name-asc")) {
      return RoleListOrder.NAME_ASC;
    } else if (label.trim().equals("name-desc")) {
      return RoleListOrder.NAME_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param dto
   * @return
   */
  private RoleApiDto toApiModel(RoleListProjection dto) {
    RoleApiDto roleApiDto = new RoleApiDto();
    roleApiDto.setUid(dto.getUid());
    roleApiDto.setName(dto.getName());
    roleApiDto.setTenant(new TenantApiRef().$ref(dto.getTenantReference()));
    roleApiDto.setDomains(dto.getDomains().stream().map(this::toApiModelDomains).toList());
    roleApiDto.setVersion(dto.getVersion());
    return roleApiDto;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param dto
   * @return
   */
  private DomainsApiDto toApiModelDomains(Domains dto) {
    DomainsApiDto domainsApiDto = new DomainsApiDto();
    domainsApiDto.setUid(dto.getUid());
    domainsApiDto.setSecurityDomain(new SecurityDomainApiRef().$ref(dto.getSecurityDomainUid()));
    domainsApiDto.setVersion(dto.getVersion().orElse(null));
    return domainsApiDto;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param roles
   * @param filter
   * @param cursor
   * @return
   */
  private RoleApiDtoList toListApiModel(List<RoleListProjection> roles, RoleListFilter filter,
      RoleListCursor cursor) {
    Optional<RoleListProjection> last =
        roles.isEmpty() ? Optional.empty() : Optional.of(roles.get(roles.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getName().ifPresent(filterName -> {
      String nameValue = URLEncoder.encode(String.valueOf(filterName), StandardCharsets.UTF_8);
      self.append(NAME_APPEND + nameValue);
      next.append(NAME_APPEND + nameValue);
      first.append(NAME_APPEND + nameValue);
    });
    filter.getTenant().ifPresent(filterTenant -> {
      String tenantValue =
          URLEncoder.encode(String.valueOf(filterTenant.getUid()), StandardCharsets.UTF_8);
      self.append(TENANT_APPEND + tenantValue);
      next.append(TENANT_APPEND + tenantValue);
      first.append(TENANT_APPEND + tenantValue);
    });
    if (!filter.getTenants().isEmpty()) {
      String tenantsValue =
          URLEncoder.encode(String.join(",", filter.getTenants()), StandardCharsets.UTF_8);
      self.append(TENANTS_APPEND + tenantsValue);
      next.append(TENANTS_APPEND + tenantsValue);
      first.append(TENANTS_APPEND + tenantsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(SINCE_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceName().ifPresent(sinceName -> self
        .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      next.append(SINCE_APPEND + URLEncoder.encode(lastDto.getUid(), StandardCharsets.UTF_8));;
      cursor.getSinceName().ifPresent(sinceName -> next
          .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    });
    return new RoleApiDtoList().items(roles.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final RoleListOrder order) {
    if (null == order) {
      return null;
    } else if (order == RoleListOrder.NAME_ASC) {
      return "name-asc";
    } else if (order == RoleListOrder.NAME_DESC) {
      return "name-desc";
    } else {
      return null;
    }
  }
}
