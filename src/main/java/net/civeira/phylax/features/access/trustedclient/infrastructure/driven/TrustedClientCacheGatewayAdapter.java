package net.civeira.phylax.features.access.trustedclient.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientCacheGateway;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientCached;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientCursor;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class TrustedClientCacheGatewayAdapter implements TrustedClientCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("trusted-client")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param trustedClient
   */
  @Override
  public void remove(final TrustedClient trustedClient) {
    log.trace("Invalidating trustedClient cache due to the removal of {}", trustedClient);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<TrustedClientCached> retrieve(final TrustedClientFilter filter,
      final TrustedClientCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at trustedClient cache for the key {}", key);
    return cache.<String, TrustedClientCached>get(key, k -> null)
        .map(cached -> Optional.ofNullable(cached)).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param trustedClients
   * @return
   */
  public TrustedClientCached store(final TrustedClientFilter filter,
      final TrustedClientCursor cursor, final List<TrustedClient> trustedClients) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache.<String, TrustedClientCached>get(key, k -> TrustedClientCached.builder()
        .since(OffsetDateTime.now()).value(trustedClients).build()).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param trustedClient
   */
  @Override
  public void update(final TrustedClient trustedClient) {
    log.trace("Invalidating trustedClient cache due to the update of {}", trustedClient);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final TrustedClientFilter filter, final TrustedClientCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
