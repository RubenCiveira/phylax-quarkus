package net.civeira.phylax.features.access.securitydomain.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.securitydomain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainRef;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainWriteRepositoryGateway;
import net.civeira.phylax.features.access.securitydomain.infrastructure.event.SecurityDomainEventDispacher;
import net.civeira.phylax.features.access.securitydomain.infrastructure.repository.SecurityDomainRepository;
import net.civeira.phylax.features.access.securitydomain.query.SecurityDomainCursor;
import net.civeira.phylax.features.access.securitydomain.query.SecurityDomainFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainWriteGatewayAdapter implements SecurityDomainWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final SecurityDomainEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final SecurityDomainRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(SecurityDomainFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public SecurityDomain create(SecurityDomain entity) {
    SecurityDomain result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public SecurityDomain create(SecurityDomain entity, Predicate<SecurityDomain> verifier) {
    SecurityDomain result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(SecurityDomain entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public SecurityDomain enrichForUpdate(SecurityDomainRef reference) {
    return repository.enrichForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<SecurityDomainFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<SecurityDomain> findForUpdate(SecurityDomainFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<SecurityDomain> listForUpdate(SecurityDomainFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<SecurityDomain> retrieveForUpdate(String uid,
      Optional<SecurityDomainFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<SecurityDomain> slideForUpdate(SecurityDomainFilter filter,
      SecurityDomainCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public SecurityDomain update(SecurityDomainRef reference, SecurityDomain entity) {
    SecurityDomain result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
