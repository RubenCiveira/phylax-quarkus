package net.civeira.phylax.features.access.loginprovider.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.loginprovider.domain.event.LoginProviderCreateEvent;
import net.civeira.phylax.features.access.loginprovider.domain.event.LoginProviderDeleteEvent;
import net.civeira.phylax.features.access.loginprovider.domain.event.LoginProviderDisableEvent;
import net.civeira.phylax.features.access.loginprovider.domain.event.LoginProviderEnableEvent;
import net.civeira.phylax.features.access.loginprovider.domain.event.LoginProviderEvent;
import net.civeira.phylax.features.access.loginprovider.domain.event.LoginProviderUpdateEvent;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.CertificateVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.DirectAccessVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.DisabledVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.MetadataVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.PrivateKeyVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.PublicKeyVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.SourceVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.UsersEnabledByDefaultVO;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.VersionVO;

/**
 * Represents a login identity provider (e.g., Google, GitHub, SAML) configured for a tenant.
 * Enables federated authentication integration.
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class LoginProvider implements LoginProviderRef {

  /**
   * Prepare a new login provider with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new login provider
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed login provider.
   */
  public static LoginProvider create(final LoginProviderChangeSet change)
      throws ConstraintException {
    change.setDisabled(false);
    LoginProvider instance = new LoginProvider(change, Optional.empty());
    instance.addEvent(LoginProviderCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * The provider certificate used for signature verification, if required.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private CertificateVO certificateValue = CertificateVO.nullValue();

  /**
   * If true, the system will default to this login method without requiring selection.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private DirectAccessVO directAccessValue = DirectAccessVO.nullValue();

  /**
   * Indicates if this provider is currently disabled.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private DisabledVO disabledValue = DisabledVO.nullValue();

  /**
   * A metadata file required by some providers for configuration (e.g., SAML descriptor).
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private MetadataVO metadataValue = MetadataVO.nullValue();

  /**
   * A name that identifies this login provider within the tenant.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private NameVO nameValue;

  /**
   * Private key used internally to validate codes returned by the identity provider.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private PrivateKeyVO privateKeyValue = PrivateKeyVO.nullValue();

  /**
   * A public key shared with users to interact with the identity provider.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private PublicKeyVO publicKeyValue = PublicKeyVO.nullValue();

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<LoginProviderEvent> recordedEvents = List.of();

  /**
   * The source protocol or system used for authentication (e.g., GOOGLE, GITHUB, SAML).
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private SourceVO sourceValue;

  /**
   * The tenant this login provider is configured for.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private TenantVO tenantValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Defines whether the users created with this provider are enabled by default.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UsersEnabledByDefaultVO usersEnabledByDefaultValue;

  /**
   * Campo con el n√∫mero de version de login provider para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private LoginProvider(final LoginProviderChangeSet attribute,
      final Optional<LoginProvider> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue =
        attribute.getUid().orElse(previous.map(LoginProvider::getUidValue).orElse(null));
    this.tenantValue =
        attribute.getTenant().orElse(previous.map(LoginProvider::getTenantValue).orElse(null));
    this.nameValue =
        attribute.getName().orElse(previous.map(LoginProvider::getNameValue).orElse(null));
    this.sourceValue =
        attribute.getSource().orElse(previous.map(LoginProvider::getSourceValue).orElse(null));
    this.disabledValue = attribute.getDisabled()
        .orElse(previous.map(LoginProvider::getDisabledValue).orElseGet(DisabledVO::nullValue));
    this.directAccessValue = attribute.getDirectAccess().orElse(
        previous.map(LoginProvider::getDirectAccessValue).orElseGet(DirectAccessVO::nullValue));
    this.publicKeyValue = attribute.getPublicKey()
        .orElse(previous.map(LoginProvider::getPublicKeyValue).orElseGet(PublicKeyVO::nullValue));
    this.privateKeyValue = attribute.getPrivateKey()
        .orElse(previous.map(LoginProvider::getPrivateKeyValue).orElseGet(PrivateKeyVO::nullValue));
    this.certificateValue = attribute.getCertificate().orElse(
        previous.map(LoginProvider::getCertificateValue).orElseGet(CertificateVO::nullValue));
    this.metadataValue = attribute.getMetadata()
        .orElse(previous.map(LoginProvider::getMetadataValue).orElseGet(MetadataVO::nullValue));
    this.usersEnabledByDefaultValue = attribute.getUsersEnabledByDefault()
        .orElse(previous.map(LoginProvider::getUsersEnabledByDefaultValue).orElse(null));
    this.versionValue = attribute.getVersion()
        .orElse(previous.map(LoginProvider::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == tenantValue) {
      list.add(new ConstraintFail("REQUIRED", "tenant", null));
    }
    if (null == nameValue) {
      list.add(new ConstraintFail("REQUIRED", "name", null));
    }
    if (null == sourceValue) {
      list.add(new ConstraintFail("REQUIRED", "source", null));
    }
    if (null == usersEnabledByDefaultValue) {
      list.add(new ConstraintFail("REQUIRED", "usersEnabledByDefault", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(LoginProvider::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a login provider
   *
   * @autogenerated EntityGenerator
   * @return A instance of login provider ready to be deleted
   */
  public LoginProvider delete() {
    LoginProvider instance = this;
    instance.addEvent(LoginProviderDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply disable on login provider. Disables the login provider and prevents authentication via
   * this source.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of login provider
   */
  public LoginProvider disable() {
    LoginProviderChangeSet attr = new LoginProviderChangeSet();
    attr.setDisabled(true);
    LoginProvider instance = new LoginProvider(attr, Optional.of(this));
    instance.addEvent(LoginProviderDisableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply enable on login provider. Enables the login provider and allows users to authenticate
   * with it.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of login provider
   */
  public LoginProvider enable() {
    LoginProviderChangeSet attr = new LoginProviderChangeSet();
    attr.setDisabled(false);
    LoginProvider instance = new LoginProvider(attr, Optional.of(this));
    instance.addEvent(LoginProviderEnableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a login provider
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of login provider
   */
  public LoginProvider update(final LoginProviderChangeSet change) throws ConstraintException {
    change.unsetDisabled();
    LoginProvider instance = new LoginProvider(change, Optional.of(this));
    instance.addEvent(LoginProviderUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public LoginProvider withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final LoginProviderEvent event) {
    List<LoginProviderEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
