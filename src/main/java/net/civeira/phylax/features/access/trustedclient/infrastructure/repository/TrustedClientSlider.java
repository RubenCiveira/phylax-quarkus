package net.civeira.phylax.features.access.trustedclient.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientCursor;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientFilter;

class TrustedClientSlider extends Slider<TrustedClient> {

  /**
   * @autogenerated SlideGenerator
   */
  private final TrustedClientCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final TrustedClientFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<TrustedClientFilter, TrustedClientCursor, Iterator<TrustedClient>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  TrustedClientSlider(final Iterator<TrustedClient> multi, final int limit,
      final BiFunction<TrustedClientFilter, TrustedClientCursor, Iterator<TrustedClient>> gateway,
      final TrustedClientFilter filter, final TrustedClientCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param trustedClients
   * @param limit
   * @return
   */
  @Override
  public Iterator<TrustedClient> next(List<TrustedClient> trustedClients, int limit) {
    TrustedClient last = trustedClients.get(trustedClients.size() - 1);
    TrustedClientCursor cr = this.cursor.withSinceUid(last.getUid()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
