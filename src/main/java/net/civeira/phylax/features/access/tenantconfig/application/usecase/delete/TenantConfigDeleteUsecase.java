package net.civeira.phylax.features.access.tenantconfig.application.usecase.delete;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenantconfig.application.visibility.TenantConfigVisibilityFilter;
import net.civeira.phylax.features.access.tenantconfig.application.visibility.TenantConfigsVisibility;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfig;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfigRef;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigCacheGateway;
import net.civeira.phylax.features.access.tenantconfig.domain.gateway.TenantConfigWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantConfigDeleteUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final TenantConfigCacheGateway cache;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<TenantConfigDeleteAllowDecision> deleteAllowEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<TenantConfigDeleteCheck> deleteCheckEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final TenantConfigWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final TenantConfigsVisibility visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final TenantConfigRef reference) {
    TenantConfigDeleteAllowDecision base = TenantConfigDeleteAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TenantConfigDeleteAllowDecision base = TenantConfigDeleteAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final TenantConfigCheckBatchDeleteStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   */
  public void delete(final Interaction query, final TenantConfigRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TenantConfig original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    delete(query, original);
    flush();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator delete(final Interaction query, final TenantConfigDeleteFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TenantConfigVisibilityFilter filterOnVisibles =
        TenantConfigVisibilityFilter.builder().uid(filter.getUid().orElse(null))
            .uids(filter.getUids().stream().toList()).search(filter.getSearch().orElse(null))
            .tenant(filter.getTenant().orElse(null)).tenants(filter.getTenants())
            .tenantTenantAccesible(filter.getTenantTenantAccesible().orElse(null)).build();
    TenantConfigDeleteAllInBatchCommand command = TenantConfigDeleteAllInBatchCommand.builder()
        .interaction(query).filter(filterOnVisibles).build();
    return batch.start(query.getActor().getName().orElse("-"), Duration.ofHours(6), ExecutorPlan
        .<TenantConfigDeleteAllInBatchCommand>builder().params(command).name("delete-color")
        .executor(
            ExecutorByDeferSteps.<TenantConfig, TenantConfig, TenantConfigDeleteAllInBatchCommand, TenantConfigsInBatchExecutor.TenantConfigPaginableBatch>builder()
                .initializer(TenantConfigsInBatchExecutor.class)
                .counter(TenantConfigsInBatchExecutor.class)
                .descriptor(TenantConfigsInBatchExecutor.class)
                .reader(TenantConfigsInBatchExecutor.class)
                .processor(TenantConfigsInBatchExecutor.class)
                .writer(TenantConfigsInBatchExecutor.class)
                .finalizer(TenantConfigsInBatchExecutor.class).build())
        .build());
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param interaction
   * @param original
   */
  void delete(final Interaction interaction, final TenantConfig original) {
    TenantConfigDeleteCheck proposal =
        TenantConfigDeleteCheck.builder().reference(original).interaction(interaction).build();
    deleteCheckEmitter.fire(proposal);
    TenantConfig clean = original.delete();
    gateway.delete(clean);
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
