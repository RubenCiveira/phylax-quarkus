package net.civeira.phylax.features.access.tenanttermsofuse.gateway;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.tenanttermsofuse.query.TenantTermsOfUseCursor;
import net.civeira.phylax.features.access.tenanttermsofuse.query.TenantTermsOfUseFilter;

public interface TenantTermsOfUseWriteRepositoryGateway {

  /**
   * The items that would be returned by the query
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long countForUpdate(TenantTermsOfUseFilter filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @param verifier a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  TenantTermsOfUse create(TenantTermsOfUse entity, Predicate<TenantTermsOfUse> verifier);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  TenantTermsOfUse create(TenantTermsOfUse entity);

  /**
   * Delete an existing record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   */
  void delete(TenantTermsOfUse entity);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  TenantTermsOfUse enrichForUpdate(TenantTermsOfUseRef reference);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean existsForUpdate(String uid, Optional<TenantTermsOfUseFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<TenantTermsOfUse> findForUpdate(TenantTermsOfUseFilter filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<TenantTermsOfUse> listForUpdate(TenantTermsOfUseFilter filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<TenantTermsOfUse> retrieveForUpdate(String uid, Optional<TenantTermsOfUseFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<TenantTermsOfUse> slideForUpdate(TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor);

  /**
   * Retrieve one single value
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  TenantTermsOfUse update(TenantTermsOfUseRef reference, TenantTermsOfUse entity);
}
