package net.civeira.phylax.features.access.useracceptedtermnsofuse.infrastructure.repository;

import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;

import javax.sql.DataSource;

import io.opentelemetry.api.trace.Tracer;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.infrastructure.sql.OptimistLockException;
import net.civeira.phylax.common.infrastructure.sql.SqlCommand;
import net.civeira.phylax.common.infrastructure.sql.SqlConverter;
import net.civeira.phylax.common.infrastructure.sql.SqlListParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlOperator;
import net.civeira.phylax.common.infrastructure.sql.SqlParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlResult;
import net.civeira.phylax.common.infrastructure.sql.SqlSchematicQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlTemplate;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.UserAcceptedTermnsOfUse;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.UserAcceptedTermnsOfUseRef;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.gateway.UserAcceptedTermnsOfUseCursor;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.gateway.UserAcceptedTermnsOfUseFilter;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.AcceptDateVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.ConditionsVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.UserVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.VersionVO;

@ApplicationScoped
@RequiredArgsConstructor
@Slf4j
public class UserAcceptedTermnsOfUseRepository {

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCEPT_DATE = "acceptDate";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCEPT_DATE_SNAKE = "accept_date";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_ACCEPTED_TERMNS_OF_USE_ACCEPT_DATE =
      "access_user_accepted_termns_of_use.accept_date";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_ACCEPTED_TERMNS_OF_USE_CONDITIONS =
      "access_user_accepted_termns_of_use.conditions";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_ACCEPTED_TERMNS_OF_USE_CONDITIONS_TENANT =
      "access_user_accepted_termns_of_use_conditions.tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_ACCEPTED_TERMNS_OF_USE_SNAKE =
      "access_user_accepted_termns_of_use";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_ACCEPTED_TERMNS_OF_USE_UID =
      "access_user_accepted_termns_of_use.uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_ACCEPTED_TERMNS_OF_USE_USER =
      "access_user_accepted_termns_of_use.user";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_ACCEPTED_TERMNS_OF_USE_VERSION =
      "access_user_accepted_termns_of_use.version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String CONDITIONS = "conditions";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String UID = "uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String USER = "user";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String VERSION = "version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final DataSource datasource;

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final Tracer tracer;

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public long count(UserAcceptedTermnsOfUseFilter filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<Long> sq = filteredQuery(template, filter);
      sq.select("count(uid) as uid");
      return sq.query(row -> Optional.of(row.getLong(1))).one().orElse(0l);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public UserAcceptedTermnsOfUse create(UserAcceptedTermnsOfUse entity) {
    return runCreate(entity, null);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  public UserAcceptedTermnsOfUse create(UserAcceptedTermnsOfUse entity,
      Predicate<UserAcceptedTermnsOfUse> verifier) {
    return runCreate(entity, verifier);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   */
  public void delete(UserAcceptedTermnsOfUse entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "delete from \"access_user_accepted_termns_of_use\" where \"uid\" = :uid");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No delete from");
      }
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean exists(String uid, Optional<UserAcceptedTermnsOfUseFilter> filter) {
    return retrieve(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean existsForUpdate(String uid, Optional<UserAcceptedTermnsOfUseFilter> filter) {
    return retrieveForUpdate(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<UserAcceptedTermnsOfUse> find(UserAcceptedTermnsOfUseFilter filter) {
    UserAcceptedTermnsOfUseCursor cursor = UserAcceptedTermnsOfUseCursor.builder().build();
    return new UserAcceptedTermnsOfUseSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<UserAcceptedTermnsOfUse> find(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<UserAcceptedTermnsOfUse> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<UserAcceptedTermnsOfUse> findForUpdate(UserAcceptedTermnsOfUseFilter filter) {
    UserAcceptedTermnsOfUseCursor cursor = UserAcceptedTermnsOfUseCursor.builder().build();
    return new UserAcceptedTermnsOfUseSlider(runListForUpdate(filter, cursor),
        cursor.getLimit().orElse(0), this::runList, filter, cursor).one();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<UserAcceptedTermnsOfUse> findForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<UserAcceptedTermnsOfUse> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<UserAcceptedTermnsOfUse> list(UserAcceptedTermnsOfUseFilter filter) {
    UserAcceptedTermnsOfUseCursor cursor = UserAcceptedTermnsOfUseCursor.builder().build();
    return new UserAcceptedTermnsOfUseSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<UserAcceptedTermnsOfUse> list(final String sql,
      final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<UserAcceptedTermnsOfUse> list(final String sql,
      final Map<String, SqlParameterValue> params, final int limit) {
    return list(sql, params, Integer.valueOf(limit), false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<UserAcceptedTermnsOfUse> listForUpdate(UserAcceptedTermnsOfUseFilter filter) {
    UserAcceptedTermnsOfUseCursor cursor = UserAcceptedTermnsOfUseCursor.builder().build();
    return new UserAcceptedTermnsOfUseSlider(runListForUpdate(filter, cursor),
        cursor.getLimit().orElse(0), this::runList, filter, cursor).all();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<UserAcceptedTermnsOfUse> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<UserAcceptedTermnsOfUse> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params, final int limit) {
    return list(sql, params, Integer.valueOf(limit), true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public UserAcceptedTermnsOfUse resolve(UserAcceptedTermnsOfUseRef reference) {
    return reference instanceof UserAcceptedTermnsOfUse userAcceptedTermnsOfUse
        ? userAcceptedTermnsOfUse
        : retrieve(reference.getUid(), Optional.empty()).orElseThrow(() -> new NotFoundException(
            "Trying to resolve inexistent UserAcceptedTermnsOfUse: " + reference.getUid()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public UserAcceptedTermnsOfUse resolveForUpdate(UserAcceptedTermnsOfUseRef reference) {
    return reference instanceof UserAcceptedTermnsOfUse userAcceptedTermnsOfUse
        ? userAcceptedTermnsOfUse
        : retrieveForUpdate(reference.getUid(), Optional.empty())
            .orElseThrow(() -> new NotFoundException(
                "Trying to resolve inexistent UserAcceptedTermnsOfUse: " + reference.getUid()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<UserAcceptedTermnsOfUse> retrieve(String uid,
      Optional<UserAcceptedTermnsOfUseFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      UserAcceptedTermnsOfUseFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> UserAcceptedTermnsOfUseFilter.builder().uid(uid).build());
      SqlSchematicQuery<UserAcceptedTermnsOfUse> sq = filteredQuery(template, readyFilter);
      return sq.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<UserAcceptedTermnsOfUse> retrieveForUpdate(String uid,
      Optional<UserAcceptedTermnsOfUseFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      UserAcceptedTermnsOfUseFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> UserAcceptedTermnsOfUseFilter.builder().uid(uid).build());
      SqlSchematicQuery<UserAcceptedTermnsOfUse> sq = filteredQuery(template, readyFilter);
      return sq.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<UserAcceptedTermnsOfUse> slide(UserAcceptedTermnsOfUseFilter filter,
      UserAcceptedTermnsOfUseCursor cursor) {
    return new UserAcceptedTermnsOfUseSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<UserAcceptedTermnsOfUse> slideForUpdate(UserAcceptedTermnsOfUseFilter filter,
      UserAcceptedTermnsOfUseCursor cursor) {
    return new UserAcceptedTermnsOfUseSlider(runListForUpdate(filter, cursor),
        cursor.getLimit().orElse(0), this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public UserAcceptedTermnsOfUse update(UserAcceptedTermnsOfUse entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "update \"access_user_accepted_termns_of_use\" set  \"user\" = :user, \"conditions\" = :conditions, \"accept_date\" = :acceptDate, \"version\" = \"version\" + 1 where \"uid\" = :uid and \"version\" = :version");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      sq.with(USER, SqlParameterValue.of(entity.getUserUid()));
      sq.with(CONDITIONS, SqlParameterValue.of(entity.getConditionsUid()));
      sq.with(ACCEPT_DATE, entity.getAcceptDate().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullOffsetDateTime));
      sq.with(VERSION, entity.getVersion().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new OptimistLockException("No delete from");
      }
      return entity.withNextVersion();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @return
   */
  private SqlConverter<UserAcceptedTermnsOfUse> converter() {
    return row -> {
      try {
        return Optional.of(UserAcceptedTermnsOfUse.builder()
            .uidValue(UidVO.from(row.getString(UID)))
            .userValue(UserVO.fromReference(row.getString(USER)))
            .conditionsValue(ConditionsVO.fromReference(row.getString(CONDITIONS)))
            .acceptDateValue(AcceptDateVO.from(null == row.getTimestamp(ACCEPT_DATE_SNAKE) ? null
                : OffsetDateTime.ofInstant(
                    Instant.ofEpochMilli(row.getTimestamp(ACCEPT_DATE_SNAKE).getTime()),
                    ZoneId.systemDefault())))
            .versionValue(VersionVO.from(row.getInt(VERSION))).build());
      } catch (ConstraintException ce) {
        log.error("Unable to map data for {}", row.getString(1), ce);
        return Optional.empty();
      }
    };
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param template
   * @param filter
   * @return
   */
  private <T> SqlSchematicQuery<T> filteredQuery(SqlTemplate template,
      UserAcceptedTermnsOfUseFilter filter) {
    SqlSchematicQuery<T> sq =
        template.createSqlSchematicQuery(ACCESS_USER_ACCEPTED_TERMNS_OF_USE_SNAKE);
    sq.selectFields(ACCESS_USER_ACCEPTED_TERMNS_OF_USE_UID, ACCESS_USER_ACCEPTED_TERMNS_OF_USE_USER,
        ACCESS_USER_ACCEPTED_TERMNS_OF_USE_CONDITIONS,
        ACCESS_USER_ACCEPTED_TERMNS_OF_USE_ACCEPT_DATE, ACCESS_USER_ACCEPTED_TERMNS_OF_USE_VERSION);
    filter.getUid().ifPresent(uid -> sq.where(UID, SqlOperator.EQ, SqlParameterValue.of(uid)));
    if (!filter.getUids().isEmpty()) {
      sq.where(UID, SqlOperator.IN, SqlListParameterValue.strings(filter.getUids()));
    }
    filter.getSearch().ifPresent(
        search -> sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%")));
    filter.getUser()
        .ifPresent(user -> sq.where(USER, SqlOperator.EQ, SqlParameterValue.of(user.getUid())));
    if (!filter.getUsers().isEmpty()) {
      sq.where(USER, SqlOperator.IN, SqlListParameterValue.strings(filter.getUsers()));
    }
    filter.getConditions().ifPresent(conditions -> sq.where(CONDITIONS, SqlOperator.EQ,
        SqlParameterValue.of(conditions.getUid())));
    if (!filter.getConditionss().isEmpty()) {
      sq.where(CONDITIONS, SqlOperator.IN, SqlListParameterValue.strings(filter.getConditionss()));
    }
    filter.getConditionsTenantTenantAccesible().ifPresent(conditionsTenantTenantAccesible -> {
      sq.join("access_tenant_terms_of_use", "access_user_accepted_termns_of_use_conditions",
          "access_user_accepted_termns_of_use.tenant-terms-of-use",
          "access_user_accepted_termns_of_use_conditions.uid");
      sq.where(ACCESS_USER_ACCEPTED_TERMNS_OF_USE_CONDITIONS_TENANT, SqlOperator.EQ,
          SqlParameterValue.of(conditionsTenantTenantAccesible));
    });
    return sq;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @param forUpdate
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  private List<UserAcceptedTermnsOfUse> list(final String sql,
      final Map<String, SqlParameterValue> params, final Integer limit, final boolean forUpdate) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<UserAcceptedTermnsOfUse> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      if (forUpdate) {
        createSqlQuery = createSqlQuery.forUpdate();
      }
      SqlResult<UserAcceptedTermnsOfUse> query = createSqlQuery.query(converter());
      return null == limit ? query.all() : query.limit(limit);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  private UserAcceptedTermnsOfUse runCreate(UserAcceptedTermnsOfUse entity,
      Predicate<UserAcceptedTermnsOfUse> verifier) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "insert into \"access_user_accepted_termns_of_use\" ( \"uid\", \"user\", \"conditions\", \"accept_date\", \"version\") values ( :uid, :user, :conditions, :acceptDate, :version)");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      sq.with(USER, SqlParameterValue.of(entity.getUserUid()));
      sq.with(CONDITIONS, SqlParameterValue.of(entity.getConditionsUid()));
      sq.with(ACCEPT_DATE, entity.getAcceptDate().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullOffsetDateTime));
      sq.with(VERSION, entity.getVersion().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No insert into");
      }
      return verifier == null ? entity : verified(verifier.test(entity), entity, template);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<UserAcceptedTermnsOfUse> runList(UserAcceptedTermnsOfUseFilter filter,
      UserAcceptedTermnsOfUseCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<UserAcceptedTermnsOfUse> sq = filteredQuery(template, filter);
      cursor.getSinceUid()
          .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      sq.orderAsc("uid");
      return sq.query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<UserAcceptedTermnsOfUse> runListForUpdate(UserAcceptedTermnsOfUseFilter filter,
      UserAcceptedTermnsOfUseCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<UserAcceptedTermnsOfUse> sq = filteredQuery(template, filter);
      cursor.getSinceUid()
          .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      sq.orderAsc("uid");
      return sq.forUpdate().query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param exists
   * @param entity
   * @param template
   * @return
   */
  private UserAcceptedTermnsOfUse verified(boolean exists, UserAcceptedTermnsOfUse entity,
      SqlTemplate template) {
    if (exists) {
      return entity;
    } else {
      template
          .createSqlCommand(
              "delete from \"access_user_accepted_termns_of_use\" where \"uid\" = :uid")
          .with("uid", SqlParameterValue.of(entity.getUid())).execute();
      throw new NotFoundException("");
    }
  }
}
