package net.civeira.phylax.features.access.loginprovider.infrastructure.driver.rest;

import org.apache.commons.lang3.StringUtils;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.loginprovider.application.usecase.update.LoginProviderUpdateInput;
import net.civeira.phylax.features.access.loginprovider.application.usecase.update.LoginProviderUpdateProjection;
import net.civeira.phylax.features.access.loginprovider.application.usecase.update.LoginProviderUpdateUsecase;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderReference;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderSourceOptions;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.generated.openapi.model.LoginProviderApiDto;
import net.civeira.phylax.generated.openapi.model.LoginProviderApiDto.SourceEnum;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;

@RequiredArgsConstructor
public class LoginProviderUpdateController {

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final LoginProviderUpdateUsecase update;

  /**
   * @autogenerated UpdateControllerGenerator
   * @param uid
   * @param loginProvider
   * @return
   */
  @Transactional
  public Response loginProviderApiUpdate(final String uid,
      final LoginProviderApiDto loginProvider) {
    LoginProviderUpdateProjection updated = update.update(currentRequest.interaction(),
        LoginProviderReference.of(uid), toDomainModel(loginProvider));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param domainEnum
   * @return
   */
  private SourceEnum sourceEnumToApi(LoginProviderSourceOptions domainEnum) {
    SourceEnum result;
    if (domainEnum == LoginProviderSourceOptions.GOOGLE) {
      result = SourceEnum.GOOGLE;
    } else if (domainEnum == LoginProviderSourceOptions.GITHUB) {
      result = SourceEnum.GITHUB;
    } else if (domainEnum == LoginProviderSourceOptions.SAML) {
      result = SourceEnum.SAML;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param apiEnum
   * @return
   */
  private LoginProviderSourceOptions sourceEnumToDomain(SourceEnum apiEnum) {
    LoginProviderSourceOptions result;
    if (apiEnum == SourceEnum.GOOGLE) {
      result = LoginProviderSourceOptions.GOOGLE;
    } else if (apiEnum == SourceEnum.GITHUB) {
      result = LoginProviderSourceOptions.GITHUB;
    } else if (apiEnum == SourceEnum.SAML) {
      result = LoginProviderSourceOptions.SAML;
    } else if (null == apiEnum) {
      result = null;
    } else {
      throw new IllegalArgumentException();
    }
    return result;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param dto
   * @return
   */
  private LoginProviderApiDto toApiModel(LoginProviderUpdateProjection dto) {
    LoginProviderApiDto loginProviderApiDto = new LoginProviderApiDto();
    loginProviderApiDto.setUid(dto.getUid());
    loginProviderApiDto.setTenant(new TenantApiRef().$ref(dto.getTenantReference()));
    loginProviderApiDto.setName(dto.getName());
    loginProviderApiDto.setSource(sourceEnumToApi(dto.getSource()));
    loginProviderApiDto.setDisabled(dto.getDisabled());
    loginProviderApiDto.setDirectAccess(dto.getDirectAccess());
    loginProviderApiDto.setPublicKey(dto.getPublicKey());
    loginProviderApiDto.setPrivateKey(dto.getPrivateKey());
    loginProviderApiDto.setCertificate(dto.getCertificate());
    String metadata = dto.getMetadata();
    if (null != metadata) {
      loginProviderApiDto.setMetadata(currentRequest.getPublicHost()
          + "/api/access/login-providers/" + dto.getUidOrDefault("-") + "/metadata");
    }
    loginProviderApiDto.setUsersEnabledByDefault(dto.getUsersEnabledByDefault());
    loginProviderApiDto.setVersion(dto.getVersion());
    return loginProviderApiDto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param loginProviderApiDto
   * @return
   */
  private LoginProviderUpdateInput toDomainModel(LoginProviderApiDto loginProviderApiDto) {
    LoginProviderUpdateInput dto = new LoginProviderUpdateInput();
    if (null != loginProviderApiDto.getUid()) {
      dto.setUid(loginProviderApiDto.getUid());
    }
    if (null != loginProviderApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(loginProviderApiDto.getTenant().get$Ref()));
    }
    if (null != loginProviderApiDto.getName()) {
      dto.setName(loginProviderApiDto.getName());
    }
    if (null != loginProviderApiDto.getSource()) {
      dto.setSource(sourceEnumToDomain(loginProviderApiDto.getSource()));
    }
    if (null != loginProviderApiDto.getDisabled()) {
      dto.setDisabled(loginProviderApiDto.getDisabled());
    }
    if (null != loginProviderApiDto.getDirectAccess()) {
      dto.setDirectAccess(loginProviderApiDto.getDirectAccess());
    }
    if (null != loginProviderApiDto.getPublicKey()) {
      dto.setPublicKey(loginProviderApiDto.getPublicKey());
    }
    if (null != loginProviderApiDto.getPrivateKey()) {
      dto.setPrivateKey(loginProviderApiDto.getPrivateKey());
    }
    if (null != loginProviderApiDto.getCertificate()) {
      dto.setCertificate(loginProviderApiDto.getCertificate());
    }
    if (!StringUtils.isBlank(loginProviderApiDto.getMetadata())) {
      String url = loginProviderApiDto.getMetadata();
      if (loginProviderApiDto.getMetadata().startsWith(
          currentRequest.getPublicHost() + "/api/access/login-providers/-/temp-metadata?temp=")) {
        dto.setMetadata("temp://" + (url.substring(
            (currentRequest.getPublicHost() + "/api/access/login-providers/-/temp-metadata?temp=")
                .length())));
      } else if (!(url.equals(currentRequest.getPublicHost() + "/api/access/login-providers/"
          + loginProviderApiDto.getUid() + "/metadata"))) {
        dto.setMetadata(loginProviderApiDto.getMetadata());
      }
    }
    if (null != loginProviderApiDto.getUsersEnabledByDefault()) {
      dto.setUsersEnabledByDefault(loginProviderApiDto.getUsersEnabledByDefault());
    }
    if (null != loginProviderApiDto.getVersion()) {
      dto.setVersion(loginProviderApiDto.getVersion());
    }
    return dto;
  }
}
