package net.civeira.phylax.features.access.scopeassignation.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.list.ScopeAssignationListCursor;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.list.ScopeAssignationListFilter;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.list.ScopeAssignationListProjection;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.list.ScopeAssignationListUsecase;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeReference;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationApiDto;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationApiDtoList;
import net.civeira.phylax.generated.openapi.model.SecurityDomainApiRef;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiRef;

@RequiredArgsConstructor
@RequestScoped
public class ScopeAssignationListController {

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String LIMIT_APPEND = "&limit=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SECURITY_DOMAINS_APPEND = "&security-domains=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SECURITY_DOMAIN_APPEND = "&security-domain=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SECURITY_SCOPES_APPEND = "&security-scopes=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SECURITY_SCOPE_APPEND = "&security-scope=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SINCE_APPEND = "&since-uid=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * ScopeAssignation
   *
   * @autogenerated ListControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ListControllerGenerator
   */
  private final ScopeAssignationListUsecase list;

  /**
   * @autogenerated ListControllerGenerator
   * @param uids
   * @param search
   * @param securityDomain
   * @param securityDomains
   * @param securityScope
   * @param securityScopes
   * @param limit
   * @param sinceUid
   * @return
   */
  public Response scopeAssignationApiList(final List<String> uids, final String search,
      final String securityDomain, final List<String> securityDomains, final String securityScope,
      final List<String> securityScopes, final Integer limit, final String sinceUid) {
    ScopeAssignationListFilter.ScopeAssignationListFilterBuilder filterBuilder =
        ScopeAssignationListFilter.builder();
    ScopeAssignationListCursor.ScopeAssignationListCursorBuilder cursorBuilder =
        ScopeAssignationListCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    if (null != securityDomain) {
      filterBuilder = filterBuilder.securityDomain(SecurityDomainReference.of(securityDomain));
    }
    filterBuilder = filterBuilder.securityDomains(
        securityDomains.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    if (null != securityScope) {
      filterBuilder = filterBuilder.securityScope(SecurityScopeReference.of(securityScope));
    }
    filterBuilder = filterBuilder.securityScopes(
        securityScopes.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    ScopeAssignationListFilter filter = filterBuilder.build();
    ScopeAssignationListCursor cursor = cursorBuilder.build();
    List<ScopeAssignationListProjection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "scope-assignation-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param dto
   * @return
   */
  private ScopeAssignationApiDto toApiModel(ScopeAssignationListProjection dto) {
    ScopeAssignationApiDto scopeAssignationApiDto = new ScopeAssignationApiDto();
    scopeAssignationApiDto.setUid(dto.getUid());
    scopeAssignationApiDto
        .setSecurityDomain(new SecurityDomainApiRef().$ref(dto.getSecurityDomainReference()));
    scopeAssignationApiDto
        .setSecurityScope(new SecurityScopeApiRef().$ref(dto.getSecurityScopeReference()));
    scopeAssignationApiDto.setVersion(dto.getVersion());
    return scopeAssignationApiDto;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param scopeAssignations
   * @param filter
   * @param cursor
   * @return
   */
  private ScopeAssignationApiDtoList toListApiModel(
      List<ScopeAssignationListProjection> scopeAssignations, ScopeAssignationListFilter filter,
      ScopeAssignationListCursor cursor) {
    Optional<ScopeAssignationListProjection> last = scopeAssignations.isEmpty() ? Optional.empty()
        : Optional.of(scopeAssignations.get(scopeAssignations.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getSecurityDomain().ifPresent(filterSecurityDomain -> {
      String securityDomainValue =
          URLEncoder.encode(String.valueOf(filterSecurityDomain.getUid()), StandardCharsets.UTF_8);
      self.append(SECURITY_DOMAIN_APPEND + securityDomainValue);
      next.append(SECURITY_DOMAIN_APPEND + securityDomainValue);
      first.append(SECURITY_DOMAIN_APPEND + securityDomainValue);
    });
    if (!filter.getSecurityDomains().isEmpty()) {
      String securityDomainsValue =
          URLEncoder.encode(String.join(",", filter.getSecurityDomains()), StandardCharsets.UTF_8);
      self.append(SECURITY_DOMAINS_APPEND + securityDomainsValue);
      next.append(SECURITY_DOMAINS_APPEND + securityDomainsValue);
      first.append(SECURITY_DOMAINS_APPEND + securityDomainsValue);
    }
    filter.getSecurityScope().ifPresent(filterSecurityScope -> {
      String securityScopeValue =
          URLEncoder.encode(String.valueOf(filterSecurityScope.getUid()), StandardCharsets.UTF_8);
      self.append(SECURITY_SCOPE_APPEND + securityScopeValue);
      next.append(SECURITY_SCOPE_APPEND + securityScopeValue);
      first.append(SECURITY_SCOPE_APPEND + securityScopeValue);
    });
    if (!filter.getSecurityScopes().isEmpty()) {
      String securityScopesValue =
          URLEncoder.encode(String.join(",", filter.getSecurityScopes()), StandardCharsets.UTF_8);
      self.append(SECURITY_SCOPES_APPEND + securityScopesValue);
      next.append(SECURITY_SCOPES_APPEND + securityScopesValue);
      first.append(SECURITY_SCOPES_APPEND + securityScopesValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(SINCE_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> {
      next.append(SINCE_APPEND + URLEncoder.encode(lastDto.getUid(), StandardCharsets.UTF_8));
    });
    return new ScopeAssignationApiDtoList()
        .items(scopeAssignations.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }
}
