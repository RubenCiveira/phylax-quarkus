package net.civeira.phylax.features.access.tenant;

import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.tenant.command.TenantWriteAttributes;
import net.civeira.phylax.features.access.tenant.transition.create.TenantCreatePipeline;
import net.civeira.phylax.features.access.tenant.transition.delete.TenantDeletePipeline;
import net.civeira.phylax.features.access.tenant.transition.disable.TenantDisablePipeline;
import net.civeira.phylax.features.access.tenant.transition.enable.TenantEnablePipeline;
import net.civeira.phylax.features.access.tenant.transition.update.TenantUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TenantCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TenantDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TenantDisablePipeline disablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TenantEnablePipeline enablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<TenantMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final TenantUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public Tenant create(final TenantWriteAttributes attributes) {
    return Tenant.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Tenant delete(final Tenant entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public Tenant disable(final Tenant base) {
    return base.disable(disablePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public Tenant enable(final Tenant base) {
    return base.enable(enablePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public Tenant update(final Tenant base, final TenantWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
