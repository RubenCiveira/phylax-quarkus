/* @autogenerated */
package net.civeira.phylax.features.access.oauth.infrastructure.bootstrap;

import java.util.List;

import lombok.Getter;
import net.civeira.phylax.features.access.relyingparty.transition.RelyingPartyChangeProposal;
import net.civeira.phylax.features.access.role.Domains;
import net.civeira.phylax.features.access.role.transition.RoleChangeProposal;
import net.civeira.phylax.features.access.securitydomain.transition.SecurityDomainChangeProposal;
import net.civeira.phylax.features.access.trustedclient.transition.TrustedClientChangeProposal;
import net.civeira.phylax.features.access.user.transition.UserChangeProposal;
import net.civeira.phylax.features.access.useridentity.Roles;
import net.civeira.phylax.features.access.useridentity.transition.UserIdentityChangeProposal;

@Getter
public class InitialConfigBean {
  private final List<RelyingPartyChangeProposal> parties;
  private final List<TrustedClientChangeProposal> clients;
  private final List<UserChangeProposal> users;
  private final List<SecurityDomainChangeProposal> domains;
  private final List<RoleChangeProposal> roles;
  private final List<UserIdentityChangeProposal> identities;

  public InitialConfigBean(String password) {
    RelyingPartyChangeProposal party = RelyingPartyChangeProposal.builder().newUid()
        .code("phylax-api").apiKey("1111").enabled(Boolean.TRUE).build();

    TrustedClientChangeProposal client =
        TrustedClientChangeProposal.builder().newUid().code("phylax-ui").allowedRedirects("*")
            .publicAllow(Boolean.TRUE).enabled(Boolean.TRUE).build();

    SecurityDomainChangeProposal domain =
        SecurityDomainChangeProposal.builder().newUid().name("ADMIN").readAll(true).writeAll(true)
            .manageAll(true).enabled(true).level(100).build();

    Domains roleDomain = Domains.builder().newUid().securityDomain(domain.asReference()).build();
    RoleChangeProposal role =
        RoleChangeProposal.builder().newUid().name("ADMIN").domains(List.of(roleDomain)).build();

    UserChangeProposal root = UserChangeProposal.builder().newUid().name("ROOT").password(password)
        .enabled(true).useSecondFactors(false).build();

    Roles userRoleRely = Roles.builder().newUid().role(role.asReference()).build();
    UserIdentityChangeProposal userRelyIdentity =
        UserIdentityChangeProposal.builder().newUid().user(root.asReference())
            .relyingParty(party.asReference()).roles(List.of(userRoleRely)).build();

    Roles userRoleClient = Roles.builder().newUid().role(role.asReference()).build();
    UserIdentityChangeProposal userClientIdentity =
        UserIdentityChangeProposal.builder().newUid().user(root.asReference())
            .trustedClient(client.asReference()).roles(List.of(userRoleClient)).build();

    parties = List.of(party);
    clients = List.of(client);
    domains = List.of(domain);
    users = List.of(root);
    roles = List.of(role);
    identities = List.of(userRelyIdentity, userClientIdentity);
  }
}
