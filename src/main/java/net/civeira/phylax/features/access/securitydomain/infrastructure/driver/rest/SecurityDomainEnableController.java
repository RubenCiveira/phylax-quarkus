package net.civeira.phylax.features.access.securitydomain.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.securitydomain.application.usecase.enable.SecurityDomainEnableFilter;
import net.civeira.phylax.features.access.securitydomain.application.usecase.enable.SecurityDomainEnableProjection;
import net.civeira.phylax.features.access.securitydomain.application.usecase.enable.SecurityDomainEnableStatus;
import net.civeira.phylax.features.access.securitydomain.application.usecase.enable.SecurityDomainEnableUsecase;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;
import net.civeira.phylax.generated.openapi.model.SecurityDomainApiDto;

@RequiredArgsConstructor
@RequestScoped
public class SecurityDomainEnableController {

  /**
   * @autogenerated ActionControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ActionControllerGenerator
   */
  private final SecurityDomainEnableUsecase enable;

  /**
   * @autogenerated ActionControllerGenerator
   * @param uids
   * @param search
   * @param enabled
   * @param name
   * @return
   */
  public Response securityDomainApiBatchEnable(final List<String> uids, final String search,
      final Boolean enabled, final String name) {
    SecurityDomainEnableFilter.SecurityDomainEnableFilterBuilder filterBuilder =
        SecurityDomainEnableFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.enabled(enabled);
    filterBuilder = filterBuilder.name(name);
    SecurityDomainEnableFilter filter = filterBuilder.build();
    BatchIdentificator task = enable.enable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param batchId
   * @return
   */
  public Response securityDomainApiBatchEnableQuery(final String batchId) {
    BatchProgress task = enable.checkProgress(
        SecurityDomainEnableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response securityDomainApiEnable(final String uid) {
    SecurityDomainEnableProjection updated =
        enable.enable(currentRequest.interaction(), SecurityDomainReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param dto
   * @return
   */
  private SecurityDomainApiDto toApiModel(SecurityDomainEnableProjection dto) {
    SecurityDomainApiDto securityDomainApiDto = new SecurityDomainApiDto();
    securityDomainApiDto.setUid(dto.getUid());
    securityDomainApiDto.setName(dto.getName());
    securityDomainApiDto.setLevel(dto.getLevel());
    securityDomainApiDto.setReadAll(dto.getReadAll());
    securityDomainApiDto.setWriteAll(dto.getWriteAll());
    securityDomainApiDto.setManageAll(dto.getManageAll());
    securityDomainApiDto.setEnabled(dto.getEnabled());
    securityDomainApiDto.setVersion(dto.getVersion());
    return securityDomainApiDto;
  }
}
