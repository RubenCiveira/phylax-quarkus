package net.civeira.phylax.features.access.scopeassignation.application.usecase.delete;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationFacade;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationRef;
import net.civeira.phylax.features.access.scopeassignation.application.service.visibility.ScopeAssignationsVisibility;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationCacheGateway;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationWriteRepositoryGateway;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class ScopeAssignationDeleteUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final ScopeAssignationCacheGateway cache;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<ScopeAssignationAllowDeleteProposal> deleteAllowEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<ScopeAssignationDeleteProposal> deleteProposalEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<ScopeAssignationDeleteEvent> deletedEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final ScopeAssignationFacade facade;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final ScopeAssignationWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final ScopeAssignationsVisibility visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final ScopeAssignationRef reference) {
    ScopeAssignationAllowDeleteProposal base = ScopeAssignationAllowDeleteProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    ScopeAssignationAllowDeleteProposal base = ScopeAssignationAllowDeleteProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final ScopeAssignationCheckBatchDeleteStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   */
  public void delete(final Interaction query, final ScopeAssignationRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    ScopeAssignation original = visibility.retrieveVisibleForUpdate(query, reference.getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    delete(query, original);
    flush();
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator delete(final Interaction query, final ScopeAssignationFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    ScopeAssignationDeleteAllInBatchCommand command =
        ScopeAssignationDeleteAllInBatchCommand.builder().interaction(query).filter(filter).build();
    return batch.start(query.getActor().getName().orElse("-"), Duration.ofHours(6), ExecutorPlan
        .<ScopeAssignationDeleteAllInBatchCommand>builder().params(command).name("delete-color")
        .executor(
            ExecutorByDeferSteps.<ScopeAssignation, ScopeAssignation, ScopeAssignationDeleteAllInBatchCommand, ScopeAssignationsInBatchExecutor.ScopeAssignationPaginableBatch>builder()
                .initializer(ScopeAssignationsInBatchExecutor.class)
                .counter(ScopeAssignationsInBatchExecutor.class)
                .descriptor(ScopeAssignationsInBatchExecutor.class)
                .reader(ScopeAssignationsInBatchExecutor.class)
                .processor(ScopeAssignationsInBatchExecutor.class)
                .writer(ScopeAssignationsInBatchExecutor.class)
                .finalizer(ScopeAssignationsInBatchExecutor.class).build())
        .build());
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param interaction
   * @param original
   */
  void delete(final Interaction interaction, final ScopeAssignation original) {
    ScopeAssignation clean = facade.delete(original);
    ScopeAssignationDeleteProposal proposal =
        ScopeAssignationDeleteProposal.builder().entity(clean).interaction(interaction).build();
    deleteProposalEmitter.fire(proposal);
    ScopeAssignation result = proposal.getEntity();
    gateway.delete(result);
    ScopeAssignationDeleteEvent event =
        ScopeAssignationDeleteEvent.builder().payload(result).interaction(interaction).build();
    deletedEmitter.fire(event);
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
