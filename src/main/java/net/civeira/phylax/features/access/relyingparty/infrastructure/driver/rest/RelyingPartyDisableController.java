package net.civeira.phylax.features.access.relyingparty.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.application.usecase.disable.RelyingPartyDisableFilter;
import net.civeira.phylax.features.access.relyingparty.application.usecase.disable.RelyingPartyDisableProjection;
import net.civeira.phylax.features.access.relyingparty.application.usecase.disable.RelyingPartyDisableStatus;
import net.civeira.phylax.features.access.relyingparty.application.usecase.disable.RelyingPartyDisableUsecase;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiDto;

@RequiredArgsConstructor
@RequestScoped
public class RelyingPartyDisableController {

  /**
   * @autogenerated ActionControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ActionControllerGenerator
   */
  private final RelyingPartyDisableUsecase disable;

  /**
   * @autogenerated ActionControllerGenerator
   * @param uids
   * @param search
   * @param apiKey
   * @param code
   * @return
   */
  public Response relyingPartyApiBatchDisable(final List<String> uids, final String search,
      final String apiKey, final String code) {
    RelyingPartyDisableFilter.RelyingPartyDisableFilterBuilder filterBuilder =
        RelyingPartyDisableFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.apiKey(apiKey);
    filterBuilder = filterBuilder.code(code);
    RelyingPartyDisableFilter filter = filterBuilder.build();
    BatchIdentificator task = disable.disable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param batchId
   * @return
   */
  public Response relyingPartyApiBatchDisableQuery(final String batchId) {
    BatchProgress task = disable.checkProgress(
        RelyingPartyDisableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response relyingPartyApiDisable(final String uid) {
    RelyingPartyDisableProjection updated =
        disable.disable(currentRequest.interaction(), RelyingPartyReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param dto
   * @return
   */
  private RelyingPartyApiDto toApiModel(RelyingPartyDisableProjection dto) {
    RelyingPartyApiDto relyingPartyApiDto = new RelyingPartyApiDto();
    relyingPartyApiDto.setUid(dto.getUid());
    relyingPartyApiDto.setCode(dto.getCode());
    relyingPartyApiDto.setApiKey(dto.getApiKey());
    relyingPartyApiDto.setEnabled(dto.getEnabled());
    relyingPartyApiDto.setVersion(dto.getVersion());
    return relyingPartyApiDto;
  }
}
