package net.civeira.phylax.features.access.user.application.usecase.list;

import java.util.List;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.metadata.TimestampedList;
import net.civeira.phylax.common.algorithms.metadata.WrapMetadata;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.user.application.visibility.UserVisibilityFilter;
import net.civeira.phylax.features.access.user.application.visibility.UsersVisibility;
import net.civeira.phylax.features.access.user.domain.gateway.UserCached;
import net.civeira.phylax.features.access.user.domain.gateway.UserCursor;
import net.civeira.phylax.features.access.user.domain.gateway.UserOrder;

@ApplicationScoped
@RequiredArgsConstructor
public class UserListUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<UserListAllowDecision> listAllowEmitter;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final UsersVisibility visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    UserListAllowDecision proposal = UserListAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    listAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param filter
   * @param cursor
   * @return The slide with some values
   */
  public List<UserListProjection> list(final Interaction query, final UserListFilter filter,
      final UserListCursor cursor) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    UserVisibilityFilter visibleFilter = UserVisibilityFilter.builder()
        .uid(filter.getUid().orElse(null)).uids(filter.getUids().stream().toList())
        .search(filter.getSearch().orElse(null)).root(filter.getRoot().orElse(null))
        .nameOrEmail(filter.getNameOrEmail().orElse(null)).name(filter.getName().orElse(null))
        .tenant(filter.getTenant().orElse(null)).tenants(filter.getTenants())
        .tenantTenantAccesible(filter.getTenantTenantAccesible().orElse(null)).build();
    UserCursor gatewayCursor = UserCursor.builder()
        .order(cursor.getOrder().stream().map(Object::toString).map(UserOrder::valueOf).toList())
        .sinceName(cursor.getSinceName().orElse(null)).sinceName(cursor.getSinceName().orElse(null))
        .build();
    UserCached values = visibility.listCachedVisibles(query, visibleFilter, gatewayCursor);
    List<UserListProjection> list =
        values.getValue().stream().map(value -> visibility.copyWithHidden(query, value))
            .map(UserListProjection::from).toList();
    return new TimestampedList<>(WrapMetadata.<List<UserListProjection>>builder().data(list)
        .since(values.getSince().toInstant()).build());
  }
}
