package net.civeira.phylax.features.access.relyingparty.application.usecase.list;

import java.util.List;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.metadata.TimestampedList;
import net.civeira.phylax.common.algorithms.metadata.WrapMetadata;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.relyingparty.application.visibility.RelyingPartyVisibilityFilter;
import net.civeira.phylax.features.access.relyingparty.application.visibility.RelyingPartysVisibility;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyCached;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyCursor;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyOrder;

@ApplicationScoped
@RequiredArgsConstructor
public class RelyingPartyListUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<RelyingPartyListAllowDecision> listAllowEmitter;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final RelyingPartysVisibility visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    RelyingPartyListAllowDecision proposal = RelyingPartyListAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    listAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param filter
   * @param cursor
   * @return The slide with some values
   */
  public List<RelyingPartyListProjection> list(final Interaction query,
      final RelyingPartyListFilter filter, final RelyingPartyListCursor cursor) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    RelyingPartyVisibilityFilter visibleFilter =
        RelyingPartyVisibilityFilter.builder().uid(filter.getUid().orElse(null))
            .uids(filter.getUids().stream().toList()).search(filter.getSearch().orElse(null))
            .apiKey(filter.getApiKey().orElse(null)).code(filter.getCode().orElse(null)).build();
    RelyingPartyCursor gatewayCursor = RelyingPartyCursor.builder()
        .order(cursor.getOrder().stream().map(Object::toString).map(RelyingPartyOrder::valueOf)
            .toList())
        .sinceCode(cursor.getSinceCode().orElse(null)).sinceCode(cursor.getSinceCode().orElse(null))
        .build();
    RelyingPartyCached values = visibility.listCachedVisibles(query, visibleFilter, gatewayCursor);
    List<RelyingPartyListProjection> list =
        values.getValue().stream().map(value -> visibility.copyWithHidden(query, value))
            .map(RelyingPartyListProjection::from).toList();
    return new TimestampedList<>(WrapMetadata.<List<RelyingPartyListProjection>>builder().data(list)
        .since(values.getSince().toInstant()).build());
  }
}
