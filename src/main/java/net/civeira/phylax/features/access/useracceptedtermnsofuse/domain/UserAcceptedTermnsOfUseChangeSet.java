package net.civeira.phylax.features.access.useracceptedtermnsofuse.domain;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.user.domain.UserRef;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.AcceptDateVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.ConditionsVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.UserVO;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold user accepted termns of use attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserAcceptedTermnsOfUseChangeSet {

  /**
   * @autogenerated EntityChangeSetGenerator
   */
  public static class UserAcceptedTermnsOfUseChangeSetBuilder {

    /**
     * Append AcceptDate crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param acceptDate The AcceptDate value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder acceptDate(final OffsetDateTime acceptDate) {
      return acceptDate(Optional.of(AcceptDateVO.from(acceptDate)));
    }

    /**
     * Append AcceptDate value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param acceptDate The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder acceptDate(
        final Optional<AcceptDateVO> acceptDate) {
      this.acceptDate$value = acceptDate;
      this.acceptDate$set = true;
      return this;
    }

    /**
     * Append Conditions crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param conditions The Conditions value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder conditions(
        final TenantTermsOfUseRef conditions) {
      return conditions(Optional.of(ConditionsVO.from(conditions)));
    }

    /**
     * Append Conditions value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param conditions The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder conditions(
        final Optional<ConditionsVO> conditions) {
      this.conditions$value = conditions;
      this.conditions$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeSetGenerator
     * @return
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * Append Uid crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param uid The Uid value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * Append Uid value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param uid The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * Append User crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param user The User value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder user(final UserRef user) {
      return user(Optional.of(UserVO.from(user)));
    }

    /**
     * Append User value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param user The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder user(final Optional<UserVO> user) {
      this.user$value = user;
      this.user$set = true;
      return this;
    }

    /**
     * Append Version crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param version The Version value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * Append Version value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param version The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAcceptedTermnsOfUseChangeSetBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * El accept date de user accepted termns of use
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<AcceptDateVO> acceptDate = Optional.empty();

  /**
   * El conditions de user accepted termns of use
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<ConditionsVO> conditions = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * El user de user accepted termns of use
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<UserVO> user = Optional.empty();

  /**
   * Campo con el n√∫mero de version de user accepted termns of use para controlar bloqueos
   * optimistas
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Inform for a possible change propolsal in AcceptDate
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for AcceptDate, otherwise the value for AcceptDate
   */
  public Optional<AcceptDateVO> getAcceptDate() {
    return acceptDate;
  }

  /**
   * Inform for a possible change propolsal in Conditions
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for Conditions, otherwise the value for Conditions
   */
  public Optional<ConditionsVO> getConditions() {
    return conditions;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in User
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for User, otherwise the value for User
   */
  public Optional<UserVO> getUser() {
    return user;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for AcceptDate to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAcceptedTermnsOfUseChangeSet
   * @return self instance to enable a flow code
   */
  public UserAcceptedTermnsOfUseChangeSet setAcceptDate(final OffsetDateTime value) {
    this.acceptDate = Optional.of(AcceptDateVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Conditions to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAcceptedTermnsOfUseChangeSet
   * @return self instance to enable a flow code
   */
  public UserAcceptedTermnsOfUseChangeSet setConditions(final TenantTermsOfUseRef value) {
    this.conditions = Optional.of(ConditionsVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAcceptedTermnsOfUseChangeSet
   * @return self instance to enable a flow code
   */
  public UserAcceptedTermnsOfUseChangeSet setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for User to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAcceptedTermnsOfUseChangeSet
   * @return self instance to enable a flow code
   */
  public UserAcceptedTermnsOfUseChangeSet setUser(final UserRef value) {
    this.user = Optional.of(UserVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAcceptedTermnsOfUseChangeSet
   * @return self instance to enable a flow code
   */
  public UserAcceptedTermnsOfUseChangeSet setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated EntityChangeSetGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("user".equals(field)) {
      this.unsetUser();
    }
    if ("conditions".equals(field)) {
      this.unsetConditions();
    }
    if ("acceptDate".equals(field)) {
      this.unsetAcceptDate();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for AcceptDate
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAcceptedTermnsOfUseChangeSet unsetAcceptDate() {
    this.acceptDate = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Conditions
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAcceptedTermnsOfUseChangeSet unsetConditions() {
    this.conditions = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAcceptedTermnsOfUseChangeSet unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for User
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAcceptedTermnsOfUseChangeSet unsetUser() {
    this.user = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAcceptedTermnsOfUseChangeSet unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
