package net.civeira.phylax.features.access.useraccesstemporalcode;

import java.time.OffsetDateTime;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.useraccesstemporalcode.command.UserAccessTemporalCodeWriteAttributes;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAccessTemporalCodeFacade {

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode create(final UserAccessTemporalCodeWriteAttributes attributes) {
    return UserAccessTemporalCode.create(attributes);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode delete(final UserAccessTemporalCode entity) {
    return entity.delete();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param tempSecondFactorSeed
   * @param tempSecondFactorSeedExpiration
   * @return The entity
   */
  public UserAccessTemporalCode generateMfaTemporalCode(final UserAccessTemporalCode base,
      final String tempSecondFactorSeed, final OffsetDateTime tempSecondFactorSeedExpiration) {
    return base.generateMfaTemporalCode(tempSecondFactorSeed, tempSecondFactorSeedExpiration);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param recoveryCode
   * @param recoveryCodeExpiration
   * @return The entity
   */
  public UserAccessTemporalCode generatePasswordRecover(final UserAccessTemporalCode base,
      final String recoveryCode, final OffsetDateTime recoveryCodeExpiration) {
    return base.generatePasswordRecover(recoveryCode, recoveryCodeExpiration);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode markLoginBlock(final UserAccessTemporalCode base) {
    return base.markLoginBlock();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode markLoginFail(final UserAccessTemporalCode base) {
    return base.markLoginFail();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode markLoginOk(final UserAccessTemporalCode base) {
    return base.markLoginOk();
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    return UserAccessTemporalCode.readonlyFields();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode resetMfaTemporalCode(final UserAccessTemporalCode base) {
    return base.resetMfaTemporalCode();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode resetPasswordRecover(final UserAccessTemporalCode base) {
    return base.resetPasswordRecover();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode update(final UserAccessTemporalCode base,
      final UserAccessTemporalCodeWriteAttributes attributes) {
    return base.update(attributes);
  }
}
