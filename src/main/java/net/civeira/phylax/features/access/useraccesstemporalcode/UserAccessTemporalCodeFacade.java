package net.civeira.phylax.features.access.useraccesstemporalcode;

import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.useraccesstemporalcode.command.UserAccessTemporalCodeWriteAttributes;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.create.UserAccessTemporalCodeCreatePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.delete.UserAccessTemporalCodeDeletePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.generatemfatemporalcode.UserAccessTemporalCodeGenerateMfaTemporalCodePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.generatepasswordrecover.UserAccessTemporalCodeGeneratePasswordRecoverPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.markloginblock.UserAccessTemporalCodeMarkLoginBlockPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.markloginfail.UserAccessTemporalCodeMarkLoginFailPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.markloginok.UserAccessTemporalCodeMarkLoginOkPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.resetmfatemporalcode.UserAccessTemporalCodeResetMfaTemporalCodePipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.resetpasswordrecover.UserAccessTemporalCodeResetPasswordRecoverPipeline;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.update.UserAccessTemporalCodeUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAccessTemporalCodeFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeGenerateMfaTemporalCodePipeline generateMfaTemporalCodePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeGeneratePasswordRecoverPipeline generatePasswordRecoverPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeMarkLoginBlockPipeline markLoginBlockPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeMarkLoginFailPipeline markLoginFailPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeMarkLoginOkPipeline markLoginOkPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<UserAccessTemporalCodeMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeResetMfaTemporalCodePipeline resetMfaTemporalCodePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeResetPasswordRecoverPipeline resetPasswordRecoverPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final UserAccessTemporalCodeUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode create(final UserAccessTemporalCodeWriteAttributes attributes) {
    return UserAccessTemporalCode.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode delete(final UserAccessTemporalCode entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param tempSecondFactorSeed
   * @param tempSecondFactorSeedExpiration
   * @return The entity
   */
  public UserAccessTemporalCode generateMfaTemporalCode(final UserAccessTemporalCode base,
      final String tempSecondFactorSeed, final OffsetDateTime tempSecondFactorSeedExpiration) {
    return base.generateMfaTemporalCode(tempSecondFactorSeed, tempSecondFactorSeedExpiration,
        generateMfaTemporalCodePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param recoveryCode
   * @param recoveryCodeExpiration
   * @return The entity
   */
  public UserAccessTemporalCode generatePasswordRecover(final UserAccessTemporalCode base,
      final String recoveryCode, final OffsetDateTime recoveryCodeExpiration) {
    return base.generatePasswordRecover(recoveryCode, recoveryCodeExpiration,
        generatePasswordRecoverPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode markLoginBlock(final UserAccessTemporalCode base) {
    return base.markLoginBlock(markLoginBlockPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode markLoginFail(final UserAccessTemporalCode base) {
    return base.markLoginFail(markLoginFailPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode markLoginOk(final UserAccessTemporalCode base) {
    return base.markLoginOk(markLoginOkPipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode resetMfaTemporalCode(final UserAccessTemporalCode base) {
    return base.resetMfaTemporalCode(resetMfaTemporalCodePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode resetPasswordRecover(final UserAccessTemporalCode base) {
    return base.resetPasswordRecover(resetPasswordRecoverPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public UserAccessTemporalCode update(final UserAccessTemporalCode base,
      final UserAccessTemporalCodeWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
