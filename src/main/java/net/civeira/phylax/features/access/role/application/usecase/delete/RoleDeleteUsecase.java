package net.civeira.phylax.features.access.role.application.usecase.delete;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.role.Role;
import net.civeira.phylax.features.access.role.RoleFacade;
import net.civeira.phylax.features.access.role.RoleRef;
import net.civeira.phylax.features.access.role.application.service.visibility.RolesVisibility;
import net.civeira.phylax.features.access.role.gateway.RoleCacheGateway;
import net.civeira.phylax.features.access.role.gateway.RoleWriteRepositoryGateway;
import net.civeira.phylax.features.access.role.query.RoleFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class RoleDeleteUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final RoleCacheGateway cache;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<RoleAllowDeleteProposal> deleteAllowEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<RoleDeleteProposal> deleteProposalEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<RoleDeleteEvent> deletedEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final RoleFacade facade;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final RoleWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final RolesVisibility visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final RoleRef reference) {
    RoleAllowDeleteProposal base = RoleAllowDeleteProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    RoleAllowDeleteProposal base = RoleAllowDeleteProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final RoleCheckBatchDeleteStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   */
  public void delete(final Interaction query, final RoleRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    Role original = visibility.retrieveVisibleForUpdate(query, reference.getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    delete(query, original);
    flush();
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator delete(final Interaction query, final RoleFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    RoleDeleteAllInBatchCommand command =
        RoleDeleteAllInBatchCommand.builder().interaction(query).filter(filter).build();
    return batch.start(query.getActor().getName().orElse("-"), Duration.ofHours(6), ExecutorPlan
        .<RoleDeleteAllInBatchCommand>builder().params(command).name("delete-color")
        .executor(
            ExecutorByDeferSteps.<Role, Role, RoleDeleteAllInBatchCommand, RolesInBatchExecutor.RolePaginableBatch>builder()
                .initializer(RolesInBatchExecutor.class).counter(RolesInBatchExecutor.class)
                .descriptor(RolesInBatchExecutor.class).reader(RolesInBatchExecutor.class)
                .processor(RolesInBatchExecutor.class).writer(RolesInBatchExecutor.class)
                .finalizer(RolesInBatchExecutor.class).build())
        .build());
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param interaction
   * @param original
   */
  void delete(final Interaction interaction, final Role original) {
    Role clean = facade.delete(original);
    RoleDeleteProposal proposal =
        RoleDeleteProposal.builder().entity(clean).interaction(interaction).build();
    deleteProposalEmitter.fire(proposal);
    Role result = proposal.getEntity();
    gateway.delete(result);
    RoleDeleteEvent event =
        RoleDeleteEvent.builder().payload(result).interaction(interaction).build();
    deletedEmitter.fire(event);
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
