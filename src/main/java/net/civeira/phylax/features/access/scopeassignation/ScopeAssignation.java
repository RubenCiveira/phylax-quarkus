package net.civeira.phylax.features.access.scopeassignation;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.scopeassignation.command.ScopeAssignationWriteAttributes;
import net.civeira.phylax.features.access.scopeassignation.event.ScopeAssignationCreateEvent;
import net.civeira.phylax.features.access.scopeassignation.event.ScopeAssignationDeleteEvent;
import net.civeira.phylax.features.access.scopeassignation.event.ScopeAssignationEvent;
import net.civeira.phylax.features.access.scopeassignation.event.ScopeAssignationUpdateEvent;
import net.civeira.phylax.features.access.scopeassignation.transition.create.ScopeAssignationCreatePipeline;
import net.civeira.phylax.features.access.scopeassignation.transition.delete.ScopeAssignationDeletePipeline;
import net.civeira.phylax.features.access.scopeassignation.transition.update.ScopeAssignationUpdatePipeline;
import net.civeira.phylax.features.access.scopeassignation.valueobject.SecurityDomainVO;
import net.civeira.phylax.features.access.scopeassignation.valueobject.SecurityScopeVO;
import net.civeira.phylax.features.access.scopeassignation.valueobject.UidVO;
import net.civeira.phylax.features.access.scopeassignation.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainRef;
import net.civeira.phylax.features.access.securityscope.SecurityScopeRef;

@AllArgsConstructor
@Getter
@ToString
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class ScopeAssignation implements ScopeAssignationRef {

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @param pipeline
   * @return
   */
  public static ScopeAssignation create(final ScopeAssignationWriteAttributes attributes,
      final ScopeAssignationCreatePipeline pipeline) {
    return pipeline.create(attributes, attr -> {
      ScopeAssignation instance = new ScopeAssignation(attr, Optional.empty());
      instance.addEvent(ScopeAssignationCreateEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private List<ScopeAssignationEvent> recordedEvents = List.of();

  /**
   * El security domain de scope assignation
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private SecurityDomainVO securityDomain;

  /**
   * El security scope de scope assignation
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private SecurityScopeVO securityScope;

  /**
   * El uid de scope assignation
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UidVO uid;

  /**
   * Campo con el n√∫mero de version de scope assignation para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VersionVO version = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private ScopeAssignation(final ScopeAssignationWriteAttributes attribute,
      final Optional<ScopeAssignation> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uid = attribute.getUid().orElse(previous.map(ScopeAssignation::getUid).orElse(null));
    this.securityDomain = attribute.getSecurityDomain()
        .orElse(previous.map(ScopeAssignation::getSecurityDomain).orElse(null));
    this.securityScope = attribute.getSecurityScope()
        .orElse(previous.map(ScopeAssignation::getSecurityScope).orElse(null));
    this.version = attribute.getVersion()
        .orElse(previous.map(ScopeAssignation::getVersion).orElseGet(VersionVO::nullValue));
    if (null == uid) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == securityDomain) {
      list.add(new ConstraintFail("REQUIRED", "securityDomain", null));
    }
    if (null == securityScope) {
      list.add(new ConstraintFail("REQUIRED", "securityScope", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(ScopeAssignation::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * @autogenerated EntityGenerator
   * @param pipeline
   * @return
   */
  public ScopeAssignation delete(final ScopeAssignationDeletePipeline pipeline) {
    return pipeline.delete(this, () -> {
      ScopeAssignation instance = this;
      instance.addEvent(ScopeAssignationDeleteEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getSecurityDomainReferenceValue() {
    return getSecurityDomain().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityDomainRef getSecurityDomainValue() {
    return getSecurityDomain().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getSecurityScopeReferenceValue() {
    return getSecurityScope().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityScopeRef getSecurityScopeValue() {
    return getSecurityScope().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  @Override
  public String getUidValue() {
    return this.uid.getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public ScopeAssignation nextVersion() {
    return ScopeAssignation.builder().uid(this.uid).securityDomain(this.securityDomain)
        .securityScope(this.securityScope).version(VersionVO.from(this.version() + 1)).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @param pipeline
   * @return
   */
  public ScopeAssignation update(final ScopeAssignationWriteAttributes attributes,
      final ScopeAssignationUpdatePipeline pipeline) {
    return pipeline.update(attributes, this, attr -> {
      ScopeAssignation instance = new ScopeAssignation(attr, Optional.of(this));
      instance.addEvent(ScopeAssignationUpdateEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer version() {
    return this.getVersion().getValue().orElse(0);
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final ScopeAssignationEvent event) {
    List<ScopeAssignationEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
