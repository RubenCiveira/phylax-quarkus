package net.civeira.phylax.features.access.scopeassignation.gateway;

import java.util.List;
import java.util.Optional;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationRef;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationCursor;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationFilter;

public interface ScopeAssignationReadRepositoryGateway {

  /**
   * The items that would be returned by the query
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long count(ScopeAssignationFilter filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  ScopeAssignation enrich(ScopeAssignationRef reference);

  /**
   * Retrieve one single value
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean exists(String uid, Optional<ScopeAssignationFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<ScopeAssignation> find(ScopeAssignationFilter filter);

  /**
   * The slide with some values
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<ScopeAssignation> list(ScopeAssignationFilter filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<ScopeAssignation> retrieve(String uid, Optional<ScopeAssignationFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<ScopeAssignation> slide(ScopeAssignationFilter filter, ScopeAssignationCursor cursor);
}
