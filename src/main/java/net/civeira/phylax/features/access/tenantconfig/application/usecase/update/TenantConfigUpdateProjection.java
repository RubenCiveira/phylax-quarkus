package net.civeira.phylax.features.access.tenantconfig.application.usecase.update;

import java.util.Optional;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenantconfig.application.visibility.TenantConfigVisibleProjection;
import net.civeira.phylax.features.access.tenantconfig.domain.TenantConfig;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.ForceMfaVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.InnerLabelVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenantconfig.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold tenant config attribute values
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class TenantConfigUpdateProjection {

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated UpdateProjectionGenerator
   * @param visible The entity who provide values.
   * @return
   */
  public static TenantConfigUpdateProjection from(final TenantConfigVisibleProjection visible) {
    TenantConfigUpdateProjection instance = new TenantConfigUpdateProjection();
    instance.uidValue = visible.getUid();
    instance.tenantValue = visible.getTenant();
    instance.innerLabelValue = visible.getInnerLabel();
    instance.forceMfaValue = visible.getForceMfa();
    instance.versionValue = visible.getVersion();
    return instance;
  }

  /**
   * Indicates if Multi-Factor Authentication (MFA) is enforced for the tenant.
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<ForceMfaVO> forceMfaValue;

  /**
   * A customizable label that tenants can use to personalize the application UI.
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<InnerLabelVO> innerLabelValue;

  /**
   * The tenant this configuration applies to.
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<TenantVO> tenantValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<UidVO> uidValue;

  /**
   * Campo con el n√∫mero de version de tenant config para controlar bloqueos optimistas
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<VersionVO> versionValue;

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated UpdateProjectionGenerator
   * @param entity The entity who provide values.
   */
  public TenantConfigUpdateProjection(final TenantConfig entity) {
    uidValue = Optional.of(entity.getUidValue());
    tenantValue = Optional.of(entity.getTenantValue());
    innerLabelValue = Optional.of(entity.getInnerLabelValue());
    forceMfaValue = Optional.of(entity.getForceMfaValue());
    versionValue = Optional.of(entity.getVersionValue());
  }

  /**
   * Inform for a possible change propolsal in ForceMfa
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for ForceMfa, otherwise the value for ForceMfa
   */
  public Boolean getForceMfa() {
    return getForceMfaOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in ForceMfa
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for ForceMfa, otherwise the value for ForceMfa
   */
  public Boolean getForceMfaOrDefault(final Boolean orDefault) {
    return forceMfaValue.map(ForceMfaVO::isForceMfa).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in InnerLabel
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for InnerLabel, otherwise the value for InnerLabel
   */
  public String getInnerLabel() {
    return getInnerLabelOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in InnerLabel
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for InnerLabel, otherwise the value for InnerLabel
   */
  public String getInnerLabelOrDefault(final String orDefault) {
    return innerLabelValue.flatMap(InnerLabelVO::getInnerLabel).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public TenantRef getTenant() {
    return tenantValue.map(TenantVO::getTenant).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public String getTenantReference() {
    return getTenantReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public String getTenantReferenceOrDefault(final String orDefault) {
    return tenantValue.map(TenantVO::getTenant).map(TenantRef::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUid() {
    return getUidOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUidOrDefault(final String orDefault) {
    return uidValue.map(UidVO::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersion() {
    return getVersionOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersionOrDefault(final Integer orDefault) {
    return versionValue.flatMap(VersionVO::getVersion).orElse(orDefault);
  }
}
