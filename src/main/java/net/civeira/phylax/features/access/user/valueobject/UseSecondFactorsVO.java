package net.civeira.phylax.features.access.user.valueobject;

import java.util.Optional;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing if is true, the user has a otp to force mfa on login of user.
 * <p>
 * This class ensures that the use second factors is a {@code String} and encapsulates its
 * validation and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design)
 * principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class UseSecondFactorsVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param useSecondFactors
   * @return An empty instance
   */
  public static UseSecondFactorsVO from(final Boolean useSecondFactors) {
    return tryFrom(useSecondFactors);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static UseSecondFactorsVO nullValue() {
    return new UseSecondFactorsVO(null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param useSecondFactors
   * @return An empty instance
   */
  public static UseSecondFactorsVO tryFrom(final Object useSecondFactors) {
    ConstraintFailList list = new ConstraintFailList();
    UseSecondFactorsVO result = tryFrom(useSecondFactors, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param useSecondFactors temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> UseSecondFactorsVO tryFrom(
      final Object useSecondFactors, final T fails) {
    if (null == useSecondFactors) {
      return new UseSecondFactorsVO(null);
    } else if (useSecondFactors instanceof Boolean castedUseSecondFactors) {
      return new UseSecondFactorsVO(castedUseSecondFactors);
    } else {
      fails.add(new ConstraintFail("wrong-type", "useSecondFactors", useSecondFactors.getClass(),
          "A Boolean type is expected for useSecondFactors"));
      return null;
    }
  }

  /**
   * The actual value of the name.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final Boolean value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<Boolean> getValue() {
    return Optional.ofNullable(value);
  }

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
