package net.civeira.phylax.features.access.scopeassignation.infrastructure.bootstrap;

import java.util.List;

import io.quarkus.runtime.StartupEvent;
import jakarta.annotation.Priority;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Rbac;
import net.civeira.phylax.common.security.scope.FieldDescription;
import net.civeira.phylax.common.security.scope.Kind;
import net.civeira.phylax.common.security.scope.ResourceDescription;
import net.civeira.phylax.common.security.scope.ScopeDescription;

@ApplicationScoped
@RequiredArgsConstructor
public class ScopeAssignationRbacRegister {

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private static final ResourceDescription RESOURCE =
      ResourceDescription.builder().name("scope-assignation")
          .description("Witch scopes are assigned to the security domain").build();

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private final Rbac rbac;

  /**
   * @autogenerated RegisterGeneratorGenerator
   * @param ev
   */
  void registerResource(@Observes @Priority(10) final StartupEvent ev) {
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.READ).name("list")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve").description("list").build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("create")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("update")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("delete")
        .description("list").required(List.of()).build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("uid").description("El uid de scope assignation").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("securityDomain")
        .description("El security domain de scope assignation").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("securityScope")
        .description("El security scope de scope assignation").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("version").description(
        "Campo con el n√∫mero de version de scope assignation para controlar bloqueos optimistas")
        .build());
  }
}
