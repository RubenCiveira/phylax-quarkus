package net.civeira.phylax.features.access.securitydomain.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainCursor;
import net.civeira.phylax.features.access.securitydomain.domain.gateway.SecurityDomainFilter;

class SecurityDomainSlider extends Slider<SecurityDomain> {

  /**
   * @autogenerated SlideGenerator
   */
  private final SecurityDomainCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final SecurityDomainFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<SecurityDomainFilter, SecurityDomainCursor, Iterator<SecurityDomain>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  SecurityDomainSlider(final Iterator<SecurityDomain> multi, final int limit,
      final BiFunction<SecurityDomainFilter, SecurityDomainCursor, Iterator<SecurityDomain>> gateway,
      final SecurityDomainFilter filter, final SecurityDomainCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param securityDomains
   * @param limit
   * @return
   */
  @Override
  public Iterator<SecurityDomain> next(List<SecurityDomain> securityDomains, int limit) {
    SecurityDomain last = securityDomains.get(securityDomains.size() - 1);
    SecurityDomainCursor cr = this.cursor.withSinceUid(last.getUid()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
