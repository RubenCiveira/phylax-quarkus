package net.civeira.phylax.features.access.user.application.usecase.disable;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.user.application.visibility.UserVisibleProjection;
import net.civeira.phylax.features.access.user.domain.User;
import net.civeira.phylax.features.access.user.domain.valueobject.BlockedUntilVO;
import net.civeira.phylax.features.access.user.domain.valueobject.EmailVO;
import net.civeira.phylax.features.access.user.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.user.domain.valueobject.LanguageVO;
import net.civeira.phylax.features.access.user.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.user.domain.valueobject.PasswordVO;
import net.civeira.phylax.features.access.user.domain.valueobject.ProviderVO;
import net.civeira.phylax.features.access.user.domain.valueobject.SecondFactorSeedVO;
import net.civeira.phylax.features.access.user.domain.valueobject.TemporalPasswordVO;
import net.civeira.phylax.features.access.user.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.user.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.user.domain.valueobject.UseSecondFactorsVO;
import net.civeira.phylax.features.access.user.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold user attribute values
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class UserDisableProjection {

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated ActionProjectionGenerator
   * @param visible The entity who provide values.
   * @return
   */
  public static UserDisableProjection from(final UserVisibleProjection visible) {
    UserDisableProjection instance = new UserDisableProjection();
    instance.uidValue = visible.getUid();
    instance.tenantValue = visible.getTenant();
    instance.nameValue = visible.getName();
    instance.passwordValue = visible.getPassword();
    instance.emailValue = visible.getEmail();
    instance.enabledValue = visible.getEnabled();
    instance.temporalPasswordValue = visible.getTemporalPassword();
    instance.useSecondFactorsValue = visible.getUseSecondFactors();
    instance.secondFactorSeedValue = visible.getSecondFactorSeed();
    instance.blockedUntilValue = visible.getBlockedUntil();
    instance.languageValue = visible.getLanguage();
    instance.providerValue = visible.getProvider();
    instance.versionValue = visible.getVersion();
    return instance;
  }

  /**
   * A bloqued user cant login on the system, until these date. On his login attempst, hue will
   * recive a generic not allowed message.
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<BlockedUntilVO> blockedUntilValue;

  /**
   * An optional email used to send notifications to the user
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<EmailVO> emailValue;

  /**
   * A disabled user cant login on the system. On his login attempts, he will recive a specific warn
   * of his disabled account.
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<EnabledVO> enabledValue;

  /**
   * El language de user
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<LanguageVO> languageValue;

  /**
   * The user name to identify on the login screen
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<NameVO> nameValue;

  /**
   * If the user is not delegated, the phrasse to identify
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<PasswordVO> passwordValue;

  /**
   * Si se identificó con un proveedor, se marca con cual (aunque el provedor cambie luego)
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<ProviderVO> providerValue;

  /**
   * the seed used to the otp login
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<SecondFactorSeedVO> secondFactorSeedValue;

  /**
   * El temporal password de user
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<TemporalPasswordVO> temporalPasswordValue;

  /**
   * Los usuarios que no tienen tenant son roots del sistema
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<TenantVO> tenantValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<UidVO> uidValue;

  /**
   * If is true, the user has a otp to force mfa on login
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<UseSecondFactorsVO> useSecondFactorsValue;

  /**
   * Campo con el número de version de user para controlar bloqueos optimistas
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<VersionVO> versionValue;

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated ActionProjectionGenerator
   * @param entity The entity who provide values.
   */
  public UserDisableProjection(final User entity) {
    uidValue = Optional.of(entity.getUidValue());
    tenantValue = Optional.of(entity.getTenantValue());
    nameValue = Optional.of(entity.getNameValue());
    passwordValue = Optional.of(entity.getPasswordValue());
    emailValue = Optional.of(entity.getEmailValue());
    enabledValue = Optional.of(entity.getEnabledValue());
    temporalPasswordValue = Optional.of(entity.getTemporalPasswordValue());
    useSecondFactorsValue = Optional.of(entity.getUseSecondFactorsValue());
    secondFactorSeedValue = Optional.of(entity.getSecondFactorSeedValue());
    blockedUntilValue = Optional.of(entity.getBlockedUntilValue());
    languageValue = Optional.of(entity.getLanguageValue());
    providerValue = Optional.of(entity.getProviderValue());
    versionValue = Optional.of(entity.getVersionValue());
  }

  /**
   * Inform for a possible change propolsal in BlockedUntil
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for BlockedUntil, otherwise the value for
   *         BlockedUntil
   */
  public OffsetDateTime getBlockedUntil() {
    return getBlockedUntilOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in BlockedUntil
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for BlockedUntil, otherwise the value for
   *         BlockedUntil
   */
  public OffsetDateTime getBlockedUntilOrDefault(final OffsetDateTime orDefault) {
    return blockedUntilValue.flatMap(BlockedUntilVO::getBlockedUntil).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Password
   *
   * @autogenerated ActionProjectionGenerator
   * @param cypher
   * @return empty if there is no change proposal for Password, otherwise the value for Password
   */
  public String getCypheredPassword(final AesCipherService cypher) {
    return getCypheredPasswordOrDefault(cypher, null);
  }

  /**
   * Inform for a possible change propolsal in Password
   *
   * @autogenerated ActionProjectionGenerator
   * @param cypher
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Password, otherwise the value for Password
   */
  public String getCypheredPasswordOrDefault(final AesCipherService cypher,
      final String orDefault) {
    return passwordValue.map(vo -> vo.getCypheredPassword(cypher)).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in SecondFactorSeed
   *
   * @autogenerated ActionProjectionGenerator
   * @param cypher
   * @return empty if there is no change proposal for SecondFactorSeed, otherwise the value for
   *         SecondFactorSeed
   */
  public String getCypheredSecondFactorSeed(final AesCipherService cypher) {
    return getCypheredSecondFactorSeedOrDefault(cypher, null);
  }

  /**
   * Inform for a possible change propolsal in SecondFactorSeed
   *
   * @autogenerated ActionProjectionGenerator
   * @param cypher
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for SecondFactorSeed, otherwise the value for
   *         SecondFactorSeed
   */
  public String getCypheredSecondFactorSeedOrDefault(final AesCipherService cypher,
      final String orDefault) {
    return secondFactorSeedValue.flatMap(vo -> vo.getCypheredSecondFactorSeed(cypher))
        .orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Email
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Email, otherwise the value for Email
   */
  public String getEmail() {
    return getEmailOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Email
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Email, otherwise the value for Email
   */
  public String getEmailOrDefault(final String orDefault) {
    return emailValue.flatMap(EmailVO::getEmail).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Boolean getEnabled() {
    return getEnabledOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Boolean getEnabledOrDefault(final Boolean orDefault) {
    return enabledValue.map(EnabledVO::isEnabled).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Language
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Language, otherwise the value for Language
   */
  public String getLanguage() {
    return getLanguageOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Language
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Language, otherwise the value for Language
   */
  public String getLanguageOrDefault(final String orDefault) {
    return languageValue.flatMap(LanguageVO::getLanguage).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public String getName() {
    return getNameOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public String getNameOrDefault(final String orDefault) {
    return nameValue.map(NameVO::getName).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Password
   *
   * @autogenerated ActionProjectionGenerator
   * @param cypher
   * @return empty if there is no change proposal for Password, otherwise the value for Password
   */
  public String getPlainPassword(final AesCipherService cypher) {
    return getPlainPasswordOrDefault(cypher, null);
  }

  /**
   * Inform for a possible change propolsal in Password
   *
   * @autogenerated ActionProjectionGenerator
   * @param cypher
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Password, otherwise the value for Password
   */
  public String getPlainPasswordOrDefault(final AesCipherService cypher, final String orDefault) {
    return passwordValue.map(vo -> vo.getPlainPassword(cypher)).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in SecondFactorSeed
   *
   * @autogenerated ActionProjectionGenerator
   * @param cypher
   * @return empty if there is no change proposal for SecondFactorSeed, otherwise the value for
   *         SecondFactorSeed
   */
  public String getPlainSecondFactorSeed(final AesCipherService cypher) {
    return getPlainSecondFactorSeedOrDefault(cypher, null);
  }

  /**
   * Inform for a possible change propolsal in SecondFactorSeed
   *
   * @autogenerated ActionProjectionGenerator
   * @param cypher
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for SecondFactorSeed, otherwise the value for
   *         SecondFactorSeed
   */
  public String getPlainSecondFactorSeedOrDefault(final AesCipherService cypher,
      final String orDefault) {
    return secondFactorSeedValue.flatMap(vo -> vo.getPlainSecondFactorSeed(cypher))
        .orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Provider
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Provider, otherwise the value for Provider
   */
  public String getProvider() {
    return getProviderOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Provider
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Provider, otherwise the value for Provider
   */
  public String getProviderOrDefault(final String orDefault) {
    return providerValue.flatMap(ProviderVO::getProvider).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in TemporalPassword
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for TemporalPassword, otherwise the value for
   *         TemporalPassword
   */
  public Boolean getTemporalPassword() {
    return getTemporalPasswordOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in TemporalPassword
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for TemporalPassword, otherwise the value for
   *         TemporalPassword
   */
  public Boolean getTemporalPasswordOrDefault(final Boolean orDefault) {
    return temporalPasswordValue.map(TemporalPasswordVO::isTemporalPassword).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public TenantRef getTenant() {
    return tenantValue.flatMap(TenantVO::getTenant).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public String getTenantReference() {
    return getTenantReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public String getTenantReferenceOrDefault(final String orDefault) {
    return tenantValue.flatMap(TenantVO::getTenant).map(TenantRef::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUid() {
    return getUidOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUidOrDefault(final String orDefault) {
    return uidValue.map(UidVO::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in UseSecondFactors
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for UseSecondFactors, otherwise the value for
   *         UseSecondFactors
   */
  public Boolean getUseSecondFactors() {
    return getUseSecondFactorsOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in UseSecondFactors
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for UseSecondFactors, otherwise the value for
   *         UseSecondFactors
   */
  public Boolean getUseSecondFactorsOrDefault(final Boolean orDefault) {
    return useSecondFactorsValue.map(UseSecondFactorsVO::isUseSecondFactors).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersion() {
    return getVersionOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersionOrDefault(final Integer orDefault) {
    return versionValue.flatMap(VersionVO::getVersion).orElse(orDefault);
  }
}
