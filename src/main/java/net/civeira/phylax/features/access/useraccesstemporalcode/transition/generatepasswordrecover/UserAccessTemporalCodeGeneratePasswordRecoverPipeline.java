package net.civeira.phylax.features.access.useraccesstemporalcode.transition.generatepasswordrecover;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCode;
import net.civeira.phylax.features.access.useraccesstemporalcode.transition.UserAccessTemporalCodeChangeProposal;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAccessTemporalCodeGeneratePasswordRecoverPipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<UserAccessTemporalCodeGeneratePasswordRecoverStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param recoveryCode
   * @param recoveryCodeExpiration
   * @param original
   * @param last
   * @return
   */
  public UserAccessTemporalCode generatePasswordRecover(final String recoveryCode,
      final OffsetDateTime recoveryCodeExpiration, final UserAccessTemporalCode original,
      final Function<UserAccessTemporalCodeChangeProposal, UserAccessTemporalCode> last) {
    Function<UserAccessTemporalCodeGeneratePasswordRecoverTransition, UserAccessTemporalCode> finalHandler =
        t -> {
          if (t.hasErrors()) {
            throw t.asConstraintException();
          }
          return last.apply(t.getData());
        };
    List<UserAccessTemporalCodeGeneratePasswordRecoverStep> reversed =
        new ArrayList<>(steps.stream().toList()).reversed();
    Function<UserAccessTemporalCodeGeneratePasswordRecoverTransition, UserAccessTemporalCode> pipeline =
        reversed.stream().reduce(finalHandler,
            (next, step) -> transition -> step.generatePasswordRecover(transition, next),
            (f1, f2) -> f1);
    return pipeline.apply(UserAccessTemporalCodeGeneratePasswordRecoverTransition.builder()
        .data(new UserAccessTemporalCodeChangeProposal(original)).original(original).build());
  }
}
