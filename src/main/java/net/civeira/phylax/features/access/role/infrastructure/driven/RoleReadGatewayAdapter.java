package net.civeira.phylax.features.access.role.infrastructure.driven;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.role.Domains;
import net.civeira.phylax.features.access.role.Role;
import net.civeira.phylax.features.access.role.RoleRef;
import net.civeira.phylax.features.access.role.gateway.RoleReadRepositoryGateway;
import net.civeira.phylax.features.access.role.infrastructure.repository.RoleRepository;
import net.civeira.phylax.features.access.role.query.RoleCursor;
import net.civeira.phylax.features.access.role.query.RoleFilter;
import net.civeira.phylax.features.access.securitydomain.SecurityDomain;

@ApplicationScoped
@RequiredArgsConstructor
public class RoleReadGatewayAdapter implements RoleReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final RoleRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(RoleFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public Role enrich(RoleRef reference) {
    return repository.enrich(reference);
  }

  /**
   * Retrieve one single value
   *
   * @autogenerated ReadAdaterGatewayGenerator
   * @param childs
   * @return Retrieve one single value
   */
  @Override
  public List<SecurityDomain> enrichDomains(final List<Domains> childs) {
    return repository.enrichDomains(childs);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<RoleFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<Role> find(RoleFilter filter) {
    return repository.find(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<Role> list(RoleFilter filter) {
    return repository.list(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<Role> retrieve(String uid, Optional<RoleFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<Role> slide(RoleFilter filter, RoleCursor cursor) {
    return repository.slide(filter, cursor);
  }
}
