package net.civeira.phylax.features.access.tenantconfig;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenantconfig.command.TenantConfigWriteAttributes;
import net.civeira.phylax.features.access.tenantconfig.event.TenantConfigCreateEvent;
import net.civeira.phylax.features.access.tenantconfig.event.TenantConfigDeleteEvent;
import net.civeira.phylax.features.access.tenantconfig.event.TenantConfigEvent;
import net.civeira.phylax.features.access.tenantconfig.event.TenantConfigUpdateEvent;
import net.civeira.phylax.features.access.tenantconfig.transition.create.TenantConfigCreatePipeline;
import net.civeira.phylax.features.access.tenantconfig.transition.delete.TenantConfigDeletePipeline;
import net.civeira.phylax.features.access.tenantconfig.transition.update.TenantConfigUpdatePipeline;
import net.civeira.phylax.features.access.tenantconfig.valueobject.ForceMfaVO;
import net.civeira.phylax.features.access.tenantconfig.valueobject.InnerLabelVO;
import net.civeira.phylax.features.access.tenantconfig.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenantconfig.valueobject.UidVO;
import net.civeira.phylax.features.access.tenantconfig.valueobject.VersionVO;

@AllArgsConstructor
@Getter
@ToString
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class TenantConfig implements TenantConfigRef {

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @param pipeline
   * @return
   */
  public static TenantConfig create(final TenantConfigWriteAttributes attributes,
      final TenantConfigCreatePipeline pipeline) {
    return pipeline.create(attributes, attr -> {
      TenantConfig instance = new TenantConfig(attr, Optional.empty());
      instance.addEvent(TenantConfigCreateEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * Indicates if Multi-Factor Authentication (MFA) is enforced for the tenant.
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private ForceMfaVO forceMfa;

  /**
   * A customizable label that tenants can use to personalize the application UI.
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private InnerLabelVO innerLabel = InnerLabelVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private List<TenantConfigEvent> recordedEvents = List.of();

  /**
   * The tenant this configuration applies to.
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private TenantVO tenant;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UidVO uid;

  /**
   * Campo con el n√∫mero de version de tenant config para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VersionVO version = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private TenantConfig(final TenantConfigWriteAttributes attribute,
      final Optional<TenantConfig> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uid = attribute.getUid().orElse(previous.map(TenantConfig::getUid).orElse(null));
    this.tenant = attribute.getTenant().orElse(previous.map(TenantConfig::getTenant).orElse(null));
    this.innerLabel = attribute.getInnerLabel()
        .orElse(previous.map(TenantConfig::getInnerLabel).orElseGet(InnerLabelVO::nullValue));
    this.forceMfa =
        attribute.getForceMfa().orElse(previous.map(TenantConfig::getForceMfa).orElse(null));
    this.version = attribute.getVersion()
        .orElse(previous.map(TenantConfig::getVersion).orElseGet(VersionVO::nullValue));
    if (null == uid) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == tenant) {
      list.add(new ConstraintFail("REQUIRED", "tenant", null));
    }
    if (null == forceMfa) {
      list.add(new ConstraintFail("REQUIRED", "forceMfa", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(TenantConfig::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * @autogenerated EntityGenerator
   * @param pipeline
   * @return
   */
  public TenantConfig delete(final TenantConfigDeletePipeline pipeline) {
    return pipeline.delete(this, () -> {
      TenantConfig instance = this;
      instance.addEvent(TenantConfigDeleteEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getInnerLabelValue() {
    return getInnerLabel().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getTenantReferenceValue() {
    return getTenant().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public TenantRef getTenantValue() {
    return getTenant().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  @Override
  public String getUidValue() {
    return this.uid.getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public boolean isForceMfa() {
    return Boolean.TRUE.equals(getForceMfa().getValue());
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public TenantConfig nextVersion() {
    return TenantConfig.builder().uid(this.uid).tenant(this.tenant).innerLabel(this.innerLabel)
        .forceMfa(this.forceMfa).version(VersionVO.from(this.version() + 1)).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @param pipeline
   * @return
   */
  public TenantConfig update(final TenantConfigWriteAttributes attributes,
      final TenantConfigUpdatePipeline pipeline) {
    return pipeline.update(attributes, this, attr -> {
      TenantConfig instance = new TenantConfig(attr, Optional.of(this));
      instance.addEvent(TenantConfigUpdateEvent.builder().payload(instance).build());
      return instance;
    });
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer version() {
    return this.getVersion().getValue().orElse(0);
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final TenantConfigEvent event) {
    List<TenantConfigEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
