package net.civeira.phylax.features.access.trustedclient.infrastructure.bootstrap;

import java.util.List;

import io.quarkus.runtime.StartupEvent;
import jakarta.annotation.Priority;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Rbac;
import net.civeira.phylax.common.security.scope.FieldDescription;
import net.civeira.phylax.common.security.scope.Kind;
import net.civeira.phylax.common.security.scope.ResourceDescription;
import net.civeira.phylax.common.security.scope.ScopeDescription;

@ApplicationScoped
@RequiredArgsConstructor
public class TrustedClientRbacRegister {

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private static final ResourceDescription RESOURCE = ResourceDescription.builder()
      .name("trusted-client")
      .description(
          "Las diferentes aplicaciones que pueden usar el sistema de acceso. Dado qua la app va en la petición de login, podemos obtener la cuenta asociado a traves del proyecto")
      .build();

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private final Rbac rbac;

  /**
   * @autogenerated RegisterGeneratorGenerator
   * @param ev
   */
  void registerResource(@Observes @Priority(10) final StartupEvent ev) {
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.READ).name("list")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve").description("list").build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("create")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("update")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("delete")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("enable")
        .description("").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE)
        .name("disable").description("").required(List.of()).build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("uid")
        .description("El identificador de la aplicacion").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("code")
        .description("El código identificativo de la aplicación").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("publicAllow")
            .description("If true, users can use these client to access with public code flow")
            .build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("secretOauth")
        .description("If the user is not delegated, the phrasse to identify").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("allowedRedirects")
            .description("Si permitimos login directo de la app, obligamos a indicar un secreto.")
            .build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("enabled")
        .description("Una marca que permite quitar el acceso a una cuenta sin borrarla").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("version").description(
            "Campo con el número de version de trusted client para controlar bloqueos optimistas")
            .build());
  }
}
