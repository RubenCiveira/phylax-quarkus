package net.civeira.phylax.features.access.user.transition.delete;

import lombok.Builder;
import lombok.Data;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFail;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.user.User;

@Builder
@Data
public class UserDeleteTransition {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final ConstraintFailList fails = new ConstraintFailList();

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final User original;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param fail
   */
  public void add(final AbstractFail fail) {
    fails.add(fail);
  }

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param fail
   */
  public void add(final ConstraintFail fail) {
    fails.add(fail);
  }

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @return
   */
  public ConstraintException asConstraintException() {
    return new ConstraintException(fails);
  }

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @return
   */
  public boolean hasErrors() {
    return fails.hasErrors();
  }

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param code
   * @return
   */
  public boolean includeErrorCode(final String code) {
    return fails.includeCode(code);
  }

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param type
   * @return
   */
  public boolean includeErrorViolation(final Class<? extends AbstractFail> type) {
    return fails.includeViolation(type);
  }
}
