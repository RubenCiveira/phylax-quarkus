package net.civeira.phylax.features.access.securitydomain.application.usecase.create;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.securitydomain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainFacade;
import net.civeira.phylax.features.access.securitydomain.application.projection.SecurityDomainStateProyection;
import net.civeira.phylax.features.access.securitydomain.application.request.SecurityDomainStateChange;
import net.civeira.phylax.features.access.securitydomain.application.service.visibility.SecurityDomainsVisibility;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainCacheGateway;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainCreateUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final SecurityDomainCacheGateway cache;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<SecurityDomainAllowCreateProposal> createAllowEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<SecurityDomainCreateProposal> createProposalEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<SecurityDomainCreateEvent> createdEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final SecurityDomainFacade facade;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final SecurityDomainWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final SecurityDomainsVisibility visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    SecurityDomainAllowCreateProposal proposal = SecurityDomainAllowCreateProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    createAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param input
   * @return The slide with some values
   */
  public SecurityDomainStateProyection create(final Interaction query,
      final SecurityDomainStateChange input) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    SecurityDomainStateChange filled = visibility.copyWithFixed(query, input);
    SecurityDomainCreateProposal proposal =
        SecurityDomainCreateProposal.builder().interaction(query).dto(filled).build();
    createProposalEmitter.fire(proposal);
    SecurityDomainStateChange dto = proposal.getDto();
    SecurityDomain entity = facade.create(dto);
    SecurityDomain created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUidValue()));
    cache.update(created);
    SecurityDomainCreateEvent event =
        SecurityDomainCreateEvent.builder().payload(created).interaction(query).build();
    createdEmitter.fire(event);
    return visibility.copyWithHidden(query, event.getPayload());
  }
}
