package net.civeira.phylax.features.access.securityscope.infrastructure.driven;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScope;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeRef;
import net.civeira.phylax.features.access.securityscope.domain.gateway.SecurityScopeCursor;
import net.civeira.phylax.features.access.securityscope.domain.gateway.SecurityScopeFilter;
import net.civeira.phylax.features.access.securityscope.domain.gateway.SecurityScopeReadRepositoryGateway;
import net.civeira.phylax.features.access.securityscope.infrastructure.repository.SecurityScopeRepository;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityScopeReadGatewayAdapter implements SecurityScopeReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final SecurityScopeRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(SecurityScopeFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<SecurityScopeFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<SecurityScope> find(SecurityScopeFilter filter) {
    return repository.find(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<SecurityScope> list(SecurityScopeFilter filter) {
    return repository.list(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public SecurityScope resolve(SecurityScopeRef reference) {
    return repository.resolve(reference);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<SecurityScope> retrieve(String uid, Optional<SecurityScopeFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<SecurityScope> slide(SecurityScopeFilter filter, SecurityScopeCursor cursor) {
    return repository.slide(filter, cursor);
  }
}
