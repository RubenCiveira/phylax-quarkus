package net.civeira.phylax.features.access.user.application.visibility;

import java.time.OffsetDateTime;
import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.user.domain.User;
import net.civeira.phylax.features.access.user.domain.UserReference;
import net.civeira.phylax.features.access.user.domain.valueobject.BlockedUntilVO;
import net.civeira.phylax.features.access.user.domain.valueobject.EmailVO;
import net.civeira.phylax.features.access.user.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.user.domain.valueobject.LanguageVO;
import net.civeira.phylax.features.access.user.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.user.domain.valueobject.PasswordVO;
import net.civeira.phylax.features.access.user.domain.valueobject.ProviderVO;
import net.civeira.phylax.features.access.user.domain.valueobject.SecondFactorSeedVO;
import net.civeira.phylax.features.access.user.domain.valueobject.TemporalPasswordVO;
import net.civeira.phylax.features.access.user.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.user.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.user.domain.valueobject.UseSecondFactorsVO;
import net.civeira.phylax.features.access.user.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold user attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserVisibleProjection {

  /**
   * A bloqued user cant login on the system, until these date. On his login attempst, hue will
   * recive a generic not allowed message.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<BlockedUntilVO> blockedUntil = Optional.empty();

  /**
   * An optional email used to send notifications to the user
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<EmailVO> email = Optional.empty();

  /**
   * A disabled user cant login on the system. On his login attempts, he will recive a specific warn
   * of his disabled account.
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<EnabledVO> enabled = Optional.empty();

  /**
   * El language de user
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<LanguageVO> language = Optional.empty();

  /**
   * The user name to identify on the login screen
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * If the user is not delegated, the phrasse to identify
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<PasswordVO> password = Optional.empty();

  /**
   * Si se identificó con un proveedor, se marca con cual (aunque el provedor cambie luego)
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<ProviderVO> provider = Optional.empty();

  /**
   * the seed used to the otp login
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<SecondFactorSeedVO> secondFactorSeed = Optional.empty();

  /**
   * El temporal password de user
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TemporalPasswordVO> temporalPassword = Optional.empty();

  /**
   * Los usuarios que no tienen tenant son roots del sistema
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * If is true, the user has a otp to force mfa on login
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UseSecondFactorsVO> useSecondFactors = Optional.empty();

  /**
   * Campo con el número de version de user para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public UserVisibleProjection(final User entity) {
    uid = Optional.of(entity.getUidValue());
    tenant = Optional.of(entity.getTenantValue());
    name = Optional.of(entity.getNameValue());
    password = Optional.of(entity.getPasswordValue());
    email = Optional.of(entity.getEmailValue());
    enabled = Optional.of(entity.getEnabledValue());
    temporalPassword = Optional.of(entity.getTemporalPasswordValue());
    useSecondFactors = Optional.of(entity.getUseSecondFactorsValue());
    secondFactorSeed = Optional.of(entity.getSecondFactorSeedValue());
    blockedUntil = Optional.of(entity.getBlockedUntilValue());
    language = Optional.of(entity.getLanguageValue());
    provider = Optional.of(entity.getProviderValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for user with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public UserReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(UserReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in BlockedUntil
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for BlockedUntil, otherwise the value for
   *         BlockedUntil
   */
  public Optional<BlockedUntilVO> getBlockedUntil() {
    return blockedUntil;
  }

  /**
   * Inform for a possible change propolsal in Email
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Email, otherwise the value for Email
   */
  public Optional<EmailVO> getEmail() {
    return email;
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Optional<EnabledVO> getEnabled() {
    return enabled;
  }

  /**
   * Inform for a possible change propolsal in Language
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Language, otherwise the value for Language
   */
  public Optional<LanguageVO> getLanguage() {
    return language;
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * Inform for a possible change propolsal in Password
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Password, otherwise the value for Password
   */
  public Optional<PasswordVO> getPassword() {
    return password;
  }

  /**
   * Inform for a possible change propolsal in Provider
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Provider, otherwise the value for Provider
   */
  public Optional<ProviderVO> getProvider() {
    return provider;
  }

  /**
   * Inform for a possible change propolsal in SecondFactorSeed
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for SecondFactorSeed, otherwise the value for
   *         SecondFactorSeed
   */
  public Optional<SecondFactorSeedVO> getSecondFactorSeed() {
    return secondFactorSeed;
  }

  /**
   * Inform for a possible change propolsal in TemporalPassword
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for TemporalPassword, otherwise the value for
   *         TemporalPassword
   */
  public Optional<TemporalPasswordVO> getTemporalPassword() {
    return temporalPassword;
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in UseSecondFactors
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for UseSecondFactors, otherwise the value for
   *         UseSecondFactors
   */
  public Optional<UseSecondFactorsVO> getUseSecondFactors() {
    return useSecondFactors;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for BlockedUntil to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setBlockedUntil(final OffsetDateTime value) {
    this.blockedUntil = Optional.of(BlockedUntilVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Email to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setEmail(final String value) {
    this.email = Optional.of(EmailVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Enabled to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setEnabled(final Boolean value) {
    this.enabled = Optional.of(EnabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Language to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setLanguage(final String value) {
    this.language = Optional.of(LanguageVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Name to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Password to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setPassword(final String value) {
    this.password = Optional.of(PasswordVO.fromPlain(value));
    return this;
  }

  /**
   * Assigna change proposal for Provider to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setProvider(final String value) {
    this.provider = Optional.of(ProviderVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for SecondFactorSeed to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setSecondFactorSeed(final String value) {
    this.secondFactorSeed = Optional.of(SecondFactorSeedVO.fromPlain(value));
    return this;
  }

  /**
   * Assigna change proposal for TemporalPassword to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setTemporalPassword(final Boolean value) {
    this.temporalPassword = Optional.of(TemporalPasswordVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Tenant to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for UseSecondFactors to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setUseSecondFactors(final Boolean value) {
    this.useSecondFactors = Optional.of(UseSecondFactorsVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for UserVisibleProjection
   * @return self instance to enable a flow code
   */
  public UserVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("password".equals(field)) {
      this.unsetPassword();
    }
    if ("email".equals(field)) {
      this.unsetEmail();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("temporalPassword".equals(field)) {
      this.unsetTemporalPassword();
    }
    if ("useSecondFactors".equals(field)) {
      this.unsetUseSecondFactors();
    }
    if ("secondFactorSeed".equals(field)) {
      this.unsetSecondFactorSeed();
    }
    if ("blockedUntil".equals(field)) {
      this.unsetBlockedUntil();
    }
    if ("language".equals(field)) {
      this.unsetLanguage();
    }
    if ("provider".equals(field)) {
      this.unsetProvider();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for BlockedUntil
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetBlockedUntil() {
    this.blockedUntil = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Email
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetEmail() {
    this.email = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Language
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetLanguage() {
    this.language = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Password
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetPassword() {
    this.password = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Provider
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetProvider() {
    this.provider = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for SecondFactorSeed
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetSecondFactorSeed() {
    this.secondFactorSeed = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for TemporalPassword
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetTemporalPassword() {
    this.temporalPassword = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Tenant
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for UseSecondFactors
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetUseSecondFactors() {
    this.useSecondFactors = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public UserVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
