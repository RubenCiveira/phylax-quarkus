package net.civeira.phylax.features.access.securitydomain.application.service.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.securitydomain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainFacade;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainRef;
import net.civeira.phylax.features.access.securitydomain.application.projection.SecurityDomainStateProyection;
import net.civeira.phylax.features.access.securitydomain.application.request.SecurityDomainStateChange;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainCacheGateway;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainCached;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainReadRepositoryGateway;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainWriteRepositoryGateway;
import net.civeira.phylax.features.access.securitydomain.query.SecurityDomainCursor;
import net.civeira.phylax.features.access.securitydomain.query.SecurityDomainFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityDomainsVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainFacade aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainFilterProposal> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainFixedFieldsProposal> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainVisibleContentProposal> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainHiddenFieldsProposal> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityDomainPresetProposal> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainReadRepositoryGateway securityDomainReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainWriteRepositoryGateway securityDomainWriteRepositoryGateway;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, SecurityDomainFilter.builder().uids(uids).build(),
        SecurityDomainCursor.builder().build()).size();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public SecurityDomainStateChange copyWithFixed(Interaction prev, SecurityDomain original,
      SecurityDomainStateChange source) {
    fieldsToFix(prev, original).forEach(source::unset);
    SecurityDomainPresetProposal proposal = SecurityDomainPresetProposal.builder().dto(source)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public SecurityDomainStateChange copyWithFixed(Interaction prev,
      SecurityDomainStateChange source) {
    fieldsToFix(prev).forEach(source::unset);
    SecurityDomainPresetProposal proposal =
        SecurityDomainPresetProposal.builder().dto(source).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityDomain
   * @return The input dto with hidden values
   */
  public SecurityDomainStateProyection copyWithHidden(Interaction prev,
      SecurityDomain securityDomain) {
    SecurityDomainStateProyection target = new SecurityDomainStateProyection(securityDomain);
    fieldsToHide(prev, securityDomain).forEach(target::unset);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, SecurityDomainFilter filter) {
    return securityDomainReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.readonlyFields());
    SecurityDomainFixedFieldsProposal proposal =
        SecurityDomainFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityDomain
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, SecurityDomainRef securityDomain) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, securityDomain));
    fields.addAll(aggregate.readonlyFields());
    SecurityDomainFixedFieldsProposal proposal = SecurityDomainFixedFieldsProposal.builder()
        .fields(fields).securityDomain(securityDomain).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    SecurityDomainHiddenFieldsProposal proposal =
        SecurityDomainHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityDomain
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, SecurityDomainRef securityDomain) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    SecurityDomainHiddenFieldsProposal proposal = SecurityDomainHiddenFieldsProposal.builder()
        .fields(fields).securityDomain(securityDomain).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public SecurityDomainCached listCachedVisibles(Interaction prev, SecurityDomainFilter filter,
      SecurityDomainCursor cursor) {
    SecurityDomainFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<SecurityDomain> listVisibles(Interaction prev, SecurityDomainFilter filter,
      SecurityDomainCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<SecurityDomain> listVisiblesForUpdate(Interaction prev, SecurityDomainFilter filter,
      SecurityDomainCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public SecurityDomainCached retrieveCachedVisible(Interaction prev, String uid) {
    SecurityDomainCursor cursor = SecurityDomainCursor.builder().limit(1).build();
    SecurityDomainFilter visibleFilter =
        applyPreVisibilityFilter(prev, SecurityDomainFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<SecurityDomain> list =
          retrieveVisible(prev, uid).<List<SecurityDomain>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<SecurityDomain> retrieveVisible(Interaction prev, String uid) {
    SecurityDomainFilter filter =
        applyPreVisibilityFilter(prev, SecurityDomainFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<SecurityDomain> retrieveVisibleForUpdate(Interaction prev, String uid) {
    SecurityDomainFilter filter =
        applyPreVisibilityFilter(prev, SecurityDomainFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private SecurityDomainFilter applyPreVisibilityFilter(Interaction prev,
      SecurityDomainFilter filter) {
    SecurityDomainFilterProposal proposal =
        SecurityDomainFilterProposal.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    return proposal.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityDomainRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, SecurityDomain securityDomainRef) {
    SecurityDomainVisibleContentProposal proposal = SecurityDomainVisibleContentProposal.builder()
        .visible(true).entity(securityDomainRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<SecurityDomain> queryItem(Interaction prev, String uid,
      SecurityDomainFilter filter) {
    return securityDomainReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<SecurityDomain> queryItemForUpdate(Interaction prev, String uid,
      SecurityDomainFilter filter) {
    return securityDomainWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<SecurityDomain> queryItems(Interaction prev, SecurityDomainFilter filter,
      SecurityDomainCursor cursor) {
    List<SecurityDomain> list = new ArrayList<>();
    Iterator<SecurityDomain> slide = securityDomainReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<SecurityDomain> queryItemsForUpdate(Interaction prev, SecurityDomainFilter filter,
      SecurityDomainCursor cursor) {
    List<SecurityDomain> list = new ArrayList<>();
    Iterator<SecurityDomain> slide = securityDomainWriteRepositoryGateway
        .slideForUpdate(filter, cursor).slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }
}
