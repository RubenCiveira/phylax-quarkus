package net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.gateway;

import java.util.List;
import java.util.Optional;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.UserAcceptedTermnsOfUse;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.UserAcceptedTermnsOfUseRef;

public interface UserAcceptedTermnsOfUseReadRepositoryGateway {

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long count(UserAcceptedTermnsOfUseFilter filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean exists(String uid, Optional<UserAcceptedTermnsOfUseFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<UserAcceptedTermnsOfUse> find(UserAcceptedTermnsOfUseFilter filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<UserAcceptedTermnsOfUse> list(UserAcceptedTermnsOfUseFilter filter);

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  UserAcceptedTermnsOfUse resolve(UserAcceptedTermnsOfUseRef reference);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<UserAcceptedTermnsOfUse> retrieve(String uid,
      Optional<UserAcceptedTermnsOfUseFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated ReadGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<UserAcceptedTermnsOfUse> slide(UserAcceptedTermnsOfUseFilter filter,
      UserAcceptedTermnsOfUseCursor cursor);
}
