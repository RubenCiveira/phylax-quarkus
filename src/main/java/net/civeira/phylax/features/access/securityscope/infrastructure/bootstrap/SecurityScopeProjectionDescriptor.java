package net.civeira.phylax.features.access.securityscope.infrastructure.bootstrap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.UnaryOperator;

import jakarta.enterprise.context.ApplicationScoped;
import net.civeira.phylax.common.infrastructure.projection.ExecutionAggregation;
import net.civeira.phylax.common.infrastructure.projection.ExecutionNode;
import net.civeira.phylax.common.infrastructure.projection.ParamKind;
import net.civeira.phylax.common.infrastructure.projection.ProjectionDescriptor;
import net.civeira.phylax.common.infrastructure.projection.RelationshipDefinition;
import net.civeira.phylax.features.access.relyingparty.infrastructure.bootstrap.RelyingPartyProjectionDescriptor.RelyingPartyExecutionPlanner;
import net.civeira.phylax.features.access.scopeassignation.infrastructure.bootstrap.ScopeAssignationProjectionDescriptor.ScopeAssignationExecutionPlanner;
import net.civeira.phylax.features.access.trustedclient.infrastructure.bootstrap.TrustedClientProjectionDescriptor.TrustedClientExecutionPlanner;

@ApplicationScoped
public class SecurityScopeProjectionDescriptor implements ProjectionDescriptor {

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   */
  public static class SecurityScopeExecutionPlanner {

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    private final List<ExecutionAggregation> aggregation = new ArrayList<>();

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    String prefix;

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    public SecurityScopeExecutionPlanner() {
      this.prefix = "";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param prefix
     */
    public SecurityScopeExecutionPlanner(final String prefix) {
      this.prefix = prefix + ".";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public List<ExecutionAggregation> build() {
      return aggregation;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withEnabled() {
      return withEnabled(prefix + "enabled");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withEnabled(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("enabled").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withKind() {
      return withKind(prefix + "kind");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withKind(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("kind").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withRelyingParty() {
      return withRelyingParty(prefix + "relyingParty", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withRelyingParty(final String alias) {
      return withRelyingParty(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public SecurityScopeExecutionPlanner withRelyingParty(
        final UnaryOperator<RelyingPartyExecutionPlanner> callback) {
      return withRelyingParty(prefix + "relyingParty", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public SecurityScopeExecutionPlanner withRelyingParty(final String alias,
        final UnaryOperator<RelyingPartyExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("relyingParty").alias(alias)
          .selection(null != callback
              ? callback.apply(new RelyingPartyExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withResource() {
      return withResource(prefix + "resource");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withResource(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("resource").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withScope() {
      return withScope(prefix + "scope");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withScope(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("scope").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withScopeAssignation() {
      return withScopeAssignation(prefix + "scopeAssignation", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withScopeAssignation(final String alias) {
      return withScopeAssignation(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public SecurityScopeExecutionPlanner withScopeAssignation(
        final UnaryOperator<ScopeAssignationExecutionPlanner> callback) {
      return withScopeAssignation(prefix + "scopeAssignation", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public SecurityScopeExecutionPlanner withScopeAssignation(final String alias,
        final UnaryOperator<ScopeAssignationExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("scopeAssignation").alias(alias)
          .selection(null != callback
              ? callback.apply(new ScopeAssignationExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withTrustedClient() {
      return withTrustedClient(prefix + "trustedClient", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withTrustedClient(final String alias) {
      return withTrustedClient(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public SecurityScopeExecutionPlanner withTrustedClient(
        final UnaryOperator<TrustedClientExecutionPlanner> callback) {
      return withTrustedClient(prefix + "trustedClient", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public SecurityScopeExecutionPlanner withTrustedClient(final String alias,
        final UnaryOperator<TrustedClientExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("trustedClient").alias(alias)
          .selection(null != callback
              ? callback.apply(new TrustedClientExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withUid() {
      return withUid(prefix + "uid");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withUid(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("uid").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withVersion() {
      return withVersion(prefix + "version");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withVersion(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("version").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public SecurityScopeExecutionPlanner withVisibility() {
      return withVisibility(prefix + "visibility");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public SecurityScopeExecutionPlanner withVisibility(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("visibility").alias(alias)
          .selection(List.of()).build());
      return this;
    }
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  @Override
  public List<ExecutionNode> baseNodes(final String baseServer) {
    Map<String, RelationshipDefinition> relations = relations(baseServer);
    return List.of(
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/security-scopes")
            .method("GET").list(true).params(Map.of()).relations(relations).build(),
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/security-scopes/{uid}")
            .method("GET").list(false).params(Map.of("uid", ParamKind.PATH)).relations(relations)
            .build());
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  private Map<String, RelationshipDefinition> relations(final String baseServer) {
    return Map.of("trustedClient",
        RelationshipDefinition.builder().list(false).id("/api/access/trusted-clients")
            .url(baseServer + "/api/access/trusted-clients").method("GET").batchParam("uids")
            .on("$ref").referenceField("uid").build(),
        "relyingParty", RelationshipDefinition.builder().list(false)
            .id("/api/access/relying-parties").url(baseServer + "/api/access/relying-parties")
            .method("GET").batchParam("uids").on("$ref").referenceField("uid").build(),
        "scopeAssignation",
        RelationshipDefinition.builder().list(true).id("/api/access/scope-assignations")
            .url(baseServer + "/api/access/scope-assignations").method("GET")
            .batchParam("security-scopes").referenceField("security-scope").build());
  }
}
