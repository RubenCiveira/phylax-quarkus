package net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.update;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseChangeSet;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.ActivationDateVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.AttachedVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TextVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold tenant terms of use attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TenantTermsOfUseUpdateInput {

  /**
   * @autogenerated UpdateInputGenerator
   */
  public static class TenantTermsOfUseUpdateInputBuilder {

    /**
     * Append ActivationDate crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param activationDate The ActivationDate value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder activationDate(final OffsetDateTime activationDate) {
      return activationDate(Optional.of(ActivationDateVO.from(activationDate)));
    }

    /**
     * Append ActivationDate value
     *
     * @autogenerated UpdateInputGenerator
     * @param activationDate The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder activationDate(
        final Optional<ActivationDateVO> activationDate) {
      this.activationDate$value = activationDate;
      this.activationDate$set = true;
      return this;
    }

    /**
     * Append Attached crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param attached The Attached value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder attached(final String attached) {
      return attached(Optional.of(AttachedVO.from(attached)));
    }

    /**
     * Append Attached value
     *
     * @autogenerated UpdateInputGenerator
     * @param attached The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder attached(final Optional<AttachedVO> attached) {
      this.attached$value = attached;
      this.attached$set = true;
      return this;
    }

    /**
     * @autogenerated UpdateInputGenerator
     * @return
     */
    public TenantTermsOfUseUpdateInputBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * Append Tenant crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param tenant The Tenant value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder tenant(final TenantRef tenant) {
      return tenant(Optional.of(TenantVO.from(tenant)));
    }

    /**
     * Append Tenant value
     *
     * @autogenerated UpdateInputGenerator
     * @param tenant The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder tenant(final Optional<TenantVO> tenant) {
      this.tenant$value = tenant;
      this.tenant$set = true;
      return this;
    }

    /**
     * Append Text crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param text The Text value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder text(final String text) {
      return text(Optional.of(TextVO.from(text)));
    }

    /**
     * Append Text value
     *
     * @autogenerated UpdateInputGenerator
     * @param text The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder text(final Optional<TextVO> text) {
      this.text$value = text;
      this.text$set = true;
      return this;
    }

    /**
     * Append Uid crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param uid The Uid value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * Append Uid value
     *
     * @autogenerated UpdateInputGenerator
     * @param uid The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * Append Version crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param version The Version value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * Append Version value
     *
     * @autogenerated UpdateInputGenerator
     * @param version The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TenantTermsOfUseUpdateInputBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * @autogenerated UpdateInputGenerator
   * @param input
   * @return
   */
  static TenantTermsOfUseUpdateInput fromChangeSet(final TenantTermsOfUseChangeSet input) {
    return TenantTermsOfUseUpdateInput.builder().uid(input.getUid()).tenant(input.getTenant())
        .text(input.getText()).attached(input.getAttached())
        .activationDate(input.getActivationDate()).version(input.getVersion()).build();
  }

  /**
   * Date when the Terms of Use become active.
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<ActivationDateVO> activationDate = Optional.empty();

  /**
   * An optional file attachment (e.g., PDF or signed document).
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<AttachedVO> attached = Optional.empty();

  /**
   * The tenant this Terms of Use document belongs to.
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * The content of the Terms of Use document.
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<TextVO> text = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant terms of use para controlar bloqueos optimistas
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Inform for a possible change propolsal in ActivationDate
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for ActivationDate, otherwise the value for
   *         ActivationDate
   */
  public Optional<ActivationDateVO> getActivationDate() {
    return activationDate;
  }

  /**
   * Inform for a possible change propolsal in Attached
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Attached, otherwise the value for Attached
   */
  public Optional<AttachedVO> getAttached() {
    return attached;
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * Inform for a possible change propolsal in Text
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Text, otherwise the value for Text
   */
  public Optional<TextVO> getText() {
    return text;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for ActivationDate to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for TenantTermsOfUseUpdateInput
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseUpdateInput setActivationDate(final OffsetDateTime value) {
    this.activationDate = Optional.of(ActivationDateVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Attached to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for TenantTermsOfUseUpdateInput
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseUpdateInput setAttached(final String value) {
    this.attached = Optional.of(AttachedVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Tenant to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for TenantTermsOfUseUpdateInput
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseUpdateInput setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Text to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for TenantTermsOfUseUpdateInput
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseUpdateInput setText(final String value) {
    this.text = Optional.of(TextVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for TenantTermsOfUseUpdateInput
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseUpdateInput setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for TenantTermsOfUseUpdateInput
   * @return self instance to enable a flow code
   */
  public TenantTermsOfUseUpdateInput setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated UpdateInputGenerator
   * @return
   */
  TenantTermsOfUseChangeSet toChangeSet() {
    return TenantTermsOfUseChangeSet.builder().uid(uid).tenant(tenant).text(text).attached(attached)
        .activationDate(activationDate).version(version).build();
  }
}
