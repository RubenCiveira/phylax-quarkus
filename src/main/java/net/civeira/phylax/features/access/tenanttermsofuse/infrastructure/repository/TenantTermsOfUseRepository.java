package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.repository;

import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;

import javax.sql.DataSource;

import io.opentelemetry.api.trace.Tracer;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.infrastructure.sql.OptimistLockException;
import net.civeira.phylax.common.infrastructure.sql.SqlCommand;
import net.civeira.phylax.common.infrastructure.sql.SqlConverter;
import net.civeira.phylax.common.infrastructure.sql.SqlListParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlOperator;
import net.civeira.phylax.common.infrastructure.sql.SqlParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlResult;
import net.civeira.phylax.common.infrastructure.sql.SqlSchematicQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlTemplate;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseCursor;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseFilter;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.ActivationDateVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.AttachedVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TextVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.VersionVO;

@ApplicationScoped
@RequiredArgsConstructor
@Slf4j
public class TenantTermsOfUseRepository {

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TENANT_TERMS_OF_USE_ACTIVATION_DATE =
      "access_tenant_terms_of_use.activation_date";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TENANT_TERMS_OF_USE_ATTACHED =
      "access_tenant_terms_of_use.attached";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TENANT_TERMS_OF_USE_SNAKE = "access_tenant_terms_of_use";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TENANT_TERMS_OF_USE_TENANT =
      "access_tenant_terms_of_use.tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TENANT_TERMS_OF_USE_TEXT = "access_tenant_terms_of_use.text";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TENANT_TERMS_OF_USE_UID = "access_tenant_terms_of_use.uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TENANT_TERMS_OF_USE_VERSION =
      "access_tenant_terms_of_use.version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACTIVATION_DATE = "activationDate";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACTIVATION_DATE_SNAKE = "activation_date";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ATTACHED = "attached";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT = "tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TEXT = "text";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String UID = "uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String VERSION = "version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final DataSource datasource;

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final Tracer tracer;

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public long count(TenantTermsOfUseFilter filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<Long> sq = filteredQuery(template, filter);
      sq.select("count(uid) as uid");
      return sq.query(row -> Optional.of(row.getLong(1))).one().orElse(0l);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public TenantTermsOfUse create(TenantTermsOfUse entity) {
    return runCreate(entity, null);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  public TenantTermsOfUse create(TenantTermsOfUse entity, Predicate<TenantTermsOfUse> verifier) {
    return runCreate(entity, verifier);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   */
  public void delete(TenantTermsOfUse entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template
          .createSqlCommand("delete from \"access_tenant_terms_of_use\" where \"uid\" = :uid");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No delete from");
      }
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean exists(String uid, Optional<TenantTermsOfUseFilter> filter) {
    return retrieve(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean existsForUpdate(String uid, Optional<TenantTermsOfUseFilter> filter) {
    return retrieveForUpdate(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<TenantTermsOfUse> find(TenantTermsOfUseFilter filter) {
    TenantTermsOfUseCursor cursor = TenantTermsOfUseCursor.builder().build();
    return new TenantTermsOfUseSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<TenantTermsOfUse> find(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TenantTermsOfUse> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<TenantTermsOfUse> findForUpdate(TenantTermsOfUseFilter filter) {
    TenantTermsOfUseCursor cursor = TenantTermsOfUseCursor.builder().build();
    return new TenantTermsOfUseSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<TenantTermsOfUse> findForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TenantTermsOfUse> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<TenantTermsOfUse> list(TenantTermsOfUseFilter filter) {
    TenantTermsOfUseCursor cursor = TenantTermsOfUseCursor.builder().build();
    return new TenantTermsOfUseSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TenantTermsOfUse> list(final String sql,
      final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TenantTermsOfUse> list(final String sql, final Map<String, SqlParameterValue> params,
      final int limit) {
    return list(sql, params, Integer.valueOf(limit), false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<TenantTermsOfUse> listForUpdate(TenantTermsOfUseFilter filter) {
    TenantTermsOfUseCursor cursor = TenantTermsOfUseCursor.builder().build();
    return new TenantTermsOfUseSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TenantTermsOfUse> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TenantTermsOfUse> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params, final int limit) {
    return list(sql, params, Integer.valueOf(limit), true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public TenantTermsOfUse resolve(TenantTermsOfUseRef reference) {
    return reference instanceof TenantTermsOfUse tenantTermsOfUse ? tenantTermsOfUse
        : retrieve(reference.getUid(), Optional.empty()).orElseThrow(() -> new NotFoundException(
            "Trying to resolve inexistent TenantTermsOfUse: " + reference.getUid()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public TenantTermsOfUse resolveForUpdate(TenantTermsOfUseRef reference) {
    return reference instanceof TenantTermsOfUse tenantTermsOfUse ? tenantTermsOfUse
        : retrieveForUpdate(reference.getUid(), Optional.empty())
            .orElseThrow(() -> new NotFoundException(
                "Trying to resolve inexistent TenantTermsOfUse: " + reference.getUid()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<TenantTermsOfUse> retrieve(String uid, Optional<TenantTermsOfUseFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      TenantTermsOfUseFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> TenantTermsOfUseFilter.builder().uid(uid).build());
      SqlSchematicQuery<TenantTermsOfUse> sq = filteredQuery(template, readyFilter);
      return sq.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<TenantTermsOfUse> retrieveForUpdate(String uid,
      Optional<TenantTermsOfUseFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      TenantTermsOfUseFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> TenantTermsOfUseFilter.builder().uid(uid).build());
      SqlSchematicQuery<TenantTermsOfUse> sq = filteredQuery(template, readyFilter);
      return sq.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<TenantTermsOfUse> slide(TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor) {
    return new TenantTermsOfUseSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<TenantTermsOfUse> slideForUpdate(TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor) {
    return new TenantTermsOfUseSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public TenantTermsOfUse update(TenantTermsOfUse entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "update \"access_tenant_terms_of_use\" set  \"tenant\" = :tenant, \"text\" = :text, \"attached\" = :attached, \"activation_date\" = :activationDate, \"version\" = \"version\" + 1 where \"uid\" = :uid and \"version\" = :version");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      sq.with(TENANT, SqlParameterValue.of(entity.getTenantUid()));
      sq.with(TEXT, SqlParameterValue.of(entity.getText()));
      sq.with(ATTACHED, entity.getAttached().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(ACTIVATION_DATE, entity.getActivationDate().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullOffsetDateTime));
      sq.with(VERSION, entity.getVersion().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new OptimistLockException("No delete from");
      }
      return entity.withNextVersion();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @return
   */
  private SqlConverter<TenantTermsOfUse> converter() {
    return row -> {
      try {
        return Optional.of(TenantTermsOfUse.builder().uidValue(UidVO.from(row.getString(UID)))
            .tenantValue(TenantVO.fromReference(row.getString(TENANT)))
            .textValue(TextVO.from(row.getString(TEXT)))
            .attachedValue(AttachedVO.from(row.getString(ATTACHED)))
            .activationDateValue(
                ActivationDateVO.from(null == row.getTimestamp(ACTIVATION_DATE_SNAKE) ? null
                    : OffsetDateTime.ofInstant(
                        Instant.ofEpochMilli(row.getTimestamp(ACTIVATION_DATE_SNAKE).getTime()),
                        ZoneId.systemDefault())))
            .versionValue(VersionVO.from(row.getInt(VERSION))).build());
      } catch (ConstraintException ce) {
        log.error("Unable to map data for {}", row.getString(1), ce);
        return Optional.empty();
      }
    };
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param template
   * @param filter
   * @return
   */
  private <T> SqlSchematicQuery<T> filteredQuery(SqlTemplate template,
      TenantTermsOfUseFilter filter) {
    SqlSchematicQuery<T> sq = template.createSqlSchematicQuery(ACCESS_TENANT_TERMS_OF_USE_SNAKE);
    sq.selectFields(ACCESS_TENANT_TERMS_OF_USE_UID, ACCESS_TENANT_TERMS_OF_USE_TENANT,
        ACCESS_TENANT_TERMS_OF_USE_TEXT, ACCESS_TENANT_TERMS_OF_USE_ATTACHED,
        ACCESS_TENANT_TERMS_OF_USE_ACTIVATION_DATE, ACCESS_TENANT_TERMS_OF_USE_VERSION);
    filter.getUid().ifPresent(uid -> sq.where(UID, SqlOperator.EQ, SqlParameterValue.of(uid)));
    if (!filter.getUids().isEmpty()) {
      sq.where(UID, SqlOperator.IN, SqlListParameterValue.strings(filter.getUids()));
    }
    filter.getSearch().ifPresent(
        search -> sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%")));
    filter.getTenant().ifPresent(
        tenant -> sq.where(TENANT, SqlOperator.EQ, SqlParameterValue.of(tenant.getUid())));
    if (!filter.getTenants().isEmpty()) {
      sq.where(TENANT, SqlOperator.IN, SqlListParameterValue.strings(filter.getTenants()));
    }
    filter.getTenantTenantAccesible()
        .ifPresent(tenantTenantAccesible -> sq.where(ACCESS_TENANT_TERMS_OF_USE_TENANT,
            SqlOperator.EQ, SqlParameterValue.of(tenantTenantAccesible)));
    return sq;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @param forUpdate
   * @return sq.where("uid", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  private List<TenantTermsOfUse> list(final String sql, final Map<String, SqlParameterValue> params,
      final Integer limit, final boolean forUpdate) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TenantTermsOfUse> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      if (forUpdate) {
        createSqlQuery = createSqlQuery.forUpdate();
      }
      SqlResult<TenantTermsOfUse> query = createSqlQuery.query(converter());
      return null == limit ? query.all() : query.limit(limit);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  private TenantTermsOfUse runCreate(TenantTermsOfUse entity,
      Predicate<TenantTermsOfUse> verifier) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "insert into \"access_tenant_terms_of_use\" ( \"uid\", \"tenant\", \"text\", \"attached\", \"activation_date\", \"version\") values ( :uid, :tenant, :text, :attached, :activationDate, :version)");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      sq.with(TENANT, SqlParameterValue.of(entity.getTenantUid()));
      sq.with(TEXT, SqlParameterValue.of(entity.getText()));
      sq.with(ATTACHED, entity.getAttached().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(ACTIVATION_DATE, entity.getActivationDate().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullOffsetDateTime));
      sq.with(VERSION, entity.getVersion().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No insert into");
      }
      return verifier == null ? entity : verified(verifier.test(entity), entity, template);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<TenantTermsOfUse> runList(TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<TenantTermsOfUse> sq = filteredQuery(template, filter);
      cursor.getSinceUid()
          .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      sq.orderAsc("uid");
      return sq.query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<TenantTermsOfUse> runListForUpdate(TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<TenantTermsOfUse> sq = filteredQuery(template, filter);
      cursor.getSinceUid()
          .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      sq.orderAsc("uid");
      return sq.forUpdate().query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param exists
   * @param entity
   * @param template
   * @return
   */
  private TenantTermsOfUse verified(boolean exists, TenantTermsOfUse entity, SqlTemplate template) {
    if (exists) {
      return entity;
    } else {
      template.createSqlCommand("delete from \"access_tenant_terms_of_use\" where \"uid\" = :uid")
          .with("uid", SqlParameterValue.of(entity.getUid())).execute();
      throw new NotFoundException("");
    }
  }
}
