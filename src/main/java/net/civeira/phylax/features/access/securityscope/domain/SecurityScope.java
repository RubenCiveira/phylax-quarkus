package net.civeira.phylax.features.access.securityscope.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.securityscope.domain.event.SecurityScopeCreateEvent;
import net.civeira.phylax.features.access.securityscope.domain.event.SecurityScopeDeleteEvent;
import net.civeira.phylax.features.access.securityscope.domain.event.SecurityScopeDisableEvent;
import net.civeira.phylax.features.access.securityscope.domain.event.SecurityScopeEnableEvent;
import net.civeira.phylax.features.access.securityscope.domain.event.SecurityScopeEvent;
import net.civeira.phylax.features.access.securityscope.domain.event.SecurityScopeUpdateEvent;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.KindVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.ResourceVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.ScopeVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.VisibilityVO;

/**
 * each of the allow scopes for the application.
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class SecurityScope implements SecurityScopeRef {

  /**
   * Prepare a new security scope with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new security scope
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed security scope.
   */
  public static SecurityScope create(final SecurityScopeChangeSet change)
      throws ConstraintException {
    change.setEnabled(true);
    SecurityScope instance = new SecurityScope(change, Optional.empty());
    instance.addEvent(SecurityScopeCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * El enabled de security scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private EnabledVO enabledValue = EnabledVO.nullValue();

  /**
   * El kind de security scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private KindVO kindValue = KindVO.nullValue();

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<SecurityScopeEvent> recordedEvents = List.of();

  /**
   * El relying party de security scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private RelyingPartyVO relyingPartyValue = RelyingPartyVO.nullValue();

  /**
   * A label group key to show the scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private ResourceVO resourceValue;

  /**
   * A label to show the scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private ScopeVO scopeValue;

  /**
   * El trusted client de security scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private TrustedClientVO trustedClientValue = TrustedClientVO.nullValue();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Campo con el n√∫mero de version de security scope para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * El visibility de security scope
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VisibilityVO visibilityValue = VisibilityVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private SecurityScope(final SecurityScopeChangeSet attribute,
      final Optional<SecurityScope> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue =
        attribute.getUid().orElse(previous.map(SecurityScope::getUidValue).orElse(null));
    this.trustedClientValue = attribute.getTrustedClient().orElse(
        previous.map(SecurityScope::getTrustedClientValue).orElseGet(TrustedClientVO::nullValue));
    this.relyingPartyValue = attribute.getRelyingParty().orElse(
        previous.map(SecurityScope::getRelyingPartyValue).orElseGet(RelyingPartyVO::nullValue));
    this.resourceValue =
        attribute.getResource().orElse(previous.map(SecurityScope::getResourceValue).orElse(null));
    this.scopeValue =
        attribute.getScope().orElse(previous.map(SecurityScope::getScopeValue).orElse(null));
    this.enabledValue = attribute.getEnabled()
        .orElse(previous.map(SecurityScope::getEnabledValue).orElseGet(EnabledVO::nullValue));
    this.kindValue = attribute.getKind()
        .orElse(previous.map(SecurityScope::getKindValue).orElseGet(KindVO::nullValue));
    this.visibilityValue = attribute.getVisibility()
        .orElse(previous.map(SecurityScope::getVisibilityValue).orElseGet(VisibilityVO::nullValue));
    this.versionValue = attribute.getVersion()
        .orElse(previous.map(SecurityScope::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == resourceValue) {
      list.add(new ConstraintFail("REQUIRED", "resource", null));
    }
    if (null == scopeValue) {
      list.add(new ConstraintFail("REQUIRED", "scope", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(SecurityScope::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a security scope
   *
   * @autogenerated EntityGenerator
   * @return A instance of security scope ready to be deleted
   */
  public SecurityScope delete() {
    SecurityScope instance = this;
    instance.addEvent(SecurityScopeDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply disable on security scope.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of security scope
   */
  public SecurityScope disable() {
    SecurityScopeChangeSet attr = new SecurityScopeChangeSet();
    attr.setEnabled(false);
    SecurityScope instance = new SecurityScope(attr, Optional.of(this));
    instance.addEvent(SecurityScopeDisableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply enable on security scope.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of security scope
   */
  public SecurityScope enable() {
    SecurityScopeChangeSet attr = new SecurityScopeChangeSet();
    attr.setEnabled(true);
    SecurityScope instance = new SecurityScope(attr, Optional.of(this));
    instance.addEvent(SecurityScopeEnableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a security scope
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of security scope
   */
  public SecurityScope update(final SecurityScopeChangeSet change) throws ConstraintException {
    change.unsetEnabled();
    SecurityScope instance = new SecurityScope(change, Optional.of(this));
    instance.addEvent(SecurityScopeUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityScope withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final SecurityScopeEvent event) {
    List<SecurityScopeEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
