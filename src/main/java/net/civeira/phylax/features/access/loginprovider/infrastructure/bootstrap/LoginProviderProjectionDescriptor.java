package net.civeira.phylax.features.access.loginprovider.infrastructure.bootstrap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.UnaryOperator;

import jakarta.enterprise.context.ApplicationScoped;
import net.civeira.phylax.common.infrastructure.projection.ExecutionAggregation;
import net.civeira.phylax.common.infrastructure.projection.ExecutionNode;
import net.civeira.phylax.common.infrastructure.projection.ParamKind;
import net.civeira.phylax.common.infrastructure.projection.ProjectionDescriptor;
import net.civeira.phylax.common.infrastructure.projection.RelationshipDefinition;
import net.civeira.phylax.features.access.tenant.infrastructure.bootstrap.TenantProjectionDescriptor.TenantExecutionPlanner;

@ApplicationScoped
public class LoginProviderProjectionDescriptor implements ProjectionDescriptor {

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   */
  public static class LoginProviderExecutionPlanner {

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    private final List<ExecutionAggregation> aggregation = new ArrayList<>();

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    String prefix;

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    public LoginProviderExecutionPlanner() {
      this.prefix = "";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param prefix
     */
    public LoginProviderExecutionPlanner(final String prefix) {
      this.prefix = prefix + ".";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public List<ExecutionAggregation> build() {
      return aggregation;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withCertificate() {
      return withCertificate(prefix + "certificate");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withCertificate(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("certificate").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withDirectAccess() {
      return withDirectAccess(prefix + "directAccess");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withDirectAccess(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("directAccess").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withDisabled() {
      return withDisabled(prefix + "disabled");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withDisabled(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("disabled").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withMetadata() {
      return withMetadata(prefix + "metadata");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withMetadata(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("metadata").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withName() {
      return withName(prefix + "name");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withName(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("name").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withPrivateKey() {
      return withPrivateKey(prefix + "privateKey");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withPrivateKey(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("privateKey").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withPublicKey() {
      return withPublicKey(prefix + "publicKey");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withPublicKey(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("publicKey").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withSource() {
      return withSource(prefix + "source");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withSource(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("source").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withTenant() {
      return withTenant(prefix + "tenant", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withTenant(final String alias) {
      return withTenant(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public LoginProviderExecutionPlanner withTenant(
        final UnaryOperator<TenantExecutionPlanner> callback) {
      return withTenant(prefix + "tenant", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public LoginProviderExecutionPlanner withTenant(final String alias,
        final UnaryOperator<TenantExecutionPlanner> callback) {
      aggregation
          .add(ExecutionAggregation.builder().name("tenant").alias(alias)
              .selection(null != callback
                  ? callback.apply(new TenantExecutionPlanner(prefix + alias)).build()
                  : List.of())
              .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withUid() {
      return withUid(prefix + "uid");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withUid(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("uid").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withUsersEnabledByDefault() {
      return withUsersEnabledByDefault(prefix + "usersEnabledByDefault");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withUsersEnabledByDefault(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("usersEnabledByDefault").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public LoginProviderExecutionPlanner withVersion() {
      return withVersion(prefix + "version");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public LoginProviderExecutionPlanner withVersion(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("version").alias(alias).selection(List.of()).build());
      return this;
    }
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  @Override
  public List<ExecutionNode> baseNodes(final String baseServer) {
    Map<String, RelationshipDefinition> relations = relations(baseServer);
    return List.of(
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/login-providers")
            .method("GET").list(true).params(Map.of()).relations(relations).build(),
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/login-providers/{uid}")
            .method("GET").list(false).params(Map.of("uid", ParamKind.PATH)).relations(relations)
            .build());
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  private Map<String, RelationshipDefinition> relations(final String baseServer) {
    return Map.of("tenant",
        RelationshipDefinition.builder().list(false).id("/api/access/tenants")
            .url(baseServer + "/api/access/tenants").method("GET").batchParam("uids").on("$ref")
            .referenceField("uid").build());
  }
}
