/* @autogenerated */
package net.civeira.phylax.features.access.oauth.application.usecase;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.loginprovider.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.LoginProviderSourceOptions;
import net.civeira.phylax.features.access.loginprovider.gateway.LoginProviderReadRepositoryGateway;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderFilter;
import net.civeira.phylax.features.access.oauth.application.service.ActiveUserFindService;
import net.civeira.phylax.features.access.tenant.Tenant;
import net.civeira.phylax.features.access.user.User;
import net.civeira.phylax.features.access.user.UserFacade;
import net.civeira.phylax.features.access.user.command.UserChangeProposal;
import net.civeira.phylax.features.access.user.gateway.UserWriteRepositoryGateway;
import net.civeira.phylax.features.access.user.query.UserFilter;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedAccessExternalProvider;
import net.civeira.phylax.features.oauth.delegated.domain.model.DelegatedAccessExternalProvider.UserData;
import net.civeira.phylax.features.oauth.delegated.domain.provider.GoogleDelegatedAccessProvider;
import net.civeira.phylax.features.oauth.delegated.domain.provider.SamlDelegatedAccessProvider;

@ApplicationScoped
@RequiredArgsConstructor
public class DelegeatedLoginProvidersUsecase {
  private final ActiveUserFindService actives;
  private final UserFacade usersFactory;
  private final UserWriteRepositoryGateway usersWriter;
  private final LoginProviderReadRepositoryGateway providers;

  public List<DelegatedAccessExternalProvider> providers(String tenant, List<String> audiences) {
    return actives.findEnabledTenant(tenant, audiences).map(this::providers).orElseGet(List::of);
  }

  public Optional<String> retrieveUsername(String tenantName, List<String> audiences,
      String provider, UserData codeInfo) {
    return actives.findEnabledTenant(tenantName, audiences)
        .flatMap(tenant -> findOrCreate(tenant, codeInfo, provider)).map(User::getNameValue);
  }

  private Optional<User> findOrCreate(Tenant tenant, UserData codeInfo, String provider) {
    Optional<User> one = usersWriter
        .findForUpdate(UserFilter.builder().name(codeInfo.getName()).tenant(tenant).build());
    if (one.isPresent()) {
      return actives.checkEnabled(one.get()) ? one : Optional.empty();
    } else {
      return provider(tenant, provider).map(loginProvider -> usersWriter
          .create(usersFactory.create(UserChangeProposal.builder().newUid().name(codeInfo.getName())
              .password("").email(codeInfo.getEmail()).provider(provider)
              .enabled(loginProvider.isUsersEnabledByDefault()).tenant(tenant).build())));
    }
  }

  private List<DelegatedAccessExternalProvider> providers(Tenant tenant) {
    return providers.list(LoginProviderFilter.builder().tenant(tenant).build()).stream()
        .map(this::map).filter(Objects::nonNull).toList();
  }

  private Optional<LoginProvider> provider(Tenant tenant, String name) {
    return providers.list(LoginProviderFilter.builder().tenant(tenant).build()).stream()
        .filter(lp -> name.equals(lp.getNameValue())).findFirst();
  }

  private DelegatedAccessExternalProvider map(LoginProvider provider) {
    if (provider.isDisabled()) {
      return null;
    }
    if (provider.getSourceValue() == LoginProviderSourceOptions.GOOGLE) {
      return mapGoogle(provider);
    }
    if (provider.getSourceValue() == LoginProviderSourceOptions.SAML) {
      return mapSaml(provider);
    }
    return null;
  }

  private DelegatedAccessExternalProvider mapSaml(LoginProvider provider) {
    return new SamlDelegatedAccessProvider(provider.getNameValue(),
        provider.getPrivateKeyValue().orElse("."), provider.getPublicKeyValue().orElse("."),
        provider.getCertificateValue().orElse("-"), provider.isDirectAccess());
  }

  private DelegatedAccessExternalProvider mapGoogle(LoginProvider provider) {
    return new GoogleDelegatedAccessProvider(provider.getNameValue(),
        provider.getPublicKeyValue().orElse("-"), provider.getPrivateKeyValue().orElse("-"),
        provider.isDirectAccess());
  }
}
