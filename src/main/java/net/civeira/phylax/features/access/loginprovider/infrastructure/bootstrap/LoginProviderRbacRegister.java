package net.civeira.phylax.features.access.loginprovider.infrastructure.bootstrap;

import java.util.List;

import io.quarkus.runtime.StartupEvent;
import jakarta.annotation.Priority;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Rbac;
import net.civeira.phylax.common.security.scope.FieldDescription;
import net.civeira.phylax.common.security.scope.Kind;
import net.civeira.phylax.common.security.scope.ResourceDescription;
import net.civeira.phylax.common.security.scope.ScopeDescription;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProviderRbacRegister {

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private static final ResourceDescription RESOURCE = ResourceDescription.builder()
      .name("login-provider")
      .description(
          "Represents a login identity provider (e.g., Google, GitHub, SAML) configured for a tenant. Enables federated authentication integration.")
      .build();

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private final Rbac rbac;

  /**
   * @autogenerated RegisterGeneratorGenerator
   * @param ev
   */
  void registerResource(@Observes @Priority(10) final StartupEvent ev) {
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.READ).name("list")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve").description("list").build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("create")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("update")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("delete")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.WRITE).name("enable")
            .description("Enables the login provider and allows users to authenticate with it.")
            .required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.WRITE).name("disable")
            .description("Disables the login provider and prevents authentication via this source.")
            .required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve-upload-metadata").description(
            "A metadata file required by some providers for configuration (e.g., SAML descriptor).")
            .required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.WRITE).name("temp-upload-metadata").description(
            "A metadata file required by some providers for configuration (e.g., SAML descriptor).")
            .required(List.of()).build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("uid")
        .description("A uid string to identify the entity").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("tenant")
        .description("The tenant this login provider is configured for.").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("name")
        .description("A name that identifies this login provider within the tenant.").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("source").description(
            "The source protocol or system used for authentication (e.g., GOOGLE, GITHUB, SAML).")
            .build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("disabled")
        .description("Indicates if this provider is currently disabled.").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("directAccess").description(
            "If true, the system will default to this login method without requiring selection.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("publicKey")
            .description("A public key shared with users to interact with the identity provider.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("privateKey")
            .description(
                "Private key used internally to validate codes returned by the identity provider.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("certificate")
            .description("The provider certificate used for signature verification, if required.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("metadata").description(
            "A metadata file required by some providers for configuration (e.g., SAML descriptor).")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("usersEnabledByDefault")
            .description(
                "Defines whether the users created with this provider are enabled by default.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("version").description(
            "Campo con el n√∫mero de version de login provider para controlar bloqueos optimistas")
            .build());
  }
}
