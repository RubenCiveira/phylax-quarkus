package net.civeira.phylax.features.access.useraccesstemporalcode.domain;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeCreateEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeDeleteEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeGenerateMfaTemporalCodeEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeGeneratePasswordRecoverEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeMarkLoginBlockEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeMarkLoginFailEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeMarkLoginOkEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeResetMfaTemporalCodeEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeResetPasswordRecoverEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.event.UserAccessTemporalCodeUpdateEvent;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.FailedLoginAttemptsVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.RecoveryCodeExpirationVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.RecoveryCodeVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.TempSecondFactorSeedExpirationVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.TempSecondFactorSeedVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.UserVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.VersionVO;

/**
 * user-access-temporal-code
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class UserAccessTemporalCode implements UserAccessTemporalCodeRef {

  /**
   * Prepare a new user access temporal code with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new user access temporal code
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed user access temporal code.
   */
  public static UserAccessTemporalCode create(final UserAccessTemporalCodeChangeSet change)
      throws ConstraintException {
    change.setFailedLoginAttempts(0);
    UserAccessTemporalCode instance = new UserAccessTemporalCode(change, Optional.empty());
    instance.addEvent(UserAccessTemporalCodeCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * The amount login attempts failed since the last right login.
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private FailedLoginAttemptsVO failedLoginAttemptsValue = FailedLoginAttemptsVO.nullValue();

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<UserAccessTemporalCodeEvent> recordedEvents = List.of();

  /**
   * La caducidad del código de recuperacion
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private RecoveryCodeExpirationVO recoveryCodeExpirationValue =
      RecoveryCodeExpirationVO.nullValue();

  /**
   * El codigo de recuperacion enviado por email
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private RecoveryCodeVO recoveryCodeValue = RecoveryCodeVO.nullValue();

  /**
   * La caducidad del código de recuperacion
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private TempSecondFactorSeedExpirationVO tempSecondFactorSeedExpirationValue =
      TempSecondFactorSeedExpirationVO.nullValue();

  /**
   * the seed used to the otp login
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private TempSecondFactorSeedVO tempSecondFactorSeedValue = TempSecondFactorSeedVO.nullValue();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * El usuario para el que se tienen estos datos
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UserVO userValue;

  /**
   * Campo con el número de version de user access temporal code para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private UserAccessTemporalCode(final UserAccessTemporalCodeChangeSet attribute,
      final Optional<UserAccessTemporalCode> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue =
        attribute.getUid().orElse(previous.map(UserAccessTemporalCode::getUidValue).orElse(null));
    this.userValue =
        attribute.getUser().orElse(previous.map(UserAccessTemporalCode::getUserValue).orElse(null));
    this.tempSecondFactorSeedValue = attribute.getTempSecondFactorSeed()
        .orElse(previous.map(UserAccessTemporalCode::getTempSecondFactorSeedValue)
            .orElseGet(TempSecondFactorSeedVO::nullValue));
    this.tempSecondFactorSeedExpirationValue = attribute.getTempSecondFactorSeedExpiration()
        .orElse(previous.map(UserAccessTemporalCode::getTempSecondFactorSeedExpirationValue)
            .orElseGet(TempSecondFactorSeedExpirationVO::nullValue));
    this.failedLoginAttemptsValue = attribute.getFailedLoginAttempts()
        .orElse(previous.map(UserAccessTemporalCode::getFailedLoginAttemptsValue)
            .orElseGet(FailedLoginAttemptsVO::nullValue));
    this.recoveryCodeValue = attribute.getRecoveryCode().orElse(previous
        .map(UserAccessTemporalCode::getRecoveryCodeValue).orElseGet(RecoveryCodeVO::nullValue));
    this.recoveryCodeExpirationValue = attribute.getRecoveryCodeExpiration()
        .orElse(previous.map(UserAccessTemporalCode::getRecoveryCodeExpirationValue)
            .orElseGet(RecoveryCodeExpirationVO::nullValue));
    this.versionValue = attribute.getVersion().orElse(
        previous.map(UserAccessTemporalCode::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == userValue) {
      list.add(new ConstraintFail("REQUIRED", "user", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents =
        previous.map(UserAccessTemporalCode::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a user access temporal code
   *
   * @autogenerated EntityGenerator
   * @return A instance of user access temporal code ready to be deleted
   */
  public UserAccessTemporalCode delete() {
    UserAccessTemporalCode instance = this;
    instance.addEvent(UserAccessTemporalCodeDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply generate mfa temporal code on user access temporal code.
   *
   * @autogenerated EntityGenerator
   * @param tempSecondFactorSeed
   * @param tempSecondFactorSeedExpiration
   * @return A modified instance of user access temporal code
   */
  public UserAccessTemporalCode generateMfaTemporalCode(final String tempSecondFactorSeed,
      final OffsetDateTime tempSecondFactorSeedExpiration) {
    UserAccessTemporalCodeChangeSet attr = new UserAccessTemporalCodeChangeSet();
    attr.setTempSecondFactorSeedExpiration(tempSecondFactorSeedExpiration);
    UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
    instance.addEvent(
        UserAccessTemporalCodeGenerateMfaTemporalCodeEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply generate password recover on user access temporal code.
   *
   * @autogenerated EntityGenerator
   * @param recoveryCode
   * @param recoveryCodeExpiration
   * @return A modified instance of user access temporal code
   */
  public UserAccessTemporalCode generatePasswordRecover(final String recoveryCode,
      final OffsetDateTime recoveryCodeExpiration) {
    UserAccessTemporalCodeChangeSet attr = new UserAccessTemporalCodeChangeSet();
    attr.setRecoveryCodeExpiration(recoveryCodeExpiration);
    UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
    instance.addEvent(
        UserAccessTemporalCodeGeneratePasswordRecoverEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply mark login block on user access temporal code.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of user access temporal code
   */
  public UserAccessTemporalCode markLoginBlock() {
    UserAccessTemporalCodeChangeSet attr = new UserAccessTemporalCodeChangeSet();
    attr.setFailedLoginAttempts(0);
    UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
    instance
        .addEvent(UserAccessTemporalCodeMarkLoginBlockEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply mark login fail on user access temporal code.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of user access temporal code
   */
  public UserAccessTemporalCode markLoginFail() {
    UserAccessTemporalCodeChangeSet attr = new UserAccessTemporalCodeChangeSet();
    attr.setFailedLoginAttempts(this.getFailedLoginAttempts().orElse(0) + 1);
    UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
    instance.addEvent(UserAccessTemporalCodeMarkLoginFailEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply mark login ok on user access temporal code.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of user access temporal code
   */
  public UserAccessTemporalCode markLoginOk() {
    UserAccessTemporalCodeChangeSet attr = new UserAccessTemporalCodeChangeSet();
    attr.setFailedLoginAttempts(0);
    UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
    instance.addEvent(UserAccessTemporalCodeMarkLoginOkEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply reset mfa temporal code on user access temporal code.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of user access temporal code
   */
  public UserAccessTemporalCode resetMfaTemporalCode() {
    UserAccessTemporalCodeChangeSet attr = new UserAccessTemporalCodeChangeSet();
    attr.setTempSecondFactorSeed(null);
    attr.setTempSecondFactorSeedExpiration(null);
    UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
    instance.addEvent(
        UserAccessTemporalCodeResetMfaTemporalCodeEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Apply reset password recover on user access temporal code.
   *
   * @autogenerated EntityGenerator
   * @return A modified instance of user access temporal code
   */
  public UserAccessTemporalCode resetPasswordRecover() {
    UserAccessTemporalCodeChangeSet attr = new UserAccessTemporalCodeChangeSet();
    attr.setTempSecondFactorSeed(null);
    attr.setTempSecondFactorSeedExpiration(null);
    UserAccessTemporalCode instance = new UserAccessTemporalCode(attr, Optional.of(this));
    instance.addEvent(
        UserAccessTemporalCodeResetPasswordRecoverEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a user access temporal code
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of user access temporal code
   */
  public UserAccessTemporalCode update(final UserAccessTemporalCodeChangeSet change)
      throws ConstraintException {
    change.unsetFailedLoginAttempts();
    UserAccessTemporalCode instance = new UserAccessTemporalCode(change, Optional.of(this));
    instance.addEvent(UserAccessTemporalCodeUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public UserAccessTemporalCode withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final UserAccessTemporalCodeEvent event) {
    List<UserAccessTemporalCodeEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
