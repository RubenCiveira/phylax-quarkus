package net.civeira.phylax.features.access.tenant.application.usecase.update;

import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantVisibleProjection;
import net.civeira.phylax.features.access.tenant.domain.RelingParties;
import net.civeira.phylax.features.access.tenant.domain.Tenant;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients;
import net.civeira.phylax.features.access.tenant.domain.valueobject.AccessToAllApplicationsVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.DomainVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.RelingPartiesVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.TrustedClientsVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenant.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold tenant attribute values
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class TenantUpdateProjection {

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated UpdateProjectionGenerator
   * @param visible The entity who provide values.
   * @return
   */
  public static TenantUpdateProjection from(final TenantVisibleProjection visible) {
    TenantUpdateProjection instance = new TenantUpdateProjection();
    instance.uidValue = visible.getUid();
    instance.nameValue = visible.getName();
    instance.domainValue = visible.getDomain();
    instance.enabledValue = visible.getEnabled();
    instance.accessToAllApplicationsValue = visible.getAccessToAllApplications();
    instance.trustedClientsValue = visible.getTrustedClients();
    instance.relingPartiesValue = visible.getRelingParties();
    instance.versionValue = visible.getVersion();
    return instance;
  }

  /**
   * Defines if users from this tenant can access all parties and clients, or only those explicitly
   * assigned.
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<AccessToAllApplicationsVO> accessToAllApplicationsValue;

  /**
   * A domain suffix to identify the account
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<DomainVO> domainValue;

  /**
   * The users of a non enabled tenant could not make login on the system
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<EnabledVO> enabledValue;

  /**
   * The name to identify the account.
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<NameVO> nameValue;

  /**
   * A list of relying parties (services or applications) associated with this tenant.
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<RelingPartiesVO> relingPartiesValue;

  /**
   * A list of OAuth clients marked as trusted for this tenant.
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<TrustedClientsVO> trustedClientsValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<UidVO> uidValue;

  /**
   * Campo con el n√∫mero de version de tenant para controlar bloqueos optimistas
   *
   * @autogenerated UpdateProjectionGenerator
   */
  private Optional<VersionVO> versionValue;

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated UpdateProjectionGenerator
   * @param entity The entity who provide values.
   */
  public TenantUpdateProjection(final Tenant entity) {
    uidValue = Optional.of(entity.getUidValue());
    nameValue = Optional.of(entity.getNameValue());
    domainValue = Optional.of(entity.getDomainValue());
    enabledValue = Optional.of(entity.getEnabledValue());
    accessToAllApplicationsValue = Optional.of(entity.getAccessToAllApplicationsValue());
    trustedClientsValue = Optional.of(entity.getTrustedClientsValue());
    relingPartiesValue = Optional.of(entity.getRelingPartiesValue());
    versionValue = Optional.of(entity.getVersionValue());
  }

  /**
   * Inform for a possible change propolsal in AccessToAllApplications
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for AccessToAllApplications, otherwise the value
   *         for AccessToAllApplications
   */
  public Boolean getAccessToAllApplications() {
    return getAccessToAllApplicationsOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in AccessToAllApplications
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for AccessToAllApplications, otherwise the value
   *         for AccessToAllApplications
   */
  public Boolean getAccessToAllApplicationsOrDefault(final Boolean orDefault) {
    return accessToAllApplicationsValue.map(AccessToAllApplicationsVO::isAccessToAllApplications)
        .orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Domain
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Domain, otherwise the value for Domain
   */
  public String getDomain() {
    return getDomainOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Domain
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Domain, otherwise the value for Domain
   */
  public String getDomainOrDefault(final String orDefault) {
    return domainValue.map(DomainVO::getDomain).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Boolean getEnabled() {
    return getEnabledOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Boolean getEnabledOrDefault(final Boolean orDefault) {
    return enabledValue.map(EnabledVO::isEnabled).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public String getName() {
    return getNameOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public String getNameOrDefault(final String orDefault) {
    return nameValue.map(NameVO::getName).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in RelingParties
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for RelingParties, otherwise the value for
   *         RelingParties
   */
  public List<RelingParties> getRelingParties() {
    return relingPartiesValue.map(RelingPartiesVO::getRelingParties).orElseGet(List::of);
  }

  /**
   * Inform for a possible change propolsal in TrustedClients
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for TrustedClients, otherwise the value for
   *         TrustedClients
   */
  public List<TrustedClients> getTrustedClients() {
    return trustedClientsValue.map(TrustedClientsVO::getTrustedClients).orElseGet(List::of);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUid() {
    return getUidOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUidOrDefault(final String orDefault) {
    return uidValue.map(UidVO::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated UpdateProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersion() {
    return getVersionOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated UpdateProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersionOrDefault(final Integer orDefault) {
    return versionValue.flatMap(VersionVO::getVersion).orElse(orDefault);
  }
}
