package net.civeira.phylax.features.access.loginprovider.application.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderChangeSet;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderRef;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCacheGateway;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCached;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCursor;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderFilter;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderReadRepositoryGateway;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderWriteRepositoryGateway;
import net.civeira.phylax.features.access.loginprovider.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantsVisibility;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProvidersVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final LoginProviderCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderVisibilityCheck> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderFixedFieldsCheck> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderAccesibleCheck> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderHiddenFieldsCheck> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final LoginProviderReadRepositoryGateway loginProviderReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final LoginProviderWriteRepositoryGateway loginProviderWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<LoginProviderEntityEnrichment> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantsVisibility tenantsVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids
        .size() == listVisibles(prev, LoginProviderVisibilityFilter.builder().uids(uids).build(),
            LoginProviderCursor.builder().build()).size();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public LoginProviderChangeSet copyWithFixed(Interaction prev, LoginProviderChangeSet source,
      LoginProvider original) {
    LoginProviderChangeSet withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    LoginProviderEntityEnrichment proposal = LoginProviderEntityEnrichment.builder()
        .dto(withReferences).interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public LoginProviderChangeSet copyWithFixed(Interaction prev, LoginProviderChangeSet source) {
    LoginProviderChangeSet withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    LoginProviderEntityEnrichment proposal =
        LoginProviderEntityEnrichment.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param loginProvider
   * @return The input dto with hidden values
   */
  public LoginProviderVisibleProjection copyWithHidden(Interaction prev,
      LoginProvider loginProvider) {
    LoginProviderVisibleProjection target = new LoginProviderVisibleProjection(loginProvider);
    fieldsToHide(prev, loginProvider).forEach(target::unset);
    return target;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, LoginProviderVisibilityFilter filter) {
    return loginProviderReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    LoginProviderFixedFieldsCheck proposal =
        LoginProviderFixedFieldsCheck.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param loginProvider
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, LoginProviderRef loginProvider) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, loginProvider));
    LoginProviderFixedFieldsCheck proposal = LoginProviderFixedFieldsCheck.builder().fields(fields)
        .loginProvider(loginProvider).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    LoginProviderHiddenFieldsCheck proposal =
        LoginProviderHiddenFieldsCheck.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param loginProvider
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, LoginProviderRef loginProvider) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    LoginProviderHiddenFieldsCheck proposal = LoginProviderHiddenFieldsCheck.builder()
        .fields(fields).loginProvider(loginProvider).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public LoginProviderCached listCachedVisibles(Interaction prev,
      LoginProviderVisibilityFilter filter, LoginProviderCursor cursor) {
    LoginProviderFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<LoginProvider> listVisibles(Interaction prev, LoginProviderVisibilityFilter filter,
      LoginProviderCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<LoginProvider> listVisiblesForUpdate(Interaction prev,
      LoginProviderVisibilityFilter filter, LoginProviderCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public LoginProviderCached retrieveCachedVisible(Interaction prev, String uid) {
    LoginProviderCursor cursor = LoginProviderCursor.builder().limit(1).build();
    LoginProviderFilter visibleFilter =
        applyPreVisibilityFilter(prev, LoginProviderVisibilityFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<LoginProvider> list =
          retrieveVisible(prev, uid).<List<LoginProvider>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<LoginProvider> retrieveVisible(Interaction prev, String uid) {
    LoginProviderFilter filter =
        applyPreVisibilityFilter(prev, LoginProviderVisibilityFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<LoginProvider> retrieveVisibleForUpdate(Interaction prev, String uid) {
    LoginProviderFilter filter =
        applyPreVisibilityFilter(prev, LoginProviderVisibilityFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private LoginProviderFilter applyPreVisibilityFilter(Interaction prev,
      LoginProviderVisibilityFilter filter) {
    LoginProviderVisibilityCheck proposal =
        LoginProviderVisibilityCheck.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    LoginProviderVisibilityFilter modified = proposal.getFilter();
    return LoginProviderFilter.builder().uid(modified.getUid().orElse(null))
        .uids(modified.getUids().stream().toList()).search(modified.getSearch().orElse(null))
        .name(modified.getName().orElse(null)).tenant(modified.getTenant().orElse(null))
        .tenants(modified.getTenants())
        .tenantTenantAccesible(modified.getTenantTenantAccesible().orElse(null)).build();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param loginProviderRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, LoginProvider loginProviderRef) {
    LoginProviderAccesibleCheck proposal = LoginProviderAccesibleCheck.builder().visible(true)
        .entity(loginProviderRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<LoginProvider> queryItem(Interaction prev, String uid,
      LoginProviderFilter filter) {
    return loginProviderReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<LoginProvider> queryItemForUpdate(Interaction prev, String uid,
      LoginProviderFilter filter) {
    return loginProviderWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<LoginProvider> queryItems(Interaction prev, LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    List<LoginProvider> list = new ArrayList<>();
    Iterator<LoginProvider> slide = loginProviderReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<LoginProvider> queryItemsForUpdate(Interaction prev, LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    List<LoginProvider> list = new ArrayList<>();
    Iterator<LoginProvider> slide = loginProviderWriteRepositoryGateway
        .slideForUpdate(filter, cursor).slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private LoginProviderChangeSet visiblesReferences(Interaction prev,
      LoginProviderChangeSet source) {
    source.getTenant().map(TenantVO::getTenantUid).ifPresent(tenant -> {
      boolean visible = tenantsVisibility.checkVisibility(prev, tenant);
      if (!visible) {
        throw new NotFoundException("No tenant - " + tenant);
      }
    });
    return source;
  }
}
