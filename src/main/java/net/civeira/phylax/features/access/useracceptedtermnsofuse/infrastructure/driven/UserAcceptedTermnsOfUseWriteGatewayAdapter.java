package net.civeira.phylax.features.access.useracceptedtermnsofuse.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.UserAcceptedTermnsOfUse;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.UserAcceptedTermnsOfUseRef;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.gateway.UserAcceptedTermnsOfUseCursor;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.gateway.UserAcceptedTermnsOfUseFilter;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.domain.gateway.UserAcceptedTermnsOfUseWriteRepositoryGateway;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.infrastructure.event.UserAcceptedTermnsOfUseEventDispacher;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.infrastructure.repository.UserAcceptedTermnsOfUseRepository;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAcceptedTermnsOfUseWriteGatewayAdapter
    implements UserAcceptedTermnsOfUseWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final UserAcceptedTermnsOfUseEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final UserAcceptedTermnsOfUseRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(UserAcceptedTermnsOfUseFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public UserAcceptedTermnsOfUse create(UserAcceptedTermnsOfUse entity) {
    UserAcceptedTermnsOfUse result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public UserAcceptedTermnsOfUse create(UserAcceptedTermnsOfUse entity,
      Predicate<UserAcceptedTermnsOfUse> verifier) {
    UserAcceptedTermnsOfUse result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(UserAcceptedTermnsOfUse entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<UserAcceptedTermnsOfUseFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<UserAcceptedTermnsOfUse> findForUpdate(UserAcceptedTermnsOfUseFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<UserAcceptedTermnsOfUse> listForUpdate(UserAcceptedTermnsOfUseFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public UserAcceptedTermnsOfUse resolveForUpdate(UserAcceptedTermnsOfUseRef reference) {
    return repository.resolveForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<UserAcceptedTermnsOfUse> retrieveForUpdate(String uid,
      Optional<UserAcceptedTermnsOfUseFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<UserAcceptedTermnsOfUse> slideForUpdate(UserAcceptedTermnsOfUseFilter filter,
      UserAcceptedTermnsOfUseCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public UserAcceptedTermnsOfUse update(UserAcceptedTermnsOfUseRef reference,
      UserAcceptedTermnsOfUse entity) {
    UserAcceptedTermnsOfUse result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
