package net.civeira.phylax.features.access.relyingparty.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.relyingparty.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyCursor;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyFilter;

class RelyingPartySlider extends Slider<RelyingParty> {

  /**
   * @autogenerated SlideGenerator
   */
  private final RelyingPartyCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final RelyingPartyFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<RelyingPartyFilter, RelyingPartyCursor, Iterator<RelyingParty>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  RelyingPartySlider(final Iterator<RelyingParty> multi, final int limit,
      final BiFunction<RelyingPartyFilter, RelyingPartyCursor, Iterator<RelyingParty>> gateway,
      final RelyingPartyFilter filter, final RelyingPartyCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param relyingPartys
   * @param limit
   * @return
   */
  @Override
  public Iterator<RelyingParty> next(List<RelyingParty> relyingPartys, int limit) {
    RelyingParty last = relyingPartys.get(relyingPartys.size() - 1);
    RelyingPartyCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
