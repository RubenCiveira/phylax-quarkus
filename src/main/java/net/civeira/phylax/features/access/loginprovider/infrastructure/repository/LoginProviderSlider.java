package net.civeira.phylax.features.access.loginprovider.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.loginprovider.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderCursor;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderFilter;

class LoginProviderSlider extends Slider<LoginProvider> {

  /**
   * @autogenerated SlideGenerator
   */
  private final LoginProviderCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final LoginProviderFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<LoginProviderFilter, LoginProviderCursor, Iterator<LoginProvider>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  LoginProviderSlider(final Iterator<LoginProvider> multi, final int limit,
      final BiFunction<LoginProviderFilter, LoginProviderCursor, Iterator<LoginProvider>> gateway,
      final LoginProviderFilter filter, final LoginProviderCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param loginProviders
   * @param limit
   * @return
   */
  @Override
  public Iterator<LoginProvider> next(List<LoginProvider> loginProviders, int limit) {
    LoginProvider last = loginProviders.get(loginProviders.size() - 1);
    LoginProviderCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
