package net.civeira.phylax.features.access.loginprovider.application.usecase.delete;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.loginprovider.application.visibility.LoginProviderVisibilityFilter;
import net.civeira.phylax.features.access.loginprovider.application.visibility.LoginProvidersVisibility;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderRef;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCacheGateway;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProviderDeleteUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final LoginProviderCacheGateway cache;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<LoginProviderDeleteAllowDecision> deleteAllowEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<LoginProviderDeleteCheck> deleteCheckEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final LoginProviderWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final LoginProvidersVisibility visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final LoginProviderRef reference) {
    LoginProviderDeleteAllowDecision base = LoginProviderDeleteAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    LoginProviderDeleteAllowDecision base = LoginProviderDeleteAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final LoginProviderCheckBatchDeleteStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   */
  public void delete(final Interaction query, final LoginProviderRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    LoginProvider original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    delete(query, original);
    flush();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator delete(final Interaction query,
      final LoginProviderDeleteFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    LoginProviderVisibilityFilter filterOnVisibles = LoginProviderVisibilityFilter.builder()
        .uid(filter.getUid().orElse(null)).uids(filter.getUids().stream().toList())
        .search(filter.getSearch().orElse(null)).name(filter.getName().orElse(null))
        .tenant(filter.getTenant().orElse(null)).tenants(filter.getTenants())
        .tenantTenantAccesible(filter.getTenantTenantAccesible().orElse(null)).build();
    LoginProviderDeleteAllInBatchCommand command = LoginProviderDeleteAllInBatchCommand.builder()
        .interaction(query).filter(filterOnVisibles).build();
    return batch.start(query.getActor().getName().orElse("-"), Duration.ofHours(6), ExecutorPlan
        .<LoginProviderDeleteAllInBatchCommand>builder().params(command).name("delete-color")
        .executor(
            ExecutorByDeferSteps.<LoginProvider, LoginProvider, LoginProviderDeleteAllInBatchCommand, LoginProvidersInBatchExecutor.LoginProviderPaginableBatch>builder()
                .initializer(LoginProvidersInBatchExecutor.class)
                .counter(LoginProvidersInBatchExecutor.class)
                .descriptor(LoginProvidersInBatchExecutor.class)
                .reader(LoginProvidersInBatchExecutor.class)
                .processor(LoginProvidersInBatchExecutor.class)
                .writer(LoginProvidersInBatchExecutor.class)
                .finalizer(LoginProvidersInBatchExecutor.class).build())
        .build());
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param interaction
   * @param original
   */
  void delete(final Interaction interaction, final LoginProvider original) {
    LoginProviderDeleteCheck proposal =
        LoginProviderDeleteCheck.builder().reference(original).interaction(interaction).build();
    deleteCheckEmitter.fire(proposal);
    LoginProvider clean = original.delete();
    gateway.delete(clean);
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
