package net.civeira.phylax.features.access.useraccesstemporalcode.valueobject;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing la caducidad del c√≥digo de recuperacion of userAccessTemporalCode.
 * <p>
 * This class ensures that the recovery code expiration is a {@code String} and encapsulates its
 * validation and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design)
 * principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class RecoveryCodeExpirationVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param recoveryCodeExpiration
   * @return An empty instance
   */
  public static RecoveryCodeExpirationVO from(final OffsetDateTime recoveryCodeExpiration) {
    return tryFrom(recoveryCodeExpiration);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static RecoveryCodeExpirationVO nullValue() {
    return new RecoveryCodeExpirationVO(null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param recoveryCodeExpiration
   * @return An empty instance
   */
  public static RecoveryCodeExpirationVO tryFrom(final Object recoveryCodeExpiration) {
    ConstraintFailList list = new ConstraintFailList();
    RecoveryCodeExpirationVO result = tryFrom(recoveryCodeExpiration, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param recoveryCodeExpiration temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> RecoveryCodeExpirationVO tryFrom(
      final Object recoveryCodeExpiration, final T fails) {
    if (null == recoveryCodeExpiration) {
      return new RecoveryCodeExpirationVO(null);
    } else if (recoveryCodeExpiration instanceof OffsetDateTime castedRecoveryCodeExpiration) {
      return new RecoveryCodeExpirationVO(castedRecoveryCodeExpiration);
    } else {
      fails.add(new ConstraintFail("wrong-type", "recoveryCodeExpiration",
          recoveryCodeExpiration.getClass(),
          "A OffsetDateTime type is expected for recoveryCodeExpiration"));
      return null;
    }
  }

  /**
   * The actual value of the name.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final OffsetDateTime value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<OffsetDateTime> getValue() {
    return Optional.ofNullable(value);
  }

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
