package net.civeira.phylax.features.access.user.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.features.access.user.application.usecase.delete.UserCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.user.application.usecase.delete.UserDeleteFilter;
import net.civeira.phylax.features.access.user.application.usecase.delete.UserDeleteUsecase;
import net.civeira.phylax.features.access.user.domain.UserReference;

@RequiredArgsConstructor
@RequestScoped
public class UserDeleteController {

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final UserDeleteUsecase delete;

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uids
   * @param search
   * @param root
   * @param name
   * @param tenant
   * @param tenants
   * @return
   */
  public Response userApiBatchDelete(final List<String> uids, final String search,
      final Boolean root, final String name, final String tenant, final List<String> tenants) {
    UserDeleteFilter.UserDeleteFilterBuilder filterBuilder = UserDeleteFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.root(root);
    filterBuilder = filterBuilder.name(name);
    if (null != tenant) {
      filterBuilder = filterBuilder.tenant(TenantReference.of(tenant));
    }
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    UserDeleteFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param batchId
   * @return
   */
  public Response userApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(
        UserCheckBatchDeleteStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response userApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), UserReference.of(uid));
    return Response.noContent().build();
  }
}
