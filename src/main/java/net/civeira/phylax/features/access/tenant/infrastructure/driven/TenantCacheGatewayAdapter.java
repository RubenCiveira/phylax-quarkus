package net.civeira.phylax.features.access.tenant.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.tenant.domain.Tenant;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCacheGateway;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCached;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCursor;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class TenantCacheGatewayAdapter implements TenantCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("tenant")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param tenant
   */
  @Override
  public void remove(final Tenant tenant) {
    log.trace("Invalidating tenant cache due to the removal of {}", tenant);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<TenantCached> retrieve(final TenantFilter filter, final TenantCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at tenant cache for the key {}", key);
    return cache.<String, TenantCached>get(key, k -> null)
        .map(cached -> Optional.ofNullable(cached)).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param tenants
   * @return
   */
  public TenantCached store(final TenantFilter filter, final TenantCursor cursor,
      final List<Tenant> tenants) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache
        .<String, TenantCached>get(key,
            k -> TenantCached.builder().since(OffsetDateTime.now()).value(tenants).build())
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param tenant
   */
  @Override
  public void update(final Tenant tenant) {
    log.trace("Invalidating tenant cache due to the update of {}", tenant);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final TenantFilter filter, final TenantCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
