package net.civeira.phylax.features.access.useraccesstemporalcode.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCode;
import net.civeira.phylax.features.access.useraccesstemporalcode.UserAccessTemporalCodeRef;
import net.civeira.phylax.features.access.useraccesstemporalcode.gateway.UserAccessTemporalCodeWriteRepositoryGateway;
import net.civeira.phylax.features.access.useraccesstemporalcode.infrastructure.event.UserAccessTemporalCodeEventDispacher;
import net.civeira.phylax.features.access.useraccesstemporalcode.infrastructure.repository.UserAccessTemporalCodeRepository;
import net.civeira.phylax.features.access.useraccesstemporalcode.query.UserAccessTemporalCodeCursor;
import net.civeira.phylax.features.access.useraccesstemporalcode.query.UserAccessTemporalCodeFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAccessTemporalCodeWriteGatewayAdapter
    implements UserAccessTemporalCodeWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final UserAccessTemporalCodeEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final UserAccessTemporalCodeRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(UserAccessTemporalCodeFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public UserAccessTemporalCode create(UserAccessTemporalCode entity) {
    UserAccessTemporalCode result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public UserAccessTemporalCode create(UserAccessTemporalCode entity,
      Predicate<UserAccessTemporalCode> verifier) {
    UserAccessTemporalCode result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(UserAccessTemporalCode entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public UserAccessTemporalCode enrichForUpdate(UserAccessTemporalCodeRef reference) {
    return repository.enrichForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<UserAccessTemporalCodeFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<UserAccessTemporalCode> findForUpdate(UserAccessTemporalCodeFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<UserAccessTemporalCode> listForUpdate(UserAccessTemporalCodeFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<UserAccessTemporalCode> retrieveForUpdate(String uid,
      Optional<UserAccessTemporalCodeFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<UserAccessTemporalCode> slideForUpdate(UserAccessTemporalCodeFilter filter,
      UserAccessTemporalCodeCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public UserAccessTemporalCode update(UserAccessTemporalCodeRef reference,
      UserAccessTemporalCode entity) {
    UserAccessTemporalCode result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
