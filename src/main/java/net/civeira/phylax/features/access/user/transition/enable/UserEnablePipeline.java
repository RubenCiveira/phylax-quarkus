package net.civeira.phylax.features.access.user.transition.enable;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.user.User;
import net.civeira.phylax.features.access.user.transition.UserChangeProposal;

@ApplicationScoped
@RequiredArgsConstructor
public class UserEnablePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<UserEnableStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param original
   * @param last
   * @return
   */
  public User enable(final User original, final Function<UserChangeProposal, User> last) {
    Function<UserEnableTransition, User> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.apply(t.getData());
    };
    List<UserEnableStep> reversed = new ArrayList<>(steps.stream().toList()).reversed();
    Function<UserEnableTransition, User> pipeline = reversed.stream().reduce(finalHandler,
        (next, step) -> transition -> step.enable(transition, next), (f1, f2) -> f1);
    return pipeline.apply(UserEnableTransition.builder().data(new UserChangeProposal(original))
        .original(original).build());
  }
}
