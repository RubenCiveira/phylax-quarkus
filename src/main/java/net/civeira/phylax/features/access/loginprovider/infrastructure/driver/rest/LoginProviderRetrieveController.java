package net.civeira.phylax.features.access.loginprovider.infrastructure.driver.rest;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.loginprovider.application.usecase.retrieve.LoginProviderRetrieveProjection;
import net.civeira.phylax.features.access.loginprovider.application.usecase.retrieve.LoginProviderRetrieveUsecase;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderReference;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderSourceOptions;
import net.civeira.phylax.generated.openapi.model.LoginProviderApiDto;
import net.civeira.phylax.generated.openapi.model.LoginProviderApiDto.SourceEnum;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;

@RequiredArgsConstructor
@RequestScoped
public class LoginProviderRetrieveController {

  /**
   * @autogenerated RetrieveControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated RetrieveControllerGenerator
   */
  private final LoginProviderRetrieveUsecase retrieve;

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param uid
   * @return
   */
  public Response loginProviderApiRetrieve(final String uid) {
    LoginProviderRetrieveProjection retrieved =
        retrieve.retrieve(currentRequest.interaction(), LoginProviderReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param domainEnum
   * @return
   */
  private SourceEnum sourceEnumToApi(LoginProviderSourceOptions domainEnum) {
    SourceEnum result;
    if (domainEnum == LoginProviderSourceOptions.GOOGLE) {
      result = SourceEnum.GOOGLE;
    } else if (domainEnum == LoginProviderSourceOptions.GITHUB) {
      result = SourceEnum.GITHUB;
    } else if (domainEnum == LoginProviderSourceOptions.SAML) {
      result = SourceEnum.SAML;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param dto
   * @return
   */
  private LoginProviderApiDto toApiModel(LoginProviderRetrieveProjection dto) {
    LoginProviderApiDto loginProviderApiDto = new LoginProviderApiDto();
    loginProviderApiDto.setUid(dto.getUid());
    loginProviderApiDto.setTenant(new TenantApiRef().$ref(dto.getTenantReference()));
    loginProviderApiDto.setName(dto.getName());
    loginProviderApiDto.setSource(sourceEnumToApi(dto.getSource()));
    loginProviderApiDto.setDisabled(dto.getDisabled());
    loginProviderApiDto.setDirectAccess(dto.getDirectAccess());
    loginProviderApiDto.setPublicKey(dto.getPublicKey());
    loginProviderApiDto.setPrivateKey(dto.getPrivateKey());
    loginProviderApiDto.setCertificate(dto.getCertificate());
    String metadata = dto.getMetadata();
    if (null != metadata) {
      loginProviderApiDto.setMetadata(currentRequest.getPublicHost()
          + "/api/access/login-providers/" + dto.getUidOrDefault("-") + "/metadata");
    }
    loginProviderApiDto.setUsersEnabledByDefault(dto.getUsersEnabledByDefault());
    loginProviderApiDto.setVersion(dto.getVersion());
    return loginProviderApiDto;
  }
}
