package net.civeira.phylax.features.access.relyingparty.application.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyChangeSet;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyRef;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyCacheGateway;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyCached;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyCursor;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyFilter;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyReadRepositoryGateway;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class RelyingPartysVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartyCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyVisibilityCheck> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyFixedFieldsCheck> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyAccesibleCheck> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyHiddenFieldsCheck> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<RelyingPartyEntityEnrichment> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartyReadRepositoryGateway relyingPartyReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartyWriteRepositoryGateway relyingPartyWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids
        .size() == listVisibles(prev, RelyingPartyVisibilityFilter.builder().uids(uids).build(),
            RelyingPartyCursor.builder().build()).size();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public RelyingPartyChangeSet copyWithFixed(Interaction prev, RelyingParty original,
      RelyingPartyChangeSet source) {
    fieldsToFix(prev, original).forEach(source::unset);
    RelyingPartyEntityEnrichment proposal = RelyingPartyEntityEnrichment.builder().dto(source)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public RelyingPartyChangeSet copyWithFixed(Interaction prev, RelyingPartyChangeSet source) {
    fieldsToFix(prev).forEach(source::unset);
    RelyingPartyEntityEnrichment proposal =
        RelyingPartyEntityEnrichment.builder().dto(source).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param relyingParty
   * @return The input dto with hidden values
   */
  public RelyingPartyVisibleProjection copyWithHidden(Interaction prev, RelyingParty relyingParty) {
    RelyingPartyVisibleProjection target = new RelyingPartyVisibleProjection(relyingParty);
    fieldsToHide(prev, relyingParty).forEach(target::unset);
    return target;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, RelyingPartyVisibilityFilter filter) {
    return relyingPartyReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    RelyingPartyFixedFieldsCheck proposal =
        RelyingPartyFixedFieldsCheck.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param relyingParty
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, RelyingPartyRef relyingParty) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, relyingParty));
    RelyingPartyFixedFieldsCheck proposal = RelyingPartyFixedFieldsCheck.builder().fields(fields)
        .relyingParty(relyingParty).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    RelyingPartyHiddenFieldsCheck proposal =
        RelyingPartyHiddenFieldsCheck.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param relyingParty
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, RelyingPartyRef relyingParty) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    RelyingPartyHiddenFieldsCheck proposal = RelyingPartyHiddenFieldsCheck.builder().fields(fields)
        .relyingParty(relyingParty).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public RelyingPartyCached listCachedVisibles(Interaction prev,
      RelyingPartyVisibilityFilter filter, RelyingPartyCursor cursor) {
    RelyingPartyFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<RelyingParty> listVisibles(Interaction prev, RelyingPartyVisibilityFilter filter,
      RelyingPartyCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<RelyingParty> listVisiblesForUpdate(Interaction prev,
      RelyingPartyVisibilityFilter filter, RelyingPartyCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public RelyingPartyCached retrieveCachedVisible(Interaction prev, String uid) {
    RelyingPartyCursor cursor = RelyingPartyCursor.builder().limit(1).build();
    RelyingPartyFilter visibleFilter =
        applyPreVisibilityFilter(prev, RelyingPartyVisibilityFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<RelyingParty> list =
          retrieveVisible(prev, uid).<List<RelyingParty>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<RelyingParty> retrieveVisible(Interaction prev, String uid) {
    RelyingPartyFilter filter =
        applyPreVisibilityFilter(prev, RelyingPartyVisibilityFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<RelyingParty> retrieveVisibleForUpdate(Interaction prev, String uid) {
    RelyingPartyFilter filter =
        applyPreVisibilityFilter(prev, RelyingPartyVisibilityFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private RelyingPartyFilter applyPreVisibilityFilter(Interaction prev,
      RelyingPartyVisibilityFilter filter) {
    RelyingPartyVisibilityCheck proposal =
        RelyingPartyVisibilityCheck.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    RelyingPartyVisibilityFilter modified = proposal.getFilter();
    return RelyingPartyFilter.builder().uid(modified.getUid().orElse(null))
        .uids(modified.getUids().stream().toList()).search(modified.getSearch().orElse(null))
        .apiKey(modified.getApiKey().orElse(null)).code(modified.getCode().orElse(null)).build();
  }

  /**
   * Retrieve the list of fields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param relyingPartyRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, RelyingParty relyingPartyRef) {
    RelyingPartyAccesibleCheck proposal = RelyingPartyAccesibleCheck.builder().visible(true)
        .entity(relyingPartyRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<RelyingParty> queryItem(Interaction prev, String uid,
      RelyingPartyFilter filter) {
    return relyingPartyReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<RelyingParty> queryItemForUpdate(Interaction prev, String uid,
      RelyingPartyFilter filter) {
    return relyingPartyWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<RelyingParty> queryItems(Interaction prev, RelyingPartyFilter filter,
      RelyingPartyCursor cursor) {
    List<RelyingParty> list = new ArrayList<>();
    Iterator<RelyingParty> slide = relyingPartyReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<RelyingParty> queryItemsForUpdate(Interaction prev, RelyingPartyFilter filter,
      RelyingPartyCursor cursor) {
    List<RelyingParty> list = new ArrayList<>();
    Iterator<RelyingParty> slide = relyingPartyWriteRepositoryGateway.slideForUpdate(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }
}
