package net.civeira.phylax.features.access.trustedclient.valueobject;

import java.util.Optional;

import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing if the user is not delegated, the phrasse to identify of trustedClient.
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class SecretOauthVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param secretOauth
   * @return An empty instance
   */
  public static SecretOauthVO fromCyphered(final String secretOauth) {
    return new SecretOauthVO(true, secretOauth, null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param secretOauth
   * @return An empty instance
   */
  public static SecretOauthVO fromPlain(final String secretOauth) {
    return tryFrom(secretOauth);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static SecretOauthVO nullValue() {
    return new SecretOauthVO(false, null, null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param secretOauth
   * @return An empty instance
   */
  public static SecretOauthVO tryFrom(final Object secretOauth) {
    ConstraintFailList list = new ConstraintFailList();
    SecretOauthVO result = tryFrom(secretOauth, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param secretOauth temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> SecretOauthVO tryFrom(final Object secretOauth,
      final T fails) {
    if (null == secretOauth) {
      return new SecretOauthVO(false, null, null);
    } else if (secretOauth instanceof String castedSecretOauth) {
      return new SecretOauthVO(false, null, castedSecretOauth);
    } else {
      fails.add(new ConstraintFail("wrong-type", "secretOauth", secretOauth.getClass(),
          "A String type is expected for secretOauth"));
      return null;
    }
  }

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Getter(AccessLevel.PRIVATE)
  private final boolean cyphered;

  /**
   * If the user is not delegated, the phrasse to identify
   *
   * @autogenerated ValueObjectGenerator
   */
  @Getter(AccessLevel.PRIVATE)
  private final String cypheredValue;

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Getter(AccessLevel.PRIVATE)
  private final String plainValue;

  /**
   * @autogenerated ValueObjectGenerator
   * @param cypher
   * @return
   */
  public Optional<String> getCypheredValue(final AesCipherService cypher) {
    return cyphered ? Optional.ofNullable(cypheredValue)
        : Optional.ofNullable(plainValue).map(text -> cypher.encryptForAll(text));
  }

  /**
   * @autogenerated ValueObjectGenerator
   * @param cypher
   * @return
   */
  public Optional<String> getPlainValue(final AesCipherService cypher) {
    return cyphered
        ? Optional.ofNullable(cypheredValue)
            .map(text -> cypher.decryptForAll(text)
                .orElseThrow(() -> new IllegalStateException("Unable to decrypt")))
        : Optional.ofNullable(plainValue);
  }

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  public String toString() {
    return cyphered ? "[cyphered:" + cypheredValue + "]" : ofuscatePlain();
  }

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  private String ofuscatePlain() {
    return null == plainValue ? "null"
        : "[plain:" + (plainValue.length() > 10 ? plainValue.substring(0, 5) + "*****" : "*****")
            + "]";
  }
}
