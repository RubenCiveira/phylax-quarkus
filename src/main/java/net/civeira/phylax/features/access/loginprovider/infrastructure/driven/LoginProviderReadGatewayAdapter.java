package net.civeira.phylax.features.access.loginprovider.infrastructure.driven;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderRef;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderCursor;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderFilter;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderReadRepositoryGateway;
import net.civeira.phylax.features.access.loginprovider.infrastructure.repository.LoginProviderRepository;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProviderReadGatewayAdapter implements LoginProviderReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final LoginProviderRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(LoginProviderFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<LoginProviderFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<LoginProvider> find(LoginProviderFilter filter) {
    return repository.find(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<LoginProvider> list(LoginProviderFilter filter) {
    return repository.list(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public LoginProvider resolve(LoginProviderRef reference) {
    return repository.resolve(reference);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<LoginProvider> retrieve(String uid, Optional<LoginProviderFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<LoginProvider> slide(LoginProviderFilter filter, LoginProviderCursor cursor) {
    return repository.slide(filter, cursor);
  }
}
