package net.civeira.phylax.features.access.securitydomain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.securitydomain.command.SecurityDomainChangeProposal;
import net.civeira.phylax.features.access.securitydomain.command.SecurityDomainWriteAttributes;
import net.civeira.phylax.features.access.securitydomain.event.SecurityDomainCreateEvent;
import net.civeira.phylax.features.access.securitydomain.event.SecurityDomainDeleteEvent;
import net.civeira.phylax.features.access.securitydomain.event.SecurityDomainDisableEvent;
import net.civeira.phylax.features.access.securitydomain.event.SecurityDomainEnableEvent;
import net.civeira.phylax.features.access.securitydomain.event.SecurityDomainEvent;
import net.civeira.phylax.features.access.securitydomain.event.SecurityDomainUpdateEvent;
import net.civeira.phylax.features.access.securitydomain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.LevelVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.ManageAllVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.NameVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.ReadAllVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.UidVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.valueobject.WriteAllVO;

@AllArgsConstructor
@Getter
@ToString
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class SecurityDomain implements SecurityDomainRef {

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public static SecurityDomain create(final SecurityDomainWriteAttributes attributes) {
    SecurityDomainChangeProposal proposal = new SecurityDomainChangeProposal(attributes);
    proposal.setEnabled(false);
    SecurityDomain instance = new SecurityDomain(proposal, Optional.empty());
    instance.addEvent(SecurityDomainCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public static Set<String> readonlyFields() {
    return Set.of("enabled");
  }

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private EnabledVO enabled = EnabledVO.nullValue();

  /**
   * The user inherit level, and can view only domain with his level or lower
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private LevelVO level;

  /**
   * Allow to write on every scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private ManageAllVO manageAll = ManageAllVO.nullValue();

  /**
   * El name de security domain
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private NameVO name;

  /**
   * Allow to read on every scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private ReadAllVO readAll = ReadAllVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private List<SecurityDomainEvent> recordedEvents = List.of();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UidVO uid;

  /**
   * Campo con el n√∫mero de version de security domain para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VersionVO version = VersionVO.nullValue();

  /**
   * Allow to write on every scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private WriteAllVO writeAll = WriteAllVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private SecurityDomain(final SecurityDomainWriteAttributes attribute,
      final Optional<SecurityDomain> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uid = attribute.getUid().orElse(previous.map(SecurityDomain::getUid).orElse(null));
    this.name = attribute.getName().orElse(previous.map(SecurityDomain::getName).orElse(null));
    this.level = attribute.getLevel().orElse(previous.map(SecurityDomain::getLevel).orElse(null));
    this.readAll = attribute.getReadAll()
        .orElse(previous.map(SecurityDomain::getReadAll).orElseGet(ReadAllVO::nullValue));
    this.writeAll = attribute.getWriteAll()
        .orElse(previous.map(SecurityDomain::getWriteAll).orElseGet(WriteAllVO::nullValue));
    this.manageAll = attribute.getManageAll()
        .orElse(previous.map(SecurityDomain::getManageAll).orElseGet(ManageAllVO::nullValue));
    this.enabled = attribute.getEnabled()
        .orElse(previous.map(SecurityDomain::getEnabled).orElseGet(EnabledVO::nullValue));
    this.version = attribute.getVersion()
        .orElse(previous.map(SecurityDomain::getVersion).orElseGet(VersionVO::nullValue));
    if (null == uid) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == name) {
      list.add(new ConstraintFail("REQUIRED", "name", null));
    }
    if (null == level) {
      list.add(new ConstraintFail("REQUIRED", "level", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(SecurityDomain::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityDomain delete() {
    SecurityDomain instance = this;
    instance.addEvent(SecurityDomainDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityDomain disable() {
    SecurityDomainChangeProposal attr = new SecurityDomainChangeProposal(this);
    attr.setEnabled(false);
    SecurityDomain instance = new SecurityDomain(attr, Optional.of(this));
    instance.addEvent(SecurityDomainDisableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityDomain enable() {
    SecurityDomainChangeProposal attr = new SecurityDomainChangeProposal(this);
    attr.setEnabled(true);
    SecurityDomain instance = new SecurityDomain(attr, Optional.of(this));
    instance.addEvent(SecurityDomainEnableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer getLevelValue() {
    return getLevel().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getNameValue() {
    return getName().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  @Override
  public String getUidValue() {
    return this.uid.getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public boolean isEnabled() {
    return Boolean.TRUE.equals(getEnabled().getValue().orElse(Boolean.FALSE));
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public boolean isManageAll() {
    return Boolean.TRUE.equals(getManageAll().getValue().orElse(Boolean.FALSE));
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public boolean isReadAll() {
    return Boolean.TRUE.equals(getReadAll().getValue().orElse(Boolean.FALSE));
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public boolean isWriteAll() {
    return Boolean.TRUE.equals(getWriteAll().getValue().orElse(Boolean.FALSE));
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityDomain nextVersion() {
    return SecurityDomain.builder().uid(this.uid).name(this.name).level(this.level)
        .readAll(this.readAll).writeAll(this.writeAll).manageAll(this.manageAll)
        .enabled(this.enabled).version(VersionVO.from(this.version() + 1)).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public SecurityDomain update(final SecurityDomainWriteAttributes attributes) {
    SecurityDomainChangeProposal proposal = new SecurityDomainChangeProposal(attributes);
    proposal.unsetEnabled();
    SecurityDomain instance = new SecurityDomain(proposal, Optional.of(this));
    instance.addEvent(SecurityDomainUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer version() {
    return this.getVersion().getValue().orElse(0);
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final SecurityDomainEvent event) {
    List<SecurityDomainEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
