package net.civeira.phylax.features.access.trustedclient.application.service.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.trustedclient.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.TrustedClientFacade;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.application.projection.TrustedClientStateProyection;
import net.civeira.phylax.features.access.trustedclient.application.request.TrustedClientStateChange;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientCacheGateway;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientCached;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientReadRepositoryGateway;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientWriteRepositoryGateway;
import net.civeira.phylax.features.access.trustedclient.query.TrustedClientCursor;
import net.civeira.phylax.features.access.trustedclient.query.TrustedClientFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class TrustedClientsVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TrustedClientFacade aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TrustedClientCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TrustedClientFilterProposal> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TrustedClientFixedFieldsProposal> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TrustedClientVisibleContentProposal> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TrustedClientHiddenFieldsProposal> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<TrustedClientPresetProposal> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TrustedClientReadRepositoryGateway trustedClientReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TrustedClientWriteRepositoryGateway trustedClientWriteRepositoryGateway;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, TrustedClientFilter.builder().uids(uids).build(),
        TrustedClientCursor.builder().build()).size();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public TrustedClientStateChange copyWithFixed(Interaction prev, TrustedClient original,
      TrustedClientStateChange source) {
    fieldsToFix(prev, original).forEach(source::unset);
    TrustedClientPresetProposal proposal = TrustedClientPresetProposal.builder().dto(source)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public TrustedClientStateChange copyWithFixed(Interaction prev, TrustedClientStateChange source) {
    fieldsToFix(prev).forEach(source::unset);
    TrustedClientPresetProposal proposal =
        TrustedClientPresetProposal.builder().dto(source).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param trustedClient
   * @return The input dto with hidden values
   */
  public TrustedClientStateProyection copyWithHidden(Interaction prev,
      TrustedClient trustedClient) {
    TrustedClientStateProyection target = new TrustedClientStateProyection(trustedClient);
    fieldsToHide(prev, trustedClient).forEach(target::unset);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, TrustedClientFilter filter) {
    return trustedClientReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.readonlyFields());
    TrustedClientFixedFieldsProposal proposal =
        TrustedClientFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param trustedClient
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, TrustedClientRef trustedClient) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, trustedClient));
    fields.addAll(aggregate.readonlyFields());
    TrustedClientFixedFieldsProposal proposal = TrustedClientFixedFieldsProposal.builder()
        .fields(fields).trustedClient(trustedClient).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    TrustedClientHiddenFieldsProposal proposal =
        TrustedClientHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param trustedClient
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, TrustedClientRef trustedClient) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    TrustedClientHiddenFieldsProposal proposal = TrustedClientHiddenFieldsProposal.builder()
        .fields(fields).trustedClient(trustedClient).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public TrustedClientCached listCachedVisibles(Interaction prev, TrustedClientFilter filter,
      TrustedClientCursor cursor) {
    TrustedClientFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<TrustedClient> listVisibles(Interaction prev, TrustedClientFilter filter,
      TrustedClientCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<TrustedClient> listVisiblesForUpdate(Interaction prev, TrustedClientFilter filter,
      TrustedClientCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public TrustedClientCached retrieveCachedVisible(Interaction prev, String uid) {
    TrustedClientCursor cursor = TrustedClientCursor.builder().limit(1).build();
    TrustedClientFilter visibleFilter =
        applyPreVisibilityFilter(prev, TrustedClientFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<TrustedClient> list =
          retrieveVisible(prev, uid).<List<TrustedClient>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<TrustedClient> retrieveVisible(Interaction prev, String uid) {
    TrustedClientFilter filter =
        applyPreVisibilityFilter(prev, TrustedClientFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<TrustedClient> retrieveVisibleForUpdate(Interaction prev, String uid) {
    TrustedClientFilter filter =
        applyPreVisibilityFilter(prev, TrustedClientFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private TrustedClientFilter applyPreVisibilityFilter(Interaction prev,
      TrustedClientFilter filter) {
    TrustedClientFilterProposal proposal =
        TrustedClientFilterProposal.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    return proposal.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param trustedClientRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, TrustedClient trustedClientRef) {
    TrustedClientVisibleContentProposal proposal = TrustedClientVisibleContentProposal.builder()
        .visible(true).entity(trustedClientRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<TrustedClient> queryItem(Interaction prev, String uid,
      TrustedClientFilter filter) {
    return trustedClientReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<TrustedClient> queryItemForUpdate(Interaction prev, String uid,
      TrustedClientFilter filter) {
    return trustedClientWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<TrustedClient> queryItems(Interaction prev, TrustedClientFilter filter,
      TrustedClientCursor cursor) {
    List<TrustedClient> list = new ArrayList<>();
    Iterator<TrustedClient> slide = trustedClientReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<TrustedClient> queryItemsForUpdate(Interaction prev, TrustedClientFilter filter,
      TrustedClientCursor cursor) {
    List<TrustedClient> list = new ArrayList<>();
    Iterator<TrustedClient> slide = trustedClientWriteRepositoryGateway
        .slideForUpdate(filter, cursor).slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }
}
