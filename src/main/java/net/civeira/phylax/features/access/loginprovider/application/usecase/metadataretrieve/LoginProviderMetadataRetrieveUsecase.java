package net.civeira.phylax.features.access.loginprovider.application.usecase.metadataretrieve;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.infrastructure.store.BinaryContent;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.loginprovider.application.visibility.LoginProvidersVisibility;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.domain.LoginProviderRef;
import net.civeira.phylax.features.access.loginprovider.domain.gateway.LoginProviderMetadataUploadGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProviderMetadataRetrieveUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<LoginProviderMetadataRetrieveAllowDecision> retrieveAllowEmitter;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final LoginProviderMetadataUploadGateway store;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final LoginProvidersVisibility visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final LoginProviderRef reference) {
    LoginProviderMetadataRetrieveAllowDecision base = LoginProviderMetadataRetrieveAllowDecision
        .builder().detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    retrieveAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    LoginProviderMetadataRetrieveAllowDecision base = LoginProviderMetadataRetrieveAllowDecision
        .builder().detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    retrieveAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return The slide with some values
   */
  public BinaryContent read(final Interaction query, final LoginProviderRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    LoginProvider entity = visibility.retrieveVisible(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    return store.readMetadata(entity).orElseThrow(() -> new NotFoundException(""));
  }
}
