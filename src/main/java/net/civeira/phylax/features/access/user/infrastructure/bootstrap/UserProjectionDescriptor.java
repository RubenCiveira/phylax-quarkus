package net.civeira.phylax.features.access.user.infrastructure.bootstrap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.UnaryOperator;

import jakarta.enterprise.context.ApplicationScoped;
import net.civeira.phylax.common.infrastructure.projection.ExecutionAggregation;
import net.civeira.phylax.common.infrastructure.projection.ExecutionNode;
import net.civeira.phylax.common.infrastructure.projection.ParamKind;
import net.civeira.phylax.common.infrastructure.projection.ProjectionDescriptor;
import net.civeira.phylax.common.infrastructure.projection.RelationshipDefinition;
import net.civeira.phylax.features.access.tenant.infrastructure.bootstrap.TenantProjectionDescriptor.TenantExecutionPlanner;
import net.civeira.phylax.features.access.useridentity.infrastructure.bootstrap.UserIdentityProjectionDescriptor.UserIdentityExecutionPlanner;

@ApplicationScoped
public class UserProjectionDescriptor implements ProjectionDescriptor {

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   */
  public static class UserExecutionPlanner {

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    private final List<ExecutionAggregation> aggregation = new ArrayList<>();

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    String prefix;

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    public UserExecutionPlanner() {
      this.prefix = "";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param prefix
     */
    public UserExecutionPlanner(final String prefix) {
      this.prefix = prefix + ".";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public List<ExecutionAggregation> build() {
      return aggregation;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withBlockedUntil() {
      return withBlockedUntil(prefix + "blockedUntil");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withBlockedUntil(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("blockedUntil").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withEmail() {
      return withEmail(prefix + "email");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withEmail(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("email").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withEnabled() {
      return withEnabled(prefix + "enabled");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withEnabled(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("enabled").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withLanguage() {
      return withLanguage(prefix + "language");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withLanguage(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("language").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withName() {
      return withName(prefix + "name");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withName(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("name").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withPassword() {
      return withPassword(prefix + "password");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withPassword(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("password").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withProvider() {
      return withProvider(prefix + "provider");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withProvider(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("provider").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withSecondFactorSeed() {
      return withSecondFactorSeed(prefix + "secondFactorSeed");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withSecondFactorSeed(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("secondFactorSeed").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withTemporalPassword() {
      return withTemporalPassword(prefix + "temporalPassword");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withTemporalPassword(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("temporalPassword").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withTenant() {
      return withTenant(prefix + "tenant", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withTenant(final String alias) {
      return withTenant(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public UserExecutionPlanner withTenant(final UnaryOperator<TenantExecutionPlanner> callback) {
      return withTenant(prefix + "tenant", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public UserExecutionPlanner withTenant(final String alias,
        final UnaryOperator<TenantExecutionPlanner> callback) {
      aggregation
          .add(ExecutionAggregation.builder().name("tenant").alias(alias)
              .selection(null != callback
                  ? callback.apply(new TenantExecutionPlanner(prefix + alias)).build()
                  : List.of())
              .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withUid() {
      return withUid(prefix + "uid");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withUid(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("uid").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withUseSecondFactors() {
      return withUseSecondFactors(prefix + "useSecondFactors");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withUseSecondFactors(final String alias) {
      aggregation.add(ExecutionAggregation.builder().name("useSecondFactors").alias(alias)
          .selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withUserIdentity() {
      return withUserIdentity(prefix + "userIdentity", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withUserIdentity(final String alias) {
      return withUserIdentity(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public UserExecutionPlanner withUserIdentity(
        final UnaryOperator<UserIdentityExecutionPlanner> callback) {
      return withUserIdentity(prefix + "userIdentity", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public UserExecutionPlanner withUserIdentity(final String alias,
        final UnaryOperator<UserIdentityExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("userIdentity").alias(alias)
          .selection(null != callback
              ? callback.apply(new UserIdentityExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public UserExecutionPlanner withVersion() {
      return withVersion(prefix + "version");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public UserExecutionPlanner withVersion(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("version").alias(alias).selection(List.of()).build());
      return this;
    }
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  @Override
  public List<ExecutionNode> baseNodes(final String baseServer) {
    Map<String, RelationshipDefinition> relations = relations(baseServer);
    return List.of(
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/users").method("GET")
            .list(true).params(Map.of()).relations(relations).build(),
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/users/{uid}").method("GET")
            .list(false).params(Map.of("uid", ParamKind.PATH)).relations(relations).build());
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  private Map<String, RelationshipDefinition> relations(final String baseServer) {
    return Map.of("tenant",
        RelationshipDefinition
            .builder().list(false).id("/api/access/tenants").url(baseServer + "/api/access/tenants")
            .method("GET").batchParam("uids").on("$ref").referenceField("uid").build(),
        "userIdentity",
        RelationshipDefinition.builder().list(true).id("/api/access/user-identities")
            .url(baseServer + "/api/access/user-identities").method("GET").batchParam("users")
            .referenceField("user").build());
  }
}
