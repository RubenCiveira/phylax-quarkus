package net.civeira.phylax.features.access.tenant.application.usecase.create;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenant.Tenant;
import net.civeira.phylax.features.access.tenant.TenantFacade;
import net.civeira.phylax.features.access.tenant.application.projection.TenantStateProyection;
import net.civeira.phylax.features.access.tenant.application.request.TenantStateChange;
import net.civeira.phylax.features.access.tenant.application.service.visibility.TenantsVisibility;
import net.civeira.phylax.features.access.tenant.gateway.TenantCacheGateway;
import net.civeira.phylax.features.access.tenant.gateway.TenantWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantCreateUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantCacheGateway cache;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantAllowCreateProposal> createAllowEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantCreateProposal> createProposalEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantCreateEvent> createdEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantFacade facade;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantsVisibility visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TenantAllowCreateProposal proposal = TenantAllowCreateProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    createAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param input
   * @return The slide with some values
   */
  public TenantStateProyection create(final Interaction query, final TenantStateChange input) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TenantStateChange filled = visibility.copyWithFixed(query, input);
    TenantCreateProposal proposal =
        TenantCreateProposal.builder().interaction(query).dto(filled).build();
    createProposalEmitter.fire(proposal);
    TenantStateChange dto = proposal.getDto();
    Tenant entity = facade.create(dto);
    Tenant created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUidValue()));
    cache.update(created);
    TenantCreateEvent event =
        TenantCreateEvent.builder().payload(created).interaction(query).build();
    createdEmitter.fire(event);
    return visibility.copyWithHidden(query, event.getPayload());
  }
}
