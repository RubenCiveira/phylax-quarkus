package net.civeira.phylax.features.access.tenant.application.usecase.create;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenant.application.visibility.TenantsVisibility;
import net.civeira.phylax.features.access.tenant.domain.Tenant;
import net.civeira.phylax.features.access.tenant.domain.TenantChangeSet;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantCacheGateway;
import net.civeira.phylax.features.access.tenant.domain.gateway.TenantWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantCreateUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantCacheGateway cache;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantCreateAllowDecision> createAllowEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantCreateCheck> createCheckEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantCreateEnrich> createEnrichEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantsVisibility visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TenantCreateAllowDecision proposal = TenantCreateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    createAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param input
   * @return The slide with some values
   */
  public TenantCreateProjection create(final Interaction query, final TenantCreateInput input) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TenantCreateInput filled =
        TenantCreateInput.fromChangeSet(visibility.copyWithFixed(query, input.toChangeSet()));
    TenantCreateCheck check = TenantCreateCheck.builder().interaction(query).input(filled).build();
    createCheckEmitter.fire(check);
    TenantCreateEnrich proposal =
        TenantCreateEnrich.builder().interaction(query).input(filled).build();
    createEnrichEmitter.fire(proposal);
    TenantChangeSet dto = proposal.getInput().toChangeSet();
    Tenant entity = Tenant.create(dto);
    Tenant created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUid()));
    cache.update(created);
    return TenantCreateProjection.from(visibility.copyWithHidden(query, created));
  }
}
