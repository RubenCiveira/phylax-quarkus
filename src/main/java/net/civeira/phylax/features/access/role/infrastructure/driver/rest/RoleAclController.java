package net.civeira.phylax.features.access.role.infrastructure.driver.rest;

import java.util.ArrayList;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.role.application.usecase.create.RoleCreateUsecase;
import net.civeira.phylax.features.access.role.application.usecase.delete.RoleDeleteUsecase;
import net.civeira.phylax.features.access.role.application.usecase.list.RoleListUsecase;
import net.civeira.phylax.features.access.role.application.usecase.retrieve.RoleRetrieveUsecase;
import net.civeira.phylax.features.access.role.application.usecase.update.RoleUpdateUsecase;
import net.civeira.phylax.features.access.role.application.visibility.RolesVisibility;
import net.civeira.phylax.generated.openapi.api.RoleAclApi;
import net.civeira.phylax.generated.openapi.model.CommonAllow;
import net.civeira.phylax.generated.openapi.model.RoleAclFields;
import net.civeira.phylax.generated.openapi.model.RoleAclGenericAllows;
import net.civeira.phylax.generated.openapi.model.RoleAclSpecificAllows;
import net.civeira.phylax.generated.openapi.model.RoleGenericAcl;
import net.civeira.phylax.generated.openapi.model.RoleSpecificAcl;

@RequiredArgsConstructor
public class RoleAclController implements RoleAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RoleCreateUsecase create;

  /**
   * Role
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RoleDeleteUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RoleListUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RoleRetrieveUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RoleUpdateUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RolesVisibility visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response roleApiContextualAcl(final String uid) {
    Interaction interaction = currentRequest.interaction();
    RoleSpecificAcl response = new RoleSpecificAcl();
    response.setAllows(new RoleAclSpecificAllows());
    response.setFields(new RoleAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response roleApiGenericAcl() {
    Interaction interaction = currentRequest.interaction();
    RoleGenericAcl response = new RoleGenericAcl();
    response.setAllows(new RoleAclGenericAllows());
    response.setFields(new RoleAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    listAllows(response, interaction);
    createAllows(response, interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void createAllows(final RoleGenericAcl response, final Interaction query) {
    Allow detail = create.allow(query);
    response.getAllows()
        .setCreate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final RoleGenericAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final RoleSpecificAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void fixedFields(final RoleAclFields response, final Interaction query) {
    visibility.fieldsToFix(query).forEach(field -> response.getNoEditables().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void hiddenFields(final RoleAclFields response, final Interaction query) {
    visibility.fieldsToHide(query).forEach(field -> response.getNoVisibles().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void listAllows(final RoleGenericAcl response, final Interaction query) {
    Allow detail = list.allow(query);
    response.getAllows()
        .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final RoleGenericAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final RoleSpecificAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final RoleGenericAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final RoleSpecificAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }
}
