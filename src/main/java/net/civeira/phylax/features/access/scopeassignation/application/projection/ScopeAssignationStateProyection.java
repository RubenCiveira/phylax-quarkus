package net.civeira.phylax.features.access.scopeassignation.application.projection;

import java.util.Optional;

import net.civeira.phylax.features.access.scopeassignation.ScopeAssignation;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainRef;
import net.civeira.phylax.features.access.securityscope.SecurityScopeRef;

public class ScopeAssignationStateProyection {

  /**
   * El security domain de scope assignation
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<SecurityDomainRef> securityDomain = Optional.empty();

  /**
   * El security scope de scope assignation
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<SecurityScopeRef> securityScope = Optional.empty();

  /**
   * El uid de scope assignation
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de scope assignation para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public ScopeAssignationStateProyection(final ScopeAssignation entity) {
    uid = Optional.of(entity.getUid().getValue());
    securityDomain = Optional.of(entity.getSecurityDomain().getValue());
    securityScope = Optional.of(entity.getSecurityScope().getValue());
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<SecurityDomainRef> getSecurityDomain() {
    return securityDomain;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<SecurityScopeRef> getSecurityScope() {
    return securityScope;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public ScopeAssignationStateProyection setSecurityDomain(
      final Optional<SecurityDomainRef> value) {
    this.securityDomain = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public ScopeAssignationStateProyection setSecurityScope(final Optional<SecurityScopeRef> value) {
    this.securityScope = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public ScopeAssignationStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public ScopeAssignationStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("securityDomain".equals(field)) {
      this.unsetSecurityDomain();
    }
    if ("securityScope".equals(field)) {
      this.unsetSecurityScope();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public ScopeAssignationStateProyection unsetSecurityDomain() {
    this.securityDomain = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public ScopeAssignationStateProyection unsetSecurityScope() {
    this.securityScope = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public ScopeAssignationStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public ScopeAssignationStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
