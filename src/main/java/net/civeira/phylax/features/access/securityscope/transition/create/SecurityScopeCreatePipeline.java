package net.civeira.phylax.features.access.securityscope.transition.create;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.securityscope.SecurityScope;
import net.civeira.phylax.features.access.securityscope.command.SecurityScopeWriteAttributes;
import net.civeira.phylax.features.access.securityscope.transition.SecurityScopeChangeProposal;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityScopeCreatePipeline {

  /**
   * @autogenerated UpdateEntityRuleGenerator
   */
  private final Instance<SecurityScopeCreateStep> steps;

  /**
   * @autogenerated UpdateEntityRuleGenerator
   * @param attributes
   * @param last
   * @return
   */
  public SecurityScope create(final SecurityScopeWriteAttributes attributes,
      final Function<SecurityScopeChangeProposal, SecurityScope> last) {
    Function<SecurityScopeCreateTransition, SecurityScope> finalHandler = t -> {
      if (t.hasErrors()) {
        throw t.asConstraintException();
      }
      return last.apply(t.getData());
    };
    List<SecurityScopeCreateStep> reversed = new ArrayList<>(steps.stream().toList()).reversed();
    Function<SecurityScopeCreateTransition, SecurityScope> pipeline = reversed.stream().reduce(
        finalHandler, (next, step) -> transition -> step.create(transition, next), (f1, f2) -> f1);
    return pipeline.apply(SecurityScopeCreateTransition.builder()
        .data(new SecurityScopeChangeProposal(attributes)).build());
  }
}
