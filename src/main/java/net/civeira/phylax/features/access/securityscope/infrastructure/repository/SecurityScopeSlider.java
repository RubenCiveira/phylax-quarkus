package net.civeira.phylax.features.access.securityscope.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.securityscope.SecurityScope;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeCursor;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeFilter;

class SecurityScopeSlider extends Slider<SecurityScope> {

  /**
   * @autogenerated SlideGenerator
   */
  private final SecurityScopeCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final SecurityScopeFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<SecurityScopeFilter, SecurityScopeCursor, Iterator<SecurityScope>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  SecurityScopeSlider(final Iterator<SecurityScope> multi, final int limit,
      final BiFunction<SecurityScopeFilter, SecurityScopeCursor, Iterator<SecurityScope>> gateway,
      final SecurityScopeFilter filter, final SecurityScopeCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param securityScopes
   * @param limit
   * @return
   */
  @Override
  public Iterator<SecurityScope> next(List<SecurityScope> securityScopes, int limit) {
    SecurityScope last = securityScopes.get(securityScopes.size() - 1);
    SecurityScopeCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
