package net.civeira.phylax.features.access.trustedclient.application.usecase.create;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.trustedclient.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.TrustedClientFacade;
import net.civeira.phylax.features.access.trustedclient.application.projection.TrustedClientStateProyection;
import net.civeira.phylax.features.access.trustedclient.application.request.TrustedClientStateChange;
import net.civeira.phylax.features.access.trustedclient.application.service.visibility.TrustedClientsVisibility;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientCacheGateway;
import net.civeira.phylax.features.access.trustedclient.gateway.TrustedClientWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TrustedClientCreateUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TrustedClientCacheGateway cache;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TrustedClientAllowCreateProposal> createAllowEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TrustedClientCreateProposal> createProposalEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TrustedClientCreateEvent> createdEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TrustedClientFacade facade;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TrustedClientWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TrustedClientsVisibility visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TrustedClientAllowCreateProposal proposal = TrustedClientAllowCreateProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    createAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param input
   * @return The slide with some values
   */
  public TrustedClientStateProyection create(final Interaction query,
      final TrustedClientStateChange input) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TrustedClientStateChange filled = visibility.copyWithFixed(query, input);
    TrustedClientCreateProposal proposal =
        TrustedClientCreateProposal.builder().interaction(query).dto(filled).build();
    createProposalEmitter.fire(proposal);
    TrustedClientStateChange dto = proposal.getDto();
    TrustedClient entity = facade.create(dto);
    TrustedClient created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUidValue()));
    cache.update(created);
    TrustedClientCreateEvent event =
        TrustedClientCreateEvent.builder().payload(created).interaction(query).build();
    createdEmitter.fire(event);
    return visibility.copyWithHidden(query, event.getPayload());
  }
}
