package net.civeira.phylax.features.access.tenant.infrastructure.driver.rest;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.features.access.tenant.application.usecase.create.TenantCreateInput;
import net.civeira.phylax.features.access.tenant.application.usecase.create.TenantCreateProjection;
import net.civeira.phylax.features.access.tenant.application.usecase.create.TenantCreateUsecase;
import net.civeira.phylax.features.access.tenant.domain.RelingParties;
import net.civeira.phylax.features.access.tenant.domain.RelingParties.RelingPartiesBuilder;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients.TrustedClientsBuilder;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;
import net.civeira.phylax.generated.openapi.model.RelingPartiesApiDto;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.TenantApiDto;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;
import net.civeira.phylax.generated.openapi.model.TrustedClientsApiDto;

@RequiredArgsConstructor
@RequestScoped
public class TenantCreateController {

  /**
   * @autogenerated CreateControllerGenerator
   */
  private final TenantCreateUsecase create;

  /**
   * @autogenerated CreateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated CreateControllerGenerator
   * @param tenant
   * @return
   */
  @Transactional
  public Response tenantApiCreate(TenantApiDto tenant) {
    TenantCreateProjection created =
        create.create(currentRequest.interaction(), toDomainModel(tenant));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param dto
   * @return
   */
  private TenantApiDto toApiModel(TenantCreateProjection dto) {
    TenantApiDto tenantApiDto = new TenantApiDto();
    tenantApiDto.setUid(dto.getUid());
    tenantApiDto.setName(dto.getName());
    tenantApiDto.setDomain(dto.getDomain());
    tenantApiDto.setEnabled(dto.getEnabled());
    tenantApiDto.setAccessToAllApplications(dto.getAccessToAllApplications());
    tenantApiDto.setTrustedClients(
        dto.getTrustedClients().stream().map(this::toApiModelTrustedClients).toList());
    tenantApiDto.setRelingParties(
        dto.getRelingParties().stream().map(this::toApiModelRelingParties).toList());
    tenantApiDto.setVersion(dto.getVersion());
    return tenantApiDto;
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param dto
   * @return
   */
  private RelingPartiesApiDto toApiModelRelingParties(RelingParties dto) {
    RelingPartiesApiDto relingPartiesApiDto = new RelingPartiesApiDto();
    relingPartiesApiDto.setUid(dto.getUid());
    relingPartiesApiDto.setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyUid()));
    relingPartiesApiDto.setVersion(dto.getVersion().orElse(null));
    return relingPartiesApiDto;
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param dto
   * @return
   */
  private TrustedClientsApiDto toApiModelTrustedClients(TrustedClients dto) {
    TrustedClientsApiDto trustedClientsApiDto = new TrustedClientsApiDto();
    trustedClientsApiDto.setUid(dto.getUid());
    trustedClientsApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientUid()));
    trustedClientsApiDto.setVersion(dto.getVersion().orElse(null));
    return trustedClientsApiDto;
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param tenantApiDto
   * @return
   */
  private TenantCreateInput toDomainModel(TenantApiDto tenantApiDto) {
    TenantCreateInput dto = new TenantCreateInput();
    if (null != tenantApiDto.getUid()) {
      dto.setUid(tenantApiDto.getUid());
    }
    if (null != tenantApiDto.getName()) {
      dto.setName(tenantApiDto.getName());
    }
    if (null != tenantApiDto.getDomain()) {
      dto.setDomain(tenantApiDto.getDomain());
    }
    if (null != tenantApiDto.getEnabled()) {
      dto.setEnabled(tenantApiDto.getEnabled());
    }
    if (null != tenantApiDto.getAccessToAllApplications()) {
      dto.setAccessToAllApplications(tenantApiDto.getAccessToAllApplications());
    }
    if (null != tenantApiDto.getTrustedClients()) {
      dto.setTrustedClients(tenantApiDto.getTrustedClients().stream()
          .map(this::toDomainModelTrustedClients).toList());
    }
    if (null != tenantApiDto.getRelingParties()) {
      dto.setRelingParties(
          tenantApiDto.getRelingParties().stream().map(this::toDomainModelRelingParties).toList());
    }
    if (null != tenantApiDto.getVersion()) {
      dto.setVersion(tenantApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param relingPartiesApiDto
   * @return
   */
  private RelingParties toDomainModelRelingParties(RelingPartiesApiDto relingPartiesApiDto) {
    RelingPartiesBuilder builder = RelingParties.builder();
    if (null != relingPartiesApiDto.getUid()) {
      builder = builder.uid(relingPartiesApiDto.getUid());
    }
    if (null != relingPartiesApiDto.getRelyingParty()) {
      builder = builder
          .relyingParty(RelyingPartyReference.of(relingPartiesApiDto.getRelyingParty().get$Ref()));
    }
    if (null != relingPartiesApiDto.getVersion()) {
      builder = builder.version(relingPartiesApiDto.getVersion());
    }
    return builder.build();
  }

  /**
   * @autogenerated CreateControllerGenerator
   * @param trustedClientsApiDto
   * @return
   */
  private TrustedClients toDomainModelTrustedClients(TrustedClientsApiDto trustedClientsApiDto) {
    TrustedClientsBuilder builder = TrustedClients.builder();
    if (null != trustedClientsApiDto.getUid()) {
      builder = builder.uid(trustedClientsApiDto.getUid());
    }
    if (null != trustedClientsApiDto.getTrustedClient()) {
      builder = builder.trustedClient(
          TrustedClientReference.of(trustedClientsApiDto.getTrustedClient().get$Ref()));
    }
    if (null != trustedClientsApiDto.getVersion()) {
      builder = builder.version(trustedClientsApiDto.getVersion());
    }
    return builder.build();
  }
}
