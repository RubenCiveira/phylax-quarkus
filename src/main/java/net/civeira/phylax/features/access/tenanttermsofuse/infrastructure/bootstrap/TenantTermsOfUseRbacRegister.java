package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.bootstrap;

import java.util.List;

import io.quarkus.runtime.StartupEvent;
import jakarta.annotation.Priority;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Rbac;
import net.civeira.phylax.common.security.scope.FieldDescription;
import net.civeira.phylax.common.security.scope.Kind;
import net.civeira.phylax.common.security.scope.ResourceDescription;
import net.civeira.phylax.common.security.scope.ScopeDescription;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantTermsOfUseRbacRegister {

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private static final ResourceDescription RESOURCE = ResourceDescription.builder()
      .name("tenant-terms-of-use")
      .description(
          "Defines legal or informational documents (Terms of Use) that users must accept to use services within a tenant's scope.")
      .build();

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private final Rbac rbac;

  /**
   * @autogenerated RegisterGeneratorGenerator
   * @param ev
   */
  void registerResource(@Observes @Priority(10) final StartupEvent ev) {
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.READ).name("list")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve").description("list").build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("create")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("update")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("delete")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve-upload-attached")
            .description("An optional file attachment (e.g., PDF or signed document).")
            .required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.WRITE).name("temp-upload-attached")
            .description("An optional file attachment (e.g., PDF or signed document).")
            .required(List.of()).build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("uid")
        .description("A uid string to identify the entity").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("tenant")
        .description("The tenant this Terms of Use document belongs to.").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("text")
        .description("The content of the Terms of Use document.").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("attached")
        .description("An optional file attachment (e.g., PDF or signed document).").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("activationDate")
        .description("Date when the Terms of Use become active.").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("version").description(
        "Campo con el n√∫mero de version de tenant terms of use para controlar bloqueos optimistas")
        .build());
  }
}
