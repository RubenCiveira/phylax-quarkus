package net.civeira.phylax.features.access.role.infrastructure.driver.rest;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.role.application.usecase.retrieve.RoleRetrieveProjection;
import net.civeira.phylax.features.access.role.application.usecase.retrieve.RoleRetrieveUsecase;
import net.civeira.phylax.features.access.role.domain.Domains;
import net.civeira.phylax.features.access.role.domain.RoleReference;
import net.civeira.phylax.generated.openapi.model.DomainsApiDto;
import net.civeira.phylax.generated.openapi.model.RoleApiDto;
import net.civeira.phylax.generated.openapi.model.SecurityDomainApiRef;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;

@RequiredArgsConstructor
public class RoleRetrieveController {

  /**
   * @autogenerated RetrieveControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated RetrieveControllerGenerator
   */
  private final RoleRetrieveUsecase retrieve;

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param uid
   * @return
   */
  public Response roleApiRetrieve(final String uid) {
    RoleRetrieveProjection retrieved =
        retrieve.retrieve(currentRequest.interaction(), RoleReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param dto
   * @return
   */
  private RoleApiDto toApiModel(RoleRetrieveProjection dto) {
    RoleApiDto roleApiDto = new RoleApiDto();
    roleApiDto.setUid(dto.getUid());
    roleApiDto.setName(dto.getName());
    roleApiDto.setTenant(new TenantApiRef().$ref(dto.getTenantReference()));
    roleApiDto.setDomains(dto.getDomains().stream().map(this::toApiModelDomains).toList());
    roleApiDto.setVersion(dto.getVersion());
    return roleApiDto;
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param dto
   * @return
   */
  private DomainsApiDto toApiModelDomains(Domains dto) {
    DomainsApiDto domainsApiDto = new DomainsApiDto();
    domainsApiDto.setUid(dto.getUid());
    domainsApiDto.setSecurityDomain(new SecurityDomainApiRef().$ref(dto.getSecurityDomainUid()));
    domainsApiDto.setVersion(dto.getVersion().orElse(null));
    return domainsApiDto;
  }
}
