package net.civeira.phylax.features.access.tenant.application.projection;

import java.util.List;
import java.util.Optional;

import net.civeira.phylax.features.access.tenant.RelingParties;
import net.civeira.phylax.features.access.tenant.Tenant;
import net.civeira.phylax.features.access.tenant.TrustedClients;

public class TenantStateProyection {

  /**
   * Defines if users from this tenant can access all parties and clients, or only those explicitly
   * assigned.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> accessToAllApplications = Optional.empty();

  /**
   * A domain suffix to identify the account
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> domain = Optional.empty();

  /**
   * The users of a non enabled tenant could not make login on the system
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> enabled = Optional.empty();

  /**
   * The name to identify the account.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> name = Optional.empty();

  /**
   * A list of relying parties (services or applications) associated with this tenant.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<List<RelingParties>> relingParties = Optional.empty();

  /**
   * A list of OAuth clients marked as trusted for this tenant.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<List<TrustedClients>> trustedClients = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public TenantStateProyection(final Tenant entity) {
    uid = Optional.of(entity.getUid().getValue());
    name = Optional.of(entity.getName().getValue());
    domain = Optional.of(entity.getDomain().getValue());
    enabled = Optional.of(entity.getEnabled().getValue());
    accessToAllApplications = entity.getAccessToAllApplications().getValue();
    trustedClients = Optional.of(entity.getTrustedClients().getValue());
    relingParties = Optional.of(entity.getRelingParties().getValue());
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getAccessToAllApplications() {
    return accessToAllApplications;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getDomain() {
    return domain;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getEnabled() {
    return enabled;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getName() {
    return name;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<List<RelingParties>> getRelingParties() {
    return relingParties;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<List<TrustedClients>> getTrustedClients() {
    return trustedClients;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantStateProyection setAccessToAllApplications(final Optional<Boolean> value) {
    this.accessToAllApplications = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantStateProyection setDomain(final Optional<String> value) {
    this.domain = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantStateProyection setEnabled(final Optional<Boolean> value) {
    this.enabled = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantStateProyection setName(final Optional<String> value) {
    this.name = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantStateProyection setRelingParties(final Optional<List<RelingParties>> value) {
    this.relingParties = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantStateProyection setTrustedClients(final Optional<List<TrustedClients>> value) {
    this.trustedClients = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("domain".equals(field)) {
      this.unsetDomain();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("accessToAllApplications".equals(field)) {
      this.unsetAccessToAllApplications();
    }
    if ("trustedClients".equals(field)) {
      this.unsetTrustedClients();
    }
    if ("relingParties".equals(field)) {
      this.unsetRelingParties();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantStateProyection unsetAccessToAllApplications() {
    this.accessToAllApplications = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantStateProyection unsetDomain() {
    this.domain = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantStateProyection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantStateProyection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantStateProyection unsetRelingParties() {
    this.relingParties = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantStateProyection unsetTrustedClients() {
    this.trustedClients = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
