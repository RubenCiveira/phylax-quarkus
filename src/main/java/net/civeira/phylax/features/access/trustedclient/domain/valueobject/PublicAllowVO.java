package net.civeira.phylax.features.access.trustedclient.domain.valueobject;

import lombok.EqualsAndHashCode;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing if true, users can use these client to access with public code flow of
 * trustedClient.
 * <p>
 * This class ensures that the public allow is a non-null {@code String} and encapsulates its
 * validation and formatting logic. It is immutable and compliant with DDD (Domain-Driven Design)
 * principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@RequiredArgsConstructor
@EqualsAndHashCode
public class PublicAllowVO {

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param publicAllow
   * @return An empty instance
   */
  public static PublicAllowVO from(final Boolean publicAllow) {
    return tryFrom(publicAllow);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param publicAllow
   * @return An empty instance
   */
  public static PublicAllowVO tryFrom(final Object publicAllow) {
    ConstraintFailList list = new ConstraintFailList();
    PublicAllowVO result = tryFrom(publicAllow, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param publicAllow temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> PublicAllowVO tryFrom(final Object publicAllow,
      final T fails) {
    if (null == publicAllow) {
      fails.add(new ConstraintFail("not-null", "publicAllow", null, "Cant be null"));
      return null;
    } else if (publicAllow instanceof Boolean castedPublicAllow) {
      return new PublicAllowVO(castedPublicAllow);
    } else {
      fails.add(new ConstraintFail("wrong-type", "publicAllow", publicAllow.getClass(),
          "A Boolean type is expected for publicAllow"));
      return null;
    }
  }

  /**
   * The actual value of the name. * It is guaranteed to be a non-null String after successful
   * value.validation.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final Boolean value;

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Boolean isPublicAllow() {
    return Boolean.TRUE.equals(value);
  }

  /**
   * Returns a formatted string representation of the name.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
