package net.civeira.phylax.features.access.relyingparty.infrastructure.bootstrap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.UnaryOperator;

import jakarta.enterprise.context.ApplicationScoped;
import net.civeira.phylax.common.infrastructure.projection.ExecutionAggregation;
import net.civeira.phylax.common.infrastructure.projection.ExecutionNode;
import net.civeira.phylax.common.infrastructure.projection.ParamKind;
import net.civeira.phylax.common.infrastructure.projection.ProjectionDescriptor;
import net.civeira.phylax.common.infrastructure.projection.RelationshipDefinition;
import net.civeira.phylax.features.access.securityscope.infrastructure.bootstrap.SecurityScopeProjectionDescriptor.SecurityScopeExecutionPlanner;
import net.civeira.phylax.features.access.useridentity.infrastructure.bootstrap.UserIdentityProjectionDescriptor.UserIdentityExecutionPlanner;

@ApplicationScoped
public class RelyingPartyProjectionDescriptor implements ProjectionDescriptor {

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   */
  public static class RelyingPartyExecutionPlanner {

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    private final List<ExecutionAggregation> aggregation = new ArrayList<>();

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    String prefix;

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     */
    public RelyingPartyExecutionPlanner() {
      this.prefix = "";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param prefix
     */
    public RelyingPartyExecutionPlanner(final String prefix) {
      this.prefix = prefix + ".";
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public List<ExecutionAggregation> build() {
      return aggregation;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public RelyingPartyExecutionPlanner withApiKey() {
      return withApiKey(prefix + "apiKey");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public RelyingPartyExecutionPlanner withApiKey(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("apiKey").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public RelyingPartyExecutionPlanner withCode() {
      return withCode(prefix + "code");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public RelyingPartyExecutionPlanner withCode(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("code").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public RelyingPartyExecutionPlanner withEnabled() {
      return withEnabled(prefix + "enabled");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public RelyingPartyExecutionPlanner withEnabled(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("enabled").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public RelyingPartyExecutionPlanner withSecurityScope() {
      return withSecurityScope(prefix + "securityScope", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public RelyingPartyExecutionPlanner withSecurityScope(final String alias) {
      return withSecurityScope(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public RelyingPartyExecutionPlanner withSecurityScope(
        final UnaryOperator<SecurityScopeExecutionPlanner> callback) {
      return withSecurityScope(prefix + "securityScope", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public RelyingPartyExecutionPlanner withSecurityScope(final String alias,
        final UnaryOperator<SecurityScopeExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("securityScope").alias(alias)
          .selection(null != callback
              ? callback.apply(new SecurityScopeExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public RelyingPartyExecutionPlanner withUid() {
      return withUid(prefix + "uid");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public RelyingPartyExecutionPlanner withUid(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("uid").alias(alias).selection(List.of()).build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public RelyingPartyExecutionPlanner withUserIdentity() {
      return withUserIdentity(prefix + "userIdentity", null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public RelyingPartyExecutionPlanner withUserIdentity(final String alias) {
      return withUserIdentity(alias, null);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param callback
     * @return
     */
    public RelyingPartyExecutionPlanner withUserIdentity(
        final UnaryOperator<UserIdentityExecutionPlanner> callback) {
      return withUserIdentity(prefix + "userIdentity", callback);
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @param callback
     * @return
     */
    public RelyingPartyExecutionPlanner withUserIdentity(final String alias,
        final UnaryOperator<UserIdentityExecutionPlanner> callback) {
      aggregation.add(ExecutionAggregation.builder().name("userIdentity").alias(alias)
          .selection(null != callback
              ? callback.apply(new UserIdentityExecutionPlanner(prefix + alias)).build()
              : List.of())
          .build());
      return this;
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @return
     */
    public RelyingPartyExecutionPlanner withVersion() {
      return withVersion(prefix + "version");
    }

    /**
     * @autogenerated ProjectionDescriptorGeneratorGenerator
     * @param alias
     * @return
     */
    public RelyingPartyExecutionPlanner withVersion(final String alias) {
      aggregation.add(
          ExecutionAggregation.builder().name("version").alias(alias).selection(List.of()).build());
      return this;
    }
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  @Override
  public List<ExecutionNode> baseNodes(final String baseServer) {
    Map<String, RelationshipDefinition> relations = relations(baseServer);
    return List.of(
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/relying-parties")
            .method("GET").list(true).params(Map.of()).relations(relations).build(),
        ExecutionNode.builder().server(baseServer).endpoint("/api/access/relying-parties/{uid}")
            .method("GET").list(false).params(Map.of("uid", ParamKind.PATH)).relations(relations)
            .build());
  }

  /**
   * @autogenerated ProjectionDescriptorGeneratorGenerator
   * @param baseServer
   * @return
   */
  private Map<String, RelationshipDefinition> relations(final String baseServer) {
    return Map.of(
        "userIdentity", RelationshipDefinition.builder().list(true)
            .id("/api/access/user-identities").url(baseServer + "/api/access/user-identities")
            .method("GET").batchParam("relying-partys").referenceField("relying-party").build(),
        "securityScope",
        RelationshipDefinition.builder().list(true).id("/api/access/security-scopes")
            .url(baseServer + "/api/access/security-scopes").method("GET")
            .batchParam("relying-partys").referenceField("relying-party").build());
  }
}
