package net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.list;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.tenant.domain.TenantRef;
import net.civeira.phylax.features.access.tenanttermsofuse.application.visibility.TenantTermsOfUseVisibleProjection;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.ActivationDateVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.AttachedVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.TextVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold tenant terms of use attribute values
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class TenantTermsOfUseListProjection {

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated ListProjectionGenerator
   * @param visible The entity who provide values.
   * @return
   */
  public static TenantTermsOfUseListProjection from(
      final TenantTermsOfUseVisibleProjection visible) {
    TenantTermsOfUseListProjection instance = new TenantTermsOfUseListProjection();
    instance.uidValue = visible.getUid();
    instance.tenantValue = visible.getTenant();
    instance.textValue = visible.getText();
    instance.attachedValue = visible.getAttached();
    instance.activationDateValue = visible.getActivationDate();
    instance.versionValue = visible.getVersion();
    return instance;
  }

  /**
   * Date when the Terms of Use become active.
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<ActivationDateVO> activationDateValue;

  /**
   * An optional file attachment (e.g., PDF or signed document).
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<AttachedVO> attachedValue;

  /**
   * The tenant this Terms of Use document belongs to.
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<TenantVO> tenantValue;

  /**
   * The content of the Terms of Use document.
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<TextVO> textValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<UidVO> uidValue;

  /**
   * Campo con el n√∫mero de version de tenant terms of use para controlar bloqueos optimistas
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<VersionVO> versionValue;

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated ListProjectionGenerator
   * @param entity The entity who provide values.
   */
  public TenantTermsOfUseListProjection(final TenantTermsOfUse entity) {
    uidValue = Optional.of(entity.getUidValue());
    tenantValue = Optional.of(entity.getTenantValue());
    textValue = Optional.of(entity.getTextValue());
    attachedValue = Optional.of(entity.getAttachedValue());
    activationDateValue = Optional.of(entity.getActivationDateValue());
    versionValue = Optional.of(entity.getVersionValue());
  }

  /**
   * Inform for a possible change propolsal in ActivationDate
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for ActivationDate, otherwise the value for
   *         ActivationDate
   */
  public OffsetDateTime getActivationDate() {
    return getActivationDateOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in ActivationDate
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for ActivationDate, otherwise the value for
   *         ActivationDate
   */
  public OffsetDateTime getActivationDateOrDefault(final OffsetDateTime orDefault) {
    return activationDateValue.flatMap(ActivationDateVO::getActivationDate).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Attached
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Attached, otherwise the value for Attached
   */
  public String getAttached() {
    return getAttachedOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Attached
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Attached, otherwise the value for Attached
   */
  public String getAttachedOrDefault(final String orDefault) {
    return attachedValue.flatMap(AttachedVO::getAttached).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public TenantRef getTenant() {
    return tenantValue.map(TenantVO::getTenant).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public String getTenantReference() {
    return getTenantReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Tenant
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for Tenant, otherwise the value for Tenant
   */
  public String getTenantReferenceOrDefault(final String orDefault) {
    return tenantValue.map(TenantVO::getTenant).map(TenantRef::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Text
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Text, otherwise the value for Text
   */
  public String getText() {
    return getTextOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Text
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Text, otherwise the value for Text
   */
  public String getTextOrDefault(final String orDefault) {
    return textValue.map(TextVO::getText).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUid() {
    return getUidOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUidOrDefault(final String orDefault) {
    return uidValue.map(UidVO::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersion() {
    return getVersionOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersionOrDefault(final Integer orDefault) {
    return versionValue.flatMap(VersionVO::getVersion).orElse(orDefault);
  }
}
