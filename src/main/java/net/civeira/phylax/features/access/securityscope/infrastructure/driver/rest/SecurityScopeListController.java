package net.civeira.phylax.features.access.securityscope.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.features.access.securityscope.application.usecase.list.SecurityScopeListCursor;
import net.civeira.phylax.features.access.securityscope.application.usecase.list.SecurityScopeListFilter;
import net.civeira.phylax.features.access.securityscope.application.usecase.list.SecurityScopeListProjection;
import net.civeira.phylax.features.access.securityscope.application.usecase.list.SecurityScopeListUsecase;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeKindOptions;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeVisibilityOptions;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto.KindEnum;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto.VisibilityEnum;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDtoList;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;

@RequiredArgsConstructor
public class SecurityScopeListController {

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String LIMIT_APPEND = "&limit=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String RELYING_PARTYS_APPEND = "&relying-partys=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String RELYING_PARTY_APPEND = "&relying-party=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String RESOURCE_APPEND = "&resource=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SINCE_APPEND = "&since-uid=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String TRUSTED_CLIENTS_APPEND = "&trusted-clients=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String TRUSTED_CLIENT_APPEND = "&trusted-client=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * SecurityScope
   *
   * @autogenerated ListControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ListControllerGenerator
   */
  private final SecurityScopeListUsecase list;

  /**
   * @autogenerated ListControllerGenerator
   * @param uids
   * @param search
   * @param resource
   * @param trustedClient
   * @param trustedClients
   * @param relyingParty
   * @param relyingPartys
   * @param limit
   * @param sinceUid
   * @return
   */
  public Response securityScopeApiList(final List<String> uids, final String search,
      final String resource, final String trustedClient, final List<String> trustedClients,
      final String relyingParty, final List<String> relyingPartys, final Integer limit,
      final String sinceUid) {
    SecurityScopeListFilter.SecurityScopeListFilterBuilder filterBuilder =
        SecurityScopeListFilter.builder();
    SecurityScopeListCursor.SecurityScopeListCursorBuilder cursorBuilder =
        SecurityScopeListCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.resource(resource);
    if (null != trustedClient) {
      filterBuilder = filterBuilder.trustedClient(TrustedClientReference.of(trustedClient));
    }
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    if (null != relyingParty) {
      filterBuilder = filterBuilder.relyingParty(RelyingPartyReference.of(relyingParty));
    }
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    SecurityScopeListFilter filter = filterBuilder.build();
    SecurityScopeListCursor cursor = cursorBuilder.build();
    List<SecurityScopeListProjection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "security-scope-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param domainEnum
   * @return
   */
  private KindEnum kindEnumToApi(SecurityScopeKindOptions domainEnum) {
    KindEnum result;
    if (domainEnum == SecurityScopeKindOptions.READ) {
      result = KindEnum.READ;
    } else if (domainEnum == SecurityScopeKindOptions.WRITE) {
      result = KindEnum.WRITE;
    } else if (domainEnum == SecurityScopeKindOptions.MANAGE) {
      result = KindEnum.MANAGE;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param dto
   * @return
   */
  private SecurityScopeApiDto toApiModel(SecurityScopeListProjection dto) {
    SecurityScopeApiDto securityScopeApiDto = new SecurityScopeApiDto();
    securityScopeApiDto.setUid(dto.getUid());
    securityScopeApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientReference()));
    securityScopeApiDto
        .setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyReference()));
    securityScopeApiDto.setResource(dto.getResource());
    securityScopeApiDto.setScope(dto.getScope());
    securityScopeApiDto.setEnabled(dto.getEnabled());
    securityScopeApiDto.setKind(kindEnumToApi(dto.getKind()));
    securityScopeApiDto.setVisibility(visibilityEnumToApi(dto.getVisibility()));
    securityScopeApiDto.setVersion(dto.getVersion());
    return securityScopeApiDto;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param securityScopes
   * @param filter
   * @param cursor
   * @return
   */
  private SecurityScopeApiDtoList toListApiModel(List<SecurityScopeListProjection> securityScopes,
      SecurityScopeListFilter filter, SecurityScopeListCursor cursor) {
    Optional<SecurityScopeListProjection> last = securityScopes.isEmpty() ? Optional.empty()
        : Optional.of(securityScopes.get(securityScopes.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getResource().ifPresent(filterResource -> {
      String resourceValue =
          URLEncoder.encode(String.valueOf(filterResource), StandardCharsets.UTF_8);
      self.append(RESOURCE_APPEND + resourceValue);
      next.append(RESOURCE_APPEND + resourceValue);
      first.append(RESOURCE_APPEND + resourceValue);
    });
    filter.getTrustedClient().ifPresent(filterTrustedClient -> {
      String trustedClientValue =
          URLEncoder.encode(String.valueOf(filterTrustedClient.getUid()), StandardCharsets.UTF_8);
      self.append(TRUSTED_CLIENT_APPEND + trustedClientValue);
      next.append(TRUSTED_CLIENT_APPEND + trustedClientValue);
      first.append(TRUSTED_CLIENT_APPEND + trustedClientValue);
    });
    if (!filter.getTrustedClients().isEmpty()) {
      String trustedClientsValue =
          URLEncoder.encode(String.join(",", filter.getTrustedClients()), StandardCharsets.UTF_8);
      self.append(TRUSTED_CLIENTS_APPEND + trustedClientsValue);
      next.append(TRUSTED_CLIENTS_APPEND + trustedClientsValue);
      first.append(TRUSTED_CLIENTS_APPEND + trustedClientsValue);
    }
    filter.getRelyingParty().ifPresent(filterRelyingParty -> {
      String relyingPartyValue =
          URLEncoder.encode(String.valueOf(filterRelyingParty.getUid()), StandardCharsets.UTF_8);
      self.append(RELYING_PARTY_APPEND + relyingPartyValue);
      next.append(RELYING_PARTY_APPEND + relyingPartyValue);
      first.append(RELYING_PARTY_APPEND + relyingPartyValue);
    });
    if (!filter.getRelyingPartys().isEmpty()) {
      String relyingPartysValue =
          URLEncoder.encode(String.join(",", filter.getRelyingPartys()), StandardCharsets.UTF_8);
      self.append(RELYING_PARTYS_APPEND + relyingPartysValue);
      next.append(RELYING_PARTYS_APPEND + relyingPartysValue);
      first.append(RELYING_PARTYS_APPEND + relyingPartysValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(SINCE_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> {
      next.append(SINCE_APPEND + URLEncoder.encode(lastDto.getUid(), StandardCharsets.UTF_8));
    });
    return new SecurityScopeApiDtoList()
        .items(securityScopes.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param domainEnum
   * @return
   */
  private VisibilityEnum visibilityEnumToApi(SecurityScopeVisibilityOptions domainEnum) {
    VisibilityEnum result;
    if (domainEnum == SecurityScopeVisibilityOptions.PUBLIC) {
      result = VisibilityEnum.PUBLIC;
    } else if (domainEnum == SecurityScopeVisibilityOptions.AUTHORIZED) {
      result = VisibilityEnum.AUTHORIZED;
    } else if (domainEnum == SecurityScopeVisibilityOptions.EXPLICIT) {
      result = VisibilityEnum.EXPLICIT;
    } else {
      result = null;
    }
    return result;
  }
}
