package net.civeira.phylax.features.access.securityscope;

import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.securityscope.command.SecurityScopeWriteAttributes;
import net.civeira.phylax.features.access.securityscope.transition.create.SecurityScopeCreatePipeline;
import net.civeira.phylax.features.access.securityscope.transition.delete.SecurityScopeDeletePipeline;
import net.civeira.phylax.features.access.securityscope.transition.disable.SecurityScopeDisablePipeline;
import net.civeira.phylax.features.access.securityscope.transition.enable.SecurityScopeEnablePipeline;
import net.civeira.phylax.features.access.securityscope.transition.update.SecurityScopeUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityScopeFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityScopeCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityScopeDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityScopeDisablePipeline disablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityScopeEnablePipeline enablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<SecurityScopeMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final SecurityScopeUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityScope create(final SecurityScopeWriteAttributes attributes) {
    return SecurityScope.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityScope delete(final SecurityScope entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityScope disable(final SecurityScope base) {
    return base.disable(disablePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityScope enable(final SecurityScope base) {
    return base.enable(enablePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public SecurityScope update(final SecurityScope base,
      final SecurityScopeWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
