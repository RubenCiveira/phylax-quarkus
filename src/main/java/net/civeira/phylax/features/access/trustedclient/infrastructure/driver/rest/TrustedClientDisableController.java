package net.civeira.phylax.features.access.trustedclient.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.trustedclient.application.usecase.disable.TrustedClientDisableFilter;
import net.civeira.phylax.features.access.trustedclient.application.usecase.disable.TrustedClientDisableProjection;
import net.civeira.phylax.features.access.trustedclient.application.usecase.disable.TrustedClientDisableStatus;
import net.civeira.phylax.features.access.trustedclient.application.usecase.disable.TrustedClientDisableUsecase;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiDto;

@RequiredArgsConstructor
@RequestScoped
public class TrustedClientDisableController {

  /**
   * @autogenerated ActionControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ActionControllerGenerator
   */
  private final TrustedClientDisableUsecase disable;

  /**
   * @autogenerated ActionControllerGenerator
   * @param uids
   * @param search
   * @param code
   * @return
   */
  public Response trustedClientApiBatchDisable(final List<String> uids, final String search,
      final String code) {
    TrustedClientDisableFilter.TrustedClientDisableFilterBuilder filterBuilder =
        TrustedClientDisableFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.code(code);
    TrustedClientDisableFilter filter = filterBuilder.build();
    BatchIdentificator task = disable.disable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param batchId
   * @return
   */
  public Response trustedClientApiBatchDisableQuery(final String batchId) {
    BatchProgress task = disable.checkProgress(
        TrustedClientDisableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response trustedClientApiDisable(final String uid) {
    TrustedClientDisableProjection updated =
        disable.disable(currentRequest.interaction(), TrustedClientReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ActionControllerGenerator
   * @param dto
   * @return
   */
  private TrustedClientApiDto toApiModel(TrustedClientDisableProjection dto) {
    TrustedClientApiDto trustedClientApiDto = new TrustedClientApiDto();
    trustedClientApiDto.setUid(dto.getUid());
    trustedClientApiDto.setCode(dto.getCode());
    trustedClientApiDto.setPublicAllow(dto.getPublicAllow());
    trustedClientApiDto.setSecretOauth("*****");
    trustedClientApiDto.setAllowedRedirects(dto.getAllowedRedirects());
    trustedClientApiDto.setEnabled(dto.getEnabled());
    trustedClientApiDto.setVersion(dto.getVersion());
    return trustedClientApiDto;
  }
}
