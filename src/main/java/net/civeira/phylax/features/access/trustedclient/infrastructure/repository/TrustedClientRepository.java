package net.civeira.phylax.features.access.trustedclient.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;

import javax.sql.DataSource;

import io.opentelemetry.api.trace.Tracer;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.infrastructure.sql.OptimistLockException;
import net.civeira.phylax.common.infrastructure.sql.PartialWhere;
import net.civeira.phylax.common.infrastructure.sql.SqlCommand;
import net.civeira.phylax.common.infrastructure.sql.SqlConverter;
import net.civeira.phylax.common.infrastructure.sql.SqlListParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlOperator;
import net.civeira.phylax.common.infrastructure.sql.SqlParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlResult;
import net.civeira.phylax.common.infrastructure.sql.SqlSchematicQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlTemplate;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientRef;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientCursor;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientFilter;
import net.civeira.phylax.features.access.trustedclient.domain.gateway.TrustedClientOrder;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.AllowedRedirectsVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.CodeVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.PublicAllowVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.SecretOauthVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.VersionVO;

@ApplicationScoped
@RequiredArgsConstructor
@Slf4j
public class TrustedClientRepository {

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TRUSTED_CLIENT_ALLOWED_REDIRECTS =
      "access_trusted_client.allowed_redirects";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TRUSTED_CLIENT_CODE = "access_trusted_client.code";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TRUSTED_CLIENT_ENABLED = "access_trusted_client.enabled";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TRUSTED_CLIENT_PUBLIC_ALLOW =
      "access_trusted_client.public_allow";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TRUSTED_CLIENT_SECRET_OAUTH =
      "access_trusted_client.secret_oauth";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TRUSTED_CLIENT_SNAKE = "access_trusted_client";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TRUSTED_CLIENT_UID = "access_trusted_client.uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_TRUSTED_CLIENT_VERSION = "access_trusted_client.version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ALLOWED_REDIRECTS = "allowedRedirects";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ALLOWED_REDIRECTS_SNAKE = "allowed_redirects";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String CODE = "code";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ENABLED = "enabled";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String PUBLIC_ALLOW = "publicAllow";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String PUBLIC_ALLOW_SNAKE = "public_allow";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String SECRET_OAUTH = "secretOauth";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String SECRET_OAUTH_SNAKE = "secret_oauth";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String UID = "uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String VERSION = "version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final AesCipherService cypher;

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final DataSource datasource;

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final Tracer tracer;

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public long count(TrustedClientFilter filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<Long> sq = filteredQuery(template, filter);
      sq.select("count(uid) as uid");
      return sq.query(row -> Optional.of(row.getLong(1))).one().orElse(0l);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public TrustedClient create(TrustedClient entity) {
    return runCreate(entity, null);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  public TrustedClient create(TrustedClient entity, Predicate<TrustedClient> verifier) {
    return runCreate(entity, verifier);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   */
  public void delete(TrustedClient entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq =
          template.createSqlCommand("delete from \"access_trusted_client\" where \"uid\" = :uid");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No delete from");
      }
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean exists(String uid, Optional<TrustedClientFilter> filter) {
    return retrieve(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean existsForUpdate(String uid, Optional<TrustedClientFilter> filter) {
    return retrieveForUpdate(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<TrustedClient> find(TrustedClientFilter filter) {
    TrustedClientCursor cursor = TrustedClientCursor.builder().build();
    return new TrustedClientSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("code", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<TrustedClient> find(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TrustedClient> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<TrustedClient> findForUpdate(TrustedClientFilter filter) {
    TrustedClientCursor cursor = TrustedClientCursor.builder().build();
    return new TrustedClientSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("code", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<TrustedClient> findForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TrustedClient> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<TrustedClient> list(TrustedClientFilter filter) {
    TrustedClientCursor cursor = TrustedClientCursor.builder().build();
    return new TrustedClientSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("code", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TrustedClient> list(final String sql, final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("code", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TrustedClient> list(final String sql, final Map<String, SqlParameterValue> params,
      final int limit) {
    return list(sql, params, Integer.valueOf(limit), false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<TrustedClient> listForUpdate(TrustedClientFilter filter) {
    TrustedClientCursor cursor = TrustedClientCursor.builder().build();
    return new TrustedClientSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("code", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TrustedClient> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("code", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<TrustedClient> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params, final int limit) {
    return list(sql, params, Integer.valueOf(limit), true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public TrustedClient resolve(TrustedClientRef reference) {
    return reference instanceof TrustedClient trustedClient ? trustedClient
        : retrieve(reference.getUid(), Optional.empty()).orElseThrow(() -> new NotFoundException(
            "Trying to resolve inexistent TrustedClient: " + reference.getUid()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public TrustedClient resolveForUpdate(TrustedClientRef reference) {
    return reference instanceof TrustedClient trustedClient ? trustedClient
        : retrieveForUpdate(reference.getUid(), Optional.empty())
            .orElseThrow(() -> new NotFoundException(
                "Trying to resolve inexistent TrustedClient: " + reference.getUid()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<TrustedClient> retrieve(String uid, Optional<TrustedClientFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      TrustedClientFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> TrustedClientFilter.builder().uid(uid).build());
      SqlSchematicQuery<TrustedClient> sq = filteredQuery(template, readyFilter);
      return sq.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<TrustedClient> retrieveForUpdate(String uid,
      Optional<TrustedClientFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      TrustedClientFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> TrustedClientFilter.builder().uid(uid).build());
      SqlSchematicQuery<TrustedClient> sq = filteredQuery(template, readyFilter);
      return sq.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<TrustedClient> slide(TrustedClientFilter filter, TrustedClientCursor cursor) {
    return new TrustedClientSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<TrustedClient> slideForUpdate(TrustedClientFilter filter,
      TrustedClientCursor cursor) {
    return new TrustedClientSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public TrustedClient update(TrustedClient entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "update \"access_trusted_client\" set  \"code\" = :code, \"public_allow\" = :publicAllow, \"secret_oauth\" = :secretOauth, \"allowed_redirects\" = :allowedRedirects, \"enabled\" = :enabled, \"version\" = \"version\" + 1 where \"uid\" = :uid and \"version\" = :version");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      sq.with(CODE, SqlParameterValue.of(entity.getCode()));
      sq.with(PUBLIC_ALLOW, SqlParameterValue.of(entity.isPublicAllow()));
      sq.with(SECRET_OAUTH, entity.getCypheredSecretOauth(cypher).map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(ALLOWED_REDIRECTS, entity.getAllowedRedirects().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(ENABLED, SqlParameterValue.of(entity.isEnabled()));
      sq.with(VERSION, entity.getVersion().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new OptimistLockException("No delete from");
      }
      return entity.withNextVersion();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param cursor
   */
  private void attachWithOrder(SqlSchematicQuery<TrustedClient> sq, TrustedClientCursor cursor) {
    PartialWhere[] offset = new PartialWhere[] {PartialWhere.empty(), PartialWhere.empty()};
    for (TrustedClientOrder order : cursor.getOrder()) {
      tryToOrderByCodeAsc(sq, offset, cursor, order);
      tryToOrderByCodeDesc(sq, offset, cursor, order);
    }
    Optional<String> sinceUid = cursor.getSinceUid();
    if (sinceUid.isPresent()) {
      offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
          PartialWhere.where("uid", SqlOperator.GT, SqlParameterValue.of(sinceUid.get()))));
    }
    sq.where(offset[0]);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @return
   */
  private SqlConverter<TrustedClient> converter() {
    return row -> {
      try {
        return Optional.of(TrustedClient.builder().uidValue(UidVO.from(row.getString(UID)))
            .codeValue(CodeVO.from(row.getString(CODE)))
            .publicAllowValue(PublicAllowVO.from(row.getBoolean(PUBLIC_ALLOW_SNAKE)))
            .secretOauthValue(SecretOauthVO.fromCyphered(row.getString(SECRET_OAUTH_SNAKE)))
            .allowedRedirectsValue(AllowedRedirectsVO.from(row.getString(ALLOWED_REDIRECTS_SNAKE)))
            .enabledValue(EnabledVO.from(row.getBoolean(ENABLED)))
            .versionValue(VersionVO.from(row.getInt(VERSION))).build());
      } catch (ConstraintException ce) {
        log.error("Unable to map data for {}", row.getString(1), ce);
        return Optional.empty();
      }
    };
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param template
   * @param filter
   * @return
   */
  private <T> SqlSchematicQuery<T> filteredQuery(SqlTemplate template, TrustedClientFilter filter) {
    SqlSchematicQuery<T> sq = template.createSqlSchematicQuery(ACCESS_TRUSTED_CLIENT_SNAKE);
    sq.selectFields(ACCESS_TRUSTED_CLIENT_UID, ACCESS_TRUSTED_CLIENT_CODE,
        ACCESS_TRUSTED_CLIENT_PUBLIC_ALLOW, ACCESS_TRUSTED_CLIENT_SECRET_OAUTH,
        ACCESS_TRUSTED_CLIENT_ALLOWED_REDIRECTS, ACCESS_TRUSTED_CLIENT_ENABLED,
        ACCESS_TRUSTED_CLIENT_VERSION);
    filter.getUid().ifPresent(uid -> sq.where(UID, SqlOperator.EQ, SqlParameterValue.of(uid)));
    if (!filter.getUids().isEmpty()) {
      sq.where(UID, SqlOperator.IN, SqlListParameterValue.strings(filter.getUids()));
    }
    filter.getSearch().ifPresent(
        search -> sq.where("code", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%")));
    filter.getCode().ifPresent(code -> sq.where(CODE, SqlOperator.EQ, SqlParameterValue.of(code)));
    return sq;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @param forUpdate
   * @return sq.where("code", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  private List<TrustedClient> list(final String sql, final Map<String, SqlParameterValue> params,
      final Integer limit, final boolean forUpdate) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<TrustedClient> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      if (forUpdate) {
        createSqlQuery = createSqlQuery.forUpdate();
      }
      SqlResult<TrustedClient> query = createSqlQuery.query(converter());
      return null == limit ? query.all() : query.limit(limit);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  private TrustedClient runCreate(TrustedClient entity, Predicate<TrustedClient> verifier) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "insert into \"access_trusted_client\" ( \"uid\", \"code\", \"public_allow\", \"secret_oauth\", \"allowed_redirects\", \"enabled\", \"version\") values ( :uid, :code, :publicAllow, :secretOauth, :allowedRedirects, :enabled, :version)");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      sq.with(CODE, SqlParameterValue.of(entity.getCode()));
      sq.with(PUBLIC_ALLOW, SqlParameterValue.of(entity.isPublicAllow()));
      sq.with(SECRET_OAUTH, entity.getCypheredSecretOauth(cypher).map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(ALLOWED_REDIRECTS, entity.getAllowedRedirects().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(ENABLED, SqlParameterValue.of(entity.isEnabled()));
      sq.with(VERSION, entity.getVersion().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No insert into");
      }
      return verifier == null ? entity : verified(verifier.test(entity), entity, template);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<TrustedClient> runList(TrustedClientFilter filter, TrustedClientCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<TrustedClient> sq = filteredQuery(template, filter);
      if (null != cursor.getOrder()) {
        attachWithOrder(sq, cursor);
      } else {
        cursor.getSinceUid()
            .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      }
      sq.orderAsc("uid");
      return sq.query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<TrustedClient> runListForUpdate(TrustedClientFilter filter,
      TrustedClientCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<TrustedClient> sq = filteredQuery(template, filter);
      if (null != cursor.getOrder()) {
        attachWithOrder(sq, cursor);
      } else {
        cursor.getSinceUid()
            .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      }
      sq.orderAsc("uid");
      return sq.forUpdate().query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param offset
   * @param cursor
   * @param order
   * @return
   */
  private PartialWhere[] tryToOrderByCodeAsc(SqlSchematicQuery<TrustedClient> sq,
      PartialWhere[] offset, TrustedClientCursor cursor, TrustedClientOrder order) {
    if (order == TrustedClientOrder.CODE_ASC) {
      sq.addOrderAsc("code");
      Optional<String> sinceCode = cursor.getSinceCode();
      if (sinceCode.isPresent()) {
        String sinceCodeValue = sinceCode.get();
        offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
            PartialWhere.where("code", SqlOperator.GT, SqlParameterValue.of(sinceCodeValue))));
        offset[1] = PartialWhere.and(offset[1],
            PartialWhere.where("code", SqlOperator.EQ, SqlParameterValue.of(sinceCodeValue)));
      }
    }
    return offset;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param offset
   * @param cursor
   * @param order
   * @return
   */
  private PartialWhere[] tryToOrderByCodeDesc(SqlSchematicQuery<TrustedClient> sq,
      PartialWhere[] offset, TrustedClientCursor cursor, TrustedClientOrder order) {
    if (order == TrustedClientOrder.CODE_DESC) {
      sq.addOrderDesc("code");
      Optional<String> sinceCode = cursor.getSinceCode();
      if (sinceCode.isPresent()) {
        String sinceCodeValue = sinceCode.get();
        offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
            PartialWhere.where("code", SqlOperator.GT, SqlParameterValue.of(sinceCodeValue))));
        offset[1] = PartialWhere.and(offset[1],
            PartialWhere.where("code", SqlOperator.EQ, SqlParameterValue.of(sinceCodeValue)));
      }
    }
    return offset;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param exists
   * @param entity
   * @param template
   * @return
   */
  private TrustedClient verified(boolean exists, TrustedClient entity, SqlTemplate template) {
    if (exists) {
      return entity;
    } else {
      template.createSqlCommand("delete from \"access_trusted_client\" where \"uid\" = :uid")
          .with("uid", SqlParameterValue.of(entity.getUid())).execute();
      throw new NotFoundException("");
    }
  }
}
