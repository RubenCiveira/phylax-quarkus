package net.civeira.phylax.features.access.useridentity.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;
import net.civeira.phylax.features.access.user.domain.UserReference;
import net.civeira.phylax.features.access.useridentity.application.usecase.list.UserIdentityListCursor;
import net.civeira.phylax.features.access.useridentity.application.usecase.list.UserIdentityListFilter;
import net.civeira.phylax.features.access.useridentity.application.usecase.list.UserIdentityListProjection;
import net.civeira.phylax.features.access.useridentity.application.usecase.list.UserIdentityListUsecase;
import net.civeira.phylax.features.access.useridentity.domain.Roles;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.RoleApiRef;
import net.civeira.phylax.generated.openapi.model.RolesApiDto;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;
import net.civeira.phylax.generated.openapi.model.UserApiRef;
import net.civeira.phylax.generated.openapi.model.UserIdentityApiDto;
import net.civeira.phylax.generated.openapi.model.UserIdentityApiDtoList;

@RequiredArgsConstructor
public class UserIdentityListController {

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String LIMIT_APPEND = "&limit=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String RELYING_PARTYS_APPEND = "&relying-partys=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String RELYING_PARTY_APPEND = "&relying-party=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String SINCE_APPEND = "&since-uid=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String TRUSTED_CLIENTS_APPEND = "&trusted-clients=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String TRUSTED_CLIENT_APPEND = "&trusted-client=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String USERS_APPEND = "&users=";

  /**
   * @autogenerated ListControllerGenerator
   */
  private static final String USER_APPEND = "&user=";

  /**
   * UserIdentity
   *
   * @autogenerated ListControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ListControllerGenerator
   */
  private final UserIdentityListUsecase list;

  /**
   * @autogenerated ListControllerGenerator
   * @param uids
   * @param search
   * @param user
   * @param users
   * @param relyingParty
   * @param relyingPartys
   * @param trustedClient
   * @param trustedClients
   * @param limit
   * @param sinceUid
   * @return
   */
  public Response userIdentityApiList(final List<String> uids, final String search,
      final String user, final List<String> users, final String relyingParty,
      final List<String> relyingPartys, final String trustedClient,
      final List<String> trustedClients, final Integer limit, final String sinceUid) {
    UserIdentityListFilter.UserIdentityListFilterBuilder filterBuilder =
        UserIdentityListFilter.builder();
    UserIdentityListCursor.UserIdentityListCursorBuilder cursorBuilder =
        UserIdentityListCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    if (null != user) {
      filterBuilder = filterBuilder.user(UserReference.of(user));
    }
    filterBuilder =
        filterBuilder.users(users.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    if (null != relyingParty) {
      filterBuilder = filterBuilder.relyingParty(RelyingPartyReference.of(relyingParty));
    }
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    if (null != trustedClient) {
      filterBuilder = filterBuilder.trustedClient(TrustedClientReference.of(trustedClient));
    }
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    UserIdentityListFilter filter = filterBuilder.build();
    UserIdentityListCursor cursor = cursorBuilder.build();
    List<UserIdentityListProjection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "user-identity-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param dto
   * @return
   */
  private UserIdentityApiDto toApiModel(UserIdentityListProjection dto) {
    UserIdentityApiDto userIdentityApiDto = new UserIdentityApiDto();
    userIdentityApiDto.setUid(dto.getUid());
    userIdentityApiDto.setUser(new UserApiRef().$ref(dto.getUserReference()));
    userIdentityApiDto
        .setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyReference()));
    userIdentityApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientReference()));
    userIdentityApiDto.setRoles(dto.getRoles().stream().map(this::toApiModelRoles).toList());
    userIdentityApiDto.setVersion(dto.getVersion());
    return userIdentityApiDto;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param dto
   * @return
   */
  private RolesApiDto toApiModelRoles(Roles dto) {
    RolesApiDto rolesApiDto = new RolesApiDto();
    rolesApiDto.setUid(dto.getUid());
    rolesApiDto.setRole(new RoleApiRef().$ref(dto.getRoleUid()));
    rolesApiDto.setVersion(dto.getVersion().orElse(null));
    return rolesApiDto;
  }

  /**
   * @autogenerated ListControllerGenerator
   * @param userIdentitys
   * @param filter
   * @param cursor
   * @return
   */
  private UserIdentityApiDtoList toListApiModel(List<UserIdentityListProjection> userIdentitys,
      UserIdentityListFilter filter, UserIdentityListCursor cursor) {
    Optional<UserIdentityListProjection> last = userIdentitys.isEmpty() ? Optional.empty()
        : Optional.of(userIdentitys.get(userIdentitys.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getUser().ifPresent(filterUser -> {
      String userValue =
          URLEncoder.encode(String.valueOf(filterUser.getUid()), StandardCharsets.UTF_8);
      self.append(USER_APPEND + userValue);
      next.append(USER_APPEND + userValue);
      first.append(USER_APPEND + userValue);
    });
    if (!filter.getUsers().isEmpty()) {
      String usersValue =
          URLEncoder.encode(String.join(",", filter.getUsers()), StandardCharsets.UTF_8);
      self.append(USERS_APPEND + usersValue);
      next.append(USERS_APPEND + usersValue);
      first.append(USERS_APPEND + usersValue);
    }
    filter.getRelyingParty().ifPresent(filterRelyingParty -> {
      String relyingPartyValue =
          URLEncoder.encode(String.valueOf(filterRelyingParty.getUid()), StandardCharsets.UTF_8);
      self.append(RELYING_PARTY_APPEND + relyingPartyValue);
      next.append(RELYING_PARTY_APPEND + relyingPartyValue);
      first.append(RELYING_PARTY_APPEND + relyingPartyValue);
    });
    if (!filter.getRelyingPartys().isEmpty()) {
      String relyingPartysValue =
          URLEncoder.encode(String.join(",", filter.getRelyingPartys()), StandardCharsets.UTF_8);
      self.append(RELYING_PARTYS_APPEND + relyingPartysValue);
      next.append(RELYING_PARTYS_APPEND + relyingPartysValue);
      first.append(RELYING_PARTYS_APPEND + relyingPartysValue);
    }
    filter.getTrustedClient().ifPresent(filterTrustedClient -> {
      String trustedClientValue =
          URLEncoder.encode(String.valueOf(filterTrustedClient.getUid()), StandardCharsets.UTF_8);
      self.append(TRUSTED_CLIENT_APPEND + trustedClientValue);
      next.append(TRUSTED_CLIENT_APPEND + trustedClientValue);
      first.append(TRUSTED_CLIENT_APPEND + trustedClientValue);
    });
    if (!filter.getTrustedClients().isEmpty()) {
      String trustedClientsValue =
          URLEncoder.encode(String.join(",", filter.getTrustedClients()), StandardCharsets.UTF_8);
      self.append(TRUSTED_CLIENTS_APPEND + trustedClientsValue);
      next.append(TRUSTED_CLIENTS_APPEND + trustedClientsValue);
      first.append(TRUSTED_CLIENTS_APPEND + trustedClientsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(SINCE_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> {
      next.append(SINCE_APPEND + URLEncoder.encode(lastDto.getUid(), StandardCharsets.UTF_8));
    });
    return new UserIdentityApiDtoList().items(userIdentitys.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }
}
