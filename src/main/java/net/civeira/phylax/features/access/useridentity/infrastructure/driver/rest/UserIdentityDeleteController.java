package net.civeira.phylax.features.access.useridentity.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;
import net.civeira.phylax.features.access.user.domain.UserReference;
import net.civeira.phylax.features.access.useridentity.application.usecase.delete.UserIdentityCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.useridentity.application.usecase.delete.UserIdentityDeleteFilter;
import net.civeira.phylax.features.access.useridentity.application.usecase.delete.UserIdentityDeleteUsecase;
import net.civeira.phylax.features.access.useridentity.domain.UserIdentityReference;

@RequiredArgsConstructor
@RequestScoped
public class UserIdentityDeleteController {

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final UserIdentityDeleteUsecase delete;

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uids
   * @param search
   * @param user
   * @param users
   * @param relyingParty
   * @param relyingPartys
   * @param trustedClient
   * @param trustedClients
   * @return
   */
  public Response userIdentityApiBatchDelete(final List<String> uids, final String search,
      final String user, final List<String> users, final String relyingParty,
      final List<String> relyingPartys, final String trustedClient,
      final List<String> trustedClients) {
    UserIdentityDeleteFilter.UserIdentityDeleteFilterBuilder filterBuilder =
        UserIdentityDeleteFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    if (null != user) {
      filterBuilder = filterBuilder.user(UserReference.of(user));
    }
    filterBuilder =
        filterBuilder.users(users.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    if (null != relyingParty) {
      filterBuilder = filterBuilder.relyingParty(RelyingPartyReference.of(relyingParty));
    }
    filterBuilder = filterBuilder
        .relyingPartys(relyingPartys.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    if (null != trustedClient) {
      filterBuilder = filterBuilder.trustedClient(TrustedClientReference.of(trustedClient));
    }
    filterBuilder = filterBuilder.trustedClients(
        trustedClients.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    UserIdentityDeleteFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param batchId
   * @return
   */
  public Response userIdentityApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(UserIdentityCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response userIdentityApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), UserIdentityReference.of(uid));
    return Response.noContent().build();
  }
}
