package net.civeira.phylax.features.access.loginprovider.domain.valueobject;

import lombok.EqualsAndHashCode;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing if true, the system will default to this login method without requiring
 * selection. of loginProvider.
 * <p>
 * This class ensures that the direct access is a {@code String} and encapsulates its validation and
 * formatting logic. It is immutable and compliant with DDD (Domain-Driven Design) principles.
 * </p>
 * <p>
 * Use {@link #from(String)} or {@link #tryFrom(Object)} to safely create instances. Validation
 * errors are reported via {@link ConstraintFailList} or thrown as {@link ConstraintException}.
 * </p>
 */
@RequiredArgsConstructor
@EqualsAndHashCode
public class DirectAccessVO {

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param directAccess
   * @return An empty instance
   */
  public static DirectAccessVO from(final Boolean directAccess) {
    return tryFrom(directAccess);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static DirectAccessVO nullValue() {
    return new DirectAccessVO(null);
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param directAccess
   * @return An empty instance
   */
  public static DirectAccessVO tryFrom(final Object directAccess) {
    ConstraintFailList list = new ConstraintFailList();
    DirectAccessVO result = tryFrom(directAccess, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * Crear an empty instance with no value
   *
   * @autogenerated ValueObjectGenerator
   * @param directAccess temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> DirectAccessVO tryFrom(final Object directAccess,
      final T fails) {
    if (null == directAccess) {
      return new DirectAccessVO(null);
    } else if (directAccess instanceof Boolean castedDirectAccess) {
      return new DirectAccessVO(castedDirectAccess);
    } else {
      fails.add(new ConstraintFail("wrong-type", "directAccess", directAccess.getClass(),
          "A Boolean type is expected for directAccess"));
      return null;
    }
  }

  /**
   * The actual value of the name.
   *
   * @autogenerated ValueObjectGenerator
   */
  private final Boolean value;

  /**
   * Get the vo value
   *
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Boolean isDirectAccess() {
    return Boolean.TRUE.equals(value);
  }

  /**
   * Returns a formatted string representation of the name.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  @Override
  public String toString() {
    return "[" + value + "]";
  }
}
