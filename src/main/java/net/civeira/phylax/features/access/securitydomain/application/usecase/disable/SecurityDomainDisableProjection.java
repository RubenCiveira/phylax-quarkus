package net.civeira.phylax.features.access.securitydomain.application.usecase.disable;

import java.util.Optional;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.securitydomain.application.visibility.SecurityDomainVisibleProjection;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.LevelVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.ManageAllVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.ReadAllVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.WriteAllVO;

/**
 * A dto transfer to hold security domain attribute values
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class SecurityDomainDisableProjection {

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated ActionProjectionGenerator
   * @param visible The entity who provide values.
   * @return
   */
  public static SecurityDomainDisableProjection from(
      final SecurityDomainVisibleProjection visible) {
    SecurityDomainDisableProjection instance = new SecurityDomainDisableProjection();
    instance.uidValue = visible.getUid();
    instance.nameValue = visible.getName();
    instance.levelValue = visible.getLevel();
    instance.readAllValue = visible.getReadAll();
    instance.writeAllValue = visible.getWriteAll();
    instance.manageAllValue = visible.getManageAll();
    instance.enabledValue = visible.getEnabled();
    instance.versionValue = visible.getVersion();
    return instance;
  }

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<EnabledVO> enabledValue;

  /**
   * The user inherit level, and can view only domain with his level or lower
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<LevelVO> levelValue;

  /**
   * Allow to write on every scope
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<ManageAllVO> manageAllValue;

  /**
   * El name de security domain
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<NameVO> nameValue;

  /**
   * Allow to read on every scope
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<ReadAllVO> readAllValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<UidVO> uidValue;

  /**
   * Campo con el n√∫mero de version de security domain para controlar bloqueos optimistas
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<VersionVO> versionValue;

  /**
   * Allow to write on every scope
   *
   * @autogenerated ActionProjectionGenerator
   */
  private Optional<WriteAllVO> writeAllValue;

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated ActionProjectionGenerator
   * @param entity The entity who provide values.
   */
  public SecurityDomainDisableProjection(final SecurityDomain entity) {
    uidValue = Optional.of(entity.getUidValue());
    nameValue = Optional.of(entity.getNameValue());
    levelValue = Optional.of(entity.getLevelValue());
    readAllValue = Optional.of(entity.getReadAllValue());
    writeAllValue = Optional.of(entity.getWriteAllValue());
    manageAllValue = Optional.of(entity.getManageAllValue());
    enabledValue = Optional.of(entity.getEnabledValue());
    versionValue = Optional.of(entity.getVersionValue());
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Boolean getEnabled() {
    return getEnabledOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Boolean getEnabledOrDefault(final Boolean orDefault) {
    return enabledValue.map(EnabledVO::isEnabled).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Level
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Level, otherwise the value for Level
   */
  public Integer getLevel() {
    return getLevelOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Level
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Level, otherwise the value for Level
   */
  public Integer getLevelOrDefault(final Integer orDefault) {
    return levelValue.map(LevelVO::getLevel).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in ManageAll
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for ManageAll, otherwise the value for ManageAll
   */
  public Boolean getManageAll() {
    return getManageAllOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in ManageAll
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for ManageAll, otherwise the value for ManageAll
   */
  public Boolean getManageAllOrDefault(final Boolean orDefault) {
    return manageAllValue.map(ManageAllVO::isManageAll).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public String getName() {
    return getNameOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public String getNameOrDefault(final String orDefault) {
    return nameValue.map(NameVO::getName).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in ReadAll
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for ReadAll, otherwise the value for ReadAll
   */
  public Boolean getReadAll() {
    return getReadAllOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in ReadAll
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for ReadAll, otherwise the value for ReadAll
   */
  public Boolean getReadAllOrDefault(final Boolean orDefault) {
    return readAllValue.map(ReadAllVO::isReadAll).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUid() {
    return getUidOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUidOrDefault(final String orDefault) {
    return uidValue.map(UidVO::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersion() {
    return getVersionOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersionOrDefault(final Integer orDefault) {
    return versionValue.flatMap(VersionVO::getVersion).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in WriteAll
   *
   * @autogenerated ActionProjectionGenerator
   * @return empty if there is no change proposal for WriteAll, otherwise the value for WriteAll
   */
  public Boolean getWriteAll() {
    return getWriteAllOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in WriteAll
   *
   * @autogenerated ActionProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for WriteAll, otherwise the value for WriteAll
   */
  public Boolean getWriteAllOrDefault(final Boolean orDefault) {
    return writeAllValue.map(WriteAllVO::isWriteAll).orElse(orDefault);
  }
}
