package net.civeira.phylax.features.access.tenant.rule;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.tenant.Tenant;
import net.civeira.phylax.features.access.tenant.TenantMetadataProvider;
import net.civeira.phylax.features.access.tenant.transition.TenantChangeProposal;
import net.civeira.phylax.features.access.tenant.transition.create.TenantCreateStep;
import net.civeira.phylax.features.access.tenant.transition.create.TenantCreateTransition;
import net.civeira.phylax.features.access.tenant.transition.update.TenantUpdateStep;
import net.civeira.phylax.features.access.tenant.transition.update.TenantUpdateTransition;
import net.civeira.phylax.features.access.tenant.valueobject.EnabledVO;

@ApplicationScoped
@RequiredArgsConstructor
public class PreserveEnabled implements TenantMetadataProvider, TenantCreateStep, TenantUpdateStep {

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public Tenant create(final TenantCreateTransition transition,
      final Function<TenantCreateTransition, Tenant> next) {
    return next.apply(transition.map(calculate(transition.getData(), Optional.empty())));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @return
   */
  @Override
  public Set<String> readonlyFields() {
    return Set.of("enabled");
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public Tenant update(final TenantUpdateTransition transition,
      final Function<TenantUpdateTransition, Tenant> next) {
    return next.apply(
        transition.map(calculate(transition.getData(), Optional.of(transition.getOriginal()))));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param attributes
   * @param original
   * @return
   */
  private TenantChangeProposal calculate(final TenantChangeProposal attributes,
      final Optional<Tenant> original) {
    return attributes.setEnabled(
        original.map(Tenant::getEnabled).map(EnabledVO::getValue).orElseGet(() -> false));
  }
}
