package net.civeira.phylax.features.access.user.application.usecase.update;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.user.application.visibility.UsersVisibility;
import net.civeira.phylax.features.access.user.domain.User;
import net.civeira.phylax.features.access.user.domain.UserChangeSet;
import net.civeira.phylax.features.access.user.domain.UserRef;
import net.civeira.phylax.features.access.user.domain.gateway.UserCacheGateway;
import net.civeira.phylax.features.access.user.domain.gateway.UserWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class UserUpdateUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final UserCacheGateway cache;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final UserWriteRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<UserUpdateAllowDecision> updateAllowEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<UserUpdateCheck> updateCheckEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<UserUpdateEnrich> updateEnrichEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final UsersVisibility visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final UserRef reference) {
    UserUpdateAllowDecision base = UserUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    UserUpdateAllowDecision base = UserUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @param input
   * @return The slide with some values
   */
  public UserUpdateProjection update(final Interaction query, final UserRef reference,
      final UserUpdateInput input) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    User original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    UserUpdateInput filled =
        UserUpdateInput.fromChangeSet(visibility.copyWithFixed(query, input.toChangeSet()));
    UserUpdateCheck check =
        UserUpdateCheck.builder().input(filled).interaction(query).reference(reference).build();
    updateCheckEmitter.fire(check);
    UserUpdateEnrich proposal =
        UserUpdateEnrich.builder().input(filled).interaction(query).reference(reference).build();
    updateEnrichEmitter.fire(proposal);
    UserChangeSet dto = proposal.getInput().toChangeSet();
    User saved = gateway.update(original, original.update(dto));
    cache.update(saved);
    return UserUpdateProjection.from(visibility.copyWithHidden(query, saved));
  }
}
