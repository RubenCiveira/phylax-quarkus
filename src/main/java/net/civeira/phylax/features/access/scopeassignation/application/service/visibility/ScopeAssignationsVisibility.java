package net.civeira.phylax.features.access.scopeassignation.application.service.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationFacade;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationRef;
import net.civeira.phylax.features.access.scopeassignation.application.projection.ScopeAssignationStateProyection;
import net.civeira.phylax.features.access.scopeassignation.application.request.ScopeAssignationStateChange;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationCacheGateway;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationCached;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationReadRepositoryGateway;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationWriteRepositoryGateway;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationCursor;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationFilter;
import net.civeira.phylax.features.access.scopeassignation.valueobject.SecurityDomainVO;
import net.civeira.phylax.features.access.scopeassignation.valueobject.SecurityScopeVO;
import net.civeira.phylax.features.access.securitydomain.application.service.visibility.SecurityDomainsVisibility;
import net.civeira.phylax.features.access.securityscope.application.service.visibility.SecurityScopesVisibility;

@ApplicationScoped
@RequiredArgsConstructor
public class ScopeAssignationsVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ScopeAssignationFacade aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ScopeAssignationCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ScopeAssignationFilterProposal> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ScopeAssignationFixedFieldsProposal> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ScopeAssignationVisibleContentProposal> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ScopeAssignationHiddenFieldsProposal> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ScopeAssignationPresetProposal> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ScopeAssignationReadRepositoryGateway scopeAssignationReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ScopeAssignationWriteRepositoryGateway scopeAssignationWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityDomainsVisibility securityDomainsVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityScopesVisibility securityScopesVisibility;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, ScopeAssignationFilter.builder().uids(uids).build(),
        ScopeAssignationCursor.builder().build()).size();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public ScopeAssignationStateChange copyWithFixed(Interaction prev,
      ScopeAssignationStateChange source, ScopeAssignation original) {
    ScopeAssignationStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    ScopeAssignationPresetProposal proposal = ScopeAssignationPresetProposal.builder()
        .dto(withReferences).interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public ScopeAssignationStateChange copyWithFixed(Interaction prev,
      ScopeAssignationStateChange source) {
    ScopeAssignationStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    ScopeAssignationPresetProposal proposal =
        ScopeAssignationPresetProposal.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param scopeAssignation
   * @return The input dto with hidden values
   */
  public ScopeAssignationStateProyection copyWithHidden(Interaction prev,
      ScopeAssignation scopeAssignation) {
    ScopeAssignationStateProyection target = new ScopeAssignationStateProyection(scopeAssignation);
    fieldsToHide(prev, scopeAssignation).forEach(target::unset);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, ScopeAssignationFilter filter) {
    return scopeAssignationReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.readonlyFields());
    ScopeAssignationFixedFieldsProposal proposal =
        ScopeAssignationFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param scopeAssignation
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, ScopeAssignationRef scopeAssignation) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, scopeAssignation));
    fields.addAll(aggregate.readonlyFields());
    ScopeAssignationFixedFieldsProposal proposal = ScopeAssignationFixedFieldsProposal.builder()
        .fields(fields).scopeAssignation(scopeAssignation).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    ScopeAssignationHiddenFieldsProposal proposal =
        ScopeAssignationHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param scopeAssignation
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, ScopeAssignationRef scopeAssignation) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    ScopeAssignationHiddenFieldsProposal proposal = ScopeAssignationHiddenFieldsProposal.builder()
        .fields(fields).scopeAssignation(scopeAssignation).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public ScopeAssignationCached listCachedVisibles(Interaction prev, ScopeAssignationFilter filter,
      ScopeAssignationCursor cursor) {
    ScopeAssignationFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<ScopeAssignation> listVisibles(Interaction prev, ScopeAssignationFilter filter,
      ScopeAssignationCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<ScopeAssignation> listVisiblesForUpdate(Interaction prev,
      ScopeAssignationFilter filter, ScopeAssignationCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public ScopeAssignationCached retrieveCachedVisible(Interaction prev, String uid) {
    ScopeAssignationCursor cursor = ScopeAssignationCursor.builder().limit(1).build();
    ScopeAssignationFilter visibleFilter =
        applyPreVisibilityFilter(prev, ScopeAssignationFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<ScopeAssignation> list =
          retrieveVisible(prev, uid).<List<ScopeAssignation>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<ScopeAssignation> retrieveVisible(Interaction prev, String uid) {
    ScopeAssignationFilter filter =
        applyPreVisibilityFilter(prev, ScopeAssignationFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<ScopeAssignation> retrieveVisibleForUpdate(Interaction prev, String uid) {
    ScopeAssignationFilter filter =
        applyPreVisibilityFilter(prev, ScopeAssignationFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private ScopeAssignationFilter applyPreVisibilityFilter(Interaction prev,
      ScopeAssignationFilter filter) {
    ScopeAssignationFilterProposal proposal =
        ScopeAssignationFilterProposal.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    return proposal.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param scopeAssignationRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, ScopeAssignation scopeAssignationRef) {
    ScopeAssignationVisibleContentProposal proposal = ScopeAssignationVisibleContentProposal
        .builder().visible(true).entity(scopeAssignationRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<ScopeAssignation> queryItem(Interaction prev, String uid,
      ScopeAssignationFilter filter) {
    return scopeAssignationReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<ScopeAssignation> queryItemForUpdate(Interaction prev, String uid,
      ScopeAssignationFilter filter) {
    return scopeAssignationWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<ScopeAssignation> queryItems(Interaction prev, ScopeAssignationFilter filter,
      ScopeAssignationCursor cursor) {
    List<ScopeAssignation> list = new ArrayList<>();
    Iterator<ScopeAssignation> slide = scopeAssignationReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<ScopeAssignation> queryItemsForUpdate(Interaction prev,
      ScopeAssignationFilter filter, ScopeAssignationCursor cursor) {
    List<ScopeAssignation> list = new ArrayList<>();
    Iterator<ScopeAssignation> slide = scopeAssignationWriteRepositoryGateway
        .slideForUpdate(filter, cursor).slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private ScopeAssignationStateChange visiblesReferences(Interaction prev,
      ScopeAssignationStateChange source) {
    source.getSecurityDomain().map(SecurityDomainVO::getReferenceValue)
        .ifPresent(securityDomain -> {
          boolean visible = securityDomainsVisibility.checkVisibility(prev, securityDomain);
          if (!visible) {
            throw new NotFoundException("No security domain - " + securityDomain);
          }
        });
    source.getSecurityScope().map(SecurityScopeVO::getReferenceValue).ifPresent(securityScope -> {
      boolean visible = securityScopesVisibility.checkVisibility(prev, securityScope);
      if (!visible) {
        throw new NotFoundException("No security scope - " + securityScope);
      }
    });
    return source;
  }
}
