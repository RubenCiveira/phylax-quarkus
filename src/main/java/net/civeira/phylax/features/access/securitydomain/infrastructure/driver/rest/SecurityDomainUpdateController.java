package net.civeira.phylax.features.access.securitydomain.infrastructure.driver.rest;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.securitydomain.application.usecase.update.SecurityDomainUpdateInput;
import net.civeira.phylax.features.access.securitydomain.application.usecase.update.SecurityDomainUpdateProjection;
import net.civeira.phylax.features.access.securitydomain.application.usecase.update.SecurityDomainUpdateUsecase;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;
import net.civeira.phylax.generated.openapi.model.SecurityDomainApiDto;

@RequiredArgsConstructor
@RequestScoped
public class SecurityDomainUpdateController {

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final SecurityDomainUpdateUsecase update;

  /**
   * @autogenerated UpdateControllerGenerator
   * @param uid
   * @param securityDomain
   * @return
   */
  @Transactional
  public Response securityDomainApiUpdate(final String uid,
      final SecurityDomainApiDto securityDomain) {
    SecurityDomainUpdateProjection updated = update.update(currentRequest.interaction(),
        SecurityDomainReference.of(uid), toDomainModel(securityDomain));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param dto
   * @return
   */
  private SecurityDomainApiDto toApiModel(SecurityDomainUpdateProjection dto) {
    SecurityDomainApiDto securityDomainApiDto = new SecurityDomainApiDto();
    securityDomainApiDto.setUid(dto.getUid());
    securityDomainApiDto.setName(dto.getName());
    securityDomainApiDto.setLevel(dto.getLevel());
    securityDomainApiDto.setReadAll(dto.getReadAll());
    securityDomainApiDto.setWriteAll(dto.getWriteAll());
    securityDomainApiDto.setManageAll(dto.getManageAll());
    securityDomainApiDto.setEnabled(dto.getEnabled());
    securityDomainApiDto.setVersion(dto.getVersion());
    return securityDomainApiDto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param securityDomainApiDto
   * @return
   */
  private SecurityDomainUpdateInput toDomainModel(SecurityDomainApiDto securityDomainApiDto) {
    SecurityDomainUpdateInput dto = new SecurityDomainUpdateInput();
    if (null != securityDomainApiDto.getUid()) {
      dto.setUid(securityDomainApiDto.getUid());
    }
    if (null != securityDomainApiDto.getName()) {
      dto.setName(securityDomainApiDto.getName());
    }
    if (null != securityDomainApiDto.getLevel()) {
      dto.setLevel(securityDomainApiDto.getLevel());
    }
    if (null != securityDomainApiDto.getReadAll()) {
      dto.setReadAll(securityDomainApiDto.getReadAll());
    }
    if (null != securityDomainApiDto.getWriteAll()) {
      dto.setWriteAll(securityDomainApiDto.getWriteAll());
    }
    if (null != securityDomainApiDto.getManageAll()) {
      dto.setManageAll(securityDomainApiDto.getManageAll());
    }
    if (null != securityDomainApiDto.getEnabled()) {
      dto.setEnabled(securityDomainApiDto.getEnabled());
    }
    if (null != securityDomainApiDto.getVersion()) {
      dto.setVersion(securityDomainApiDto.getVersion());
    }
    return dto;
  }
}
