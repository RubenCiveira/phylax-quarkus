package net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.create;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUseFacade;
import net.civeira.phylax.features.access.tenanttermsofuse.application.projection.TenantTermsOfUseStateProyection;
import net.civeira.phylax.features.access.tenanttermsofuse.application.request.TenantTermsOfUseStateChange;
import net.civeira.phylax.features.access.tenanttermsofuse.application.service.visibility.TenantTermsOfUsesVisibility;
import net.civeira.phylax.features.access.tenanttermsofuse.gateway.TenantTermsOfUseCacheGateway;
import net.civeira.phylax.features.access.tenanttermsofuse.gateway.TenantTermsOfUseWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantTermsOfUseCreateUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantTermsOfUseCacheGateway cache;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantTermsOfUseAllowCreateProposal> createAllowEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantTermsOfUseCreateProposal> createProposalEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantTermsOfUseCreateEvent> createdEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantTermsOfUseFacade facade;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantTermsOfUseWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantTermsOfUsesVisibility visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TenantTermsOfUseAllowCreateProposal proposal = TenantTermsOfUseAllowCreateProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    createAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param input
   * @return The slide with some values
   */
  public TenantTermsOfUseStateProyection create(final Interaction query,
      final TenantTermsOfUseStateChange input) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TenantTermsOfUseStateChange filled = visibility.copyWithFixed(query, input);
    TenantTermsOfUseCreateProposal proposal =
        TenantTermsOfUseCreateProposal.builder().interaction(query).dto(filled).build();
    createProposalEmitter.fire(proposal);
    TenantTermsOfUseStateChange dto = proposal.getDto();
    TenantTermsOfUse entity = facade.create(dto);
    TenantTermsOfUse created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUidValue()));
    cache.update(created);
    TenantTermsOfUseCreateEvent event =
        TenantTermsOfUseCreateEvent.builder().payload(created).interaction(query).build();
    createdEmitter.fire(event);
    return visibility.copyWithHidden(query, event.getPayload());
  }
}
