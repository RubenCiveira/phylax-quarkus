package net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.create;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenanttermsofuse.application.visibility.TenantTermsOfUsesVisibility;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.TenantTermsOfUseChangeSet;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseCacheGateway;
import net.civeira.phylax.features.access.tenanttermsofuse.domain.gateway.TenantTermsOfUseWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantTermsOfUseCreateUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantTermsOfUseCacheGateway cache;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantTermsOfUseCreateAllowDecision> createAllowEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantTermsOfUseCreateCheck> createCheckEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<TenantTermsOfUseCreateEnrich> createEnrichEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantTermsOfUseWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final TenantTermsOfUsesVisibility visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TenantTermsOfUseCreateAllowDecision proposal = TenantTermsOfUseCreateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allow by default").build()).query(query)
        .build();
    createAllowEmitter.fire(proposal);
    return proposal.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param input
   * @return The slide with some values
   */
  public TenantTermsOfUseCreateProjection create(final Interaction query,
      final TenantTermsOfUseCreateInput input) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TenantTermsOfUseCreateInput filled = TenantTermsOfUseCreateInput
        .fromChangeSet(visibility.copyWithFixed(query, input.toChangeSet()));
    TenantTermsOfUseCreateCheck check =
        TenantTermsOfUseCreateCheck.builder().interaction(query).input(filled).build();
    createCheckEmitter.fire(check);
    TenantTermsOfUseCreateEnrich proposal =
        TenantTermsOfUseCreateEnrich.builder().interaction(query).input(filled).build();
    createEnrichEmitter.fire(proposal);
    TenantTermsOfUseChangeSet dto = proposal.getInput().toChangeSet();
    TenantTermsOfUse entity = TenantTermsOfUse.create(dto);
    TenantTermsOfUse created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUid()));
    cache.update(created);
    return TenantTermsOfUseCreateProjection.from(visibility.copyWithHidden(query, created));
  }
}
