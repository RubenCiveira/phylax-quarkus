package net.civeira.phylax.features.access.tenant.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.tenant.Tenant;
import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenant.gateway.TenantWriteRepositoryGateway;
import net.civeira.phylax.features.access.tenant.infrastructure.event.TenantEventDispacher;
import net.civeira.phylax.features.access.tenant.infrastructure.repository.TenantRepository;
import net.civeira.phylax.features.access.tenant.query.TenantCursor;
import net.civeira.phylax.features.access.tenant.query.TenantFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantWriteGatewayAdapter implements TenantWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TenantEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TenantRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(TenantFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public Tenant create(Tenant entity) {
    Tenant result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public Tenant create(Tenant entity, Predicate<Tenant> verifier) {
    Tenant result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(Tenant entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public Tenant enrichForUpdate(TenantRef reference) {
    return repository.enrichForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<TenantFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<Tenant> findForUpdate(TenantFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<Tenant> listForUpdate(TenantFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<Tenant> retrieveForUpdate(String uid, Optional<TenantFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<Tenant> slideForUpdate(TenantFilter filter, TenantCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public Tenant update(TenantRef reference, Tenant entity) {
    Tenant result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
