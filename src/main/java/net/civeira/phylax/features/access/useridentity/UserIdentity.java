package net.civeira.phylax.features.access.useridentity;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyRef;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;
import net.civeira.phylax.features.access.user.UserRef;
import net.civeira.phylax.features.access.useridentity.command.UserIdentityWriteAttributes;
import net.civeira.phylax.features.access.useridentity.event.UserIdentityCreateEvent;
import net.civeira.phylax.features.access.useridentity.event.UserIdentityDeleteEvent;
import net.civeira.phylax.features.access.useridentity.event.UserIdentityEvent;
import net.civeira.phylax.features.access.useridentity.event.UserIdentityUpdateEvent;
import net.civeira.phylax.features.access.useridentity.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.useridentity.valueobject.RolesVO;
import net.civeira.phylax.features.access.useridentity.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.useridentity.valueobject.UidVO;
import net.civeira.phylax.features.access.useridentity.valueobject.UserVO;
import net.civeira.phylax.features.access.useridentity.valueobject.VersionVO;

@AllArgsConstructor
@Getter
@ToString
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class UserIdentity implements UserIdentityRef {

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public static UserIdentity create(final UserIdentityWriteAttributes attributes) {
    UserIdentity instance = new UserIdentity(attributes, Optional.empty());
    instance.addEvent(UserIdentityCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public static Set<String> readonlyFields() {
    return Set.of();
  }

  /**
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private List<UserIdentityEvent> recordedEvents = List.of();

  /**
   * El relying party de user identity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private RelyingPartyVO relyingParty = RelyingPartyVO.nullValue();

  /**
   * El roles de user identity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private RolesVO roles;

  /**
   * El trusted client de user identity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private TrustedClientVO trustedClient = TrustedClientVO.nullValue();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UidVO uid;

  /**
   * El user de user identity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UserVO user;

  /**
   * Campo con el n√∫mero de version de user identity para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VersionVO version = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private UserIdentity(final UserIdentityWriteAttributes attribute,
      final Optional<UserIdentity> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uid = attribute.getUid().orElse(previous.map(UserIdentity::getUid).orElse(null));
    this.user = attribute.getUser().orElse(previous.map(UserIdentity::getUser).orElse(null));
    this.relyingParty = attribute.getRelyingParty()
        .orElse(previous.map(UserIdentity::getRelyingParty).orElseGet(RelyingPartyVO::nullValue));
    this.trustedClient = attribute.getTrustedClient()
        .orElse(previous.map(UserIdentity::getTrustedClient).orElseGet(TrustedClientVO::nullValue));
    this.roles = attribute.getRoles()
        .orElse(previous.map(UserIdentity::getRoles).orElseGet(() -> RolesVO.from(List.of())));
    this.version = attribute.getVersion()
        .orElse(previous.map(UserIdentity::getVersion).orElseGet(VersionVO::nullValue));
    if (null == uid) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == user) {
      list.add(new ConstraintFail("REQUIRED", "user", null));
    }
    if (null == roles) {
      list.add(new ConstraintFail("REQUIRED", "roles", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(UserIdentity::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public UserIdentity delete() {
    UserIdentity instance = this;
    instance.addEvent(UserIdentityDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getRelyingPartyReferenceValue() {
    return getRelyingParty().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<RelyingPartyRef> getRelyingPartyValue() {
    return getRelyingParty().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public List<Roles> getRolesValue() {
    return getRoles().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getTrustedClientReferenceValue() {
    return getTrustedClient().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<TrustedClientRef> getTrustedClientValue() {
    return getTrustedClient().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  @Override
  public String getUidValue() {
    return this.uid.getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getUserReferenceValue() {
    return getUser().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public UserRef getUserValue() {
    return getUser().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public UserIdentity nextVersion() {
    return UserIdentity.builder().uid(this.uid).user(this.user).relyingParty(this.relyingParty)
        .trustedClient(this.trustedClient).roles(this.roles)
        .version(VersionVO.from(this.version() + 1)).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public UserIdentity update(final UserIdentityWriteAttributes attributes) {
    UserIdentity instance = new UserIdentity(attributes, Optional.of(this));
    instance.addEvent(UserIdentityUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer version() {
    return this.getVersion().getValue().orElse(0);
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final UserIdentityEvent event) {
    List<UserIdentityEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
