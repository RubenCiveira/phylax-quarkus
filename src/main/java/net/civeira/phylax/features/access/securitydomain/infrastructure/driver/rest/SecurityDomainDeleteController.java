package net.civeira.phylax.features.access.securitydomain.infrastructure.driver.rest;

import java.util.List;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.securitydomain.application.usecase.delete.SecurityDomainCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.securitydomain.application.usecase.delete.SecurityDomainDeleteFilter;
import net.civeira.phylax.features.access.securitydomain.application.usecase.delete.SecurityDomainDeleteUsecase;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;

@RequiredArgsConstructor
public class SecurityDomainDeleteController {

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated DeleteControllerGenerator
   */
  private final SecurityDomainDeleteUsecase delete;

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uids
   * @param search
   * @param enabled
   * @param name
   * @return
   */
  public Response securityDomainApiBatchDelete(final List<String> uids, final String search,
      final Boolean enabled, final String name) {
    SecurityDomainDeleteFilter.SecurityDomainDeleteFilterBuilder filterBuilder =
        SecurityDomainDeleteFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.enabled(enabled);
    filterBuilder = filterBuilder.name(name);
    SecurityDomainDeleteFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param batchId
   * @return
   */
  public Response securityDomainApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(SecurityDomainCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated DeleteControllerGenerator
   * @param uid
   * @return
   */
  @Transactional
  public Response securityDomainApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), SecurityDomainReference.of(uid));
    return Response.noContent().build();
  }
}
