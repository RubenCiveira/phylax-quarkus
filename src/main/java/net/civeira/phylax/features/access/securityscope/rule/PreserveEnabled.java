package net.civeira.phylax.features.access.securityscope.rule;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.securityscope.SecurityScope;
import net.civeira.phylax.features.access.securityscope.SecurityScopeMetadataProvider;
import net.civeira.phylax.features.access.securityscope.transition.SecurityScopeChangeProposal;
import net.civeira.phylax.features.access.securityscope.transition.create.SecurityScopeCreateStep;
import net.civeira.phylax.features.access.securityscope.transition.create.SecurityScopeCreateTransition;
import net.civeira.phylax.features.access.securityscope.transition.update.SecurityScopeUpdateStep;
import net.civeira.phylax.features.access.securityscope.transition.update.SecurityScopeUpdateTransition;
import net.civeira.phylax.features.access.securityscope.valueobject.EnabledVO;

@ApplicationScoped
@RequiredArgsConstructor
public class PreserveEnabled
    implements SecurityScopeMetadataProvider, SecurityScopeCreateStep, SecurityScopeUpdateStep {

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public SecurityScope create(final SecurityScopeCreateTransition transition,
      final Function<SecurityScopeCreateTransition, SecurityScope> next) {
    return next.apply(transition.map(calculate(transition.getData(), Optional.empty())));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @return
   */
  @Override
  public Set<String> readonlyFields() {
    return Set.of("enabled");
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveEnabled
   * @return
   */
  @Override
  public SecurityScope update(final SecurityScopeUpdateTransition transition,
      final Function<SecurityScopeUpdateTransition, SecurityScope> next) {
    return next.apply(
        transition.map(calculate(transition.getData(), Optional.of(transition.getOriginal()))));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param attributes
   * @param original
   * @return
   */
  private SecurityScopeChangeProposal calculate(final SecurityScopeChangeProposal attributes,
      final Optional<SecurityScope> original) {
    return attributes.setEnabled(
        original.map(SecurityScope::getEnabled).flatMap(EnabledVO::getValue).orElseGet(() -> true));
  }
}
