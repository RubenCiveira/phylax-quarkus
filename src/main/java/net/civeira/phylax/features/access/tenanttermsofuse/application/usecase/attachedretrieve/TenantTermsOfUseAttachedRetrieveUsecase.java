package net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.attachedretrieve;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.infrastructure.store.BinaryContent;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUse;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUseRef;
import net.civeira.phylax.features.access.tenanttermsofuse.application.service.visibility.TenantTermsOfUsesVisibility;
import net.civeira.phylax.features.access.tenanttermsofuse.gateway.TenantTermsOfUseAttachedUploadGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantTermsOfUseAttachedRetrieveUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<TenantTermsOfUseAllowAttachedRetrieveProposal> retrieveAllowEmitter;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final TenantTermsOfUseAttachedUploadGateway store;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final TenantTermsOfUsesVisibility visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final TenantTermsOfUseRef reference) {
    TenantTermsOfUseAllowAttachedRetrieveProposal base =
        TenantTermsOfUseAllowAttachedRetrieveProposal.builder()
            .detail(Allow.builder().allowed(true).description("Allowed by default").build())
            .query(query).reference(reference).build();
    retrieveAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    TenantTermsOfUseAllowAttachedRetrieveProposal base =
        TenantTermsOfUseAllowAttachedRetrieveProposal.builder()
            .detail(Allow.builder().allowed(true).description("Allowed by default").build())
            .query(query).build();
    retrieveAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return The slide with some values
   */
  public BinaryContent read(final Interaction query, final TenantTermsOfUseRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    TenantTermsOfUse entity = visibility.retrieveVisible(query, reference.getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    return store.readAttached(entity).orElseThrow(() -> new NotFoundException(""));
  }
}
