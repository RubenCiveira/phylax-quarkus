package net.civeira.phylax.features.access.scopeassignation.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.experimental.Delegate;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.scopeassignation.domain.event.ScopeAssignationCreateEvent;
import net.civeira.phylax.features.access.scopeassignation.domain.event.ScopeAssignationDeleteEvent;
import net.civeira.phylax.features.access.scopeassignation.domain.event.ScopeAssignationEvent;
import net.civeira.phylax.features.access.scopeassignation.domain.event.ScopeAssignationUpdateEvent;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.SecurityDomainVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.SecurityScopeVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.scopeassignation.domain.valueobject.VersionVO;

/**
 * Witch scopes are assigned to the security domain
 */
@Builder
@Getter
@With
@ToString
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode
public class ScopeAssignation implements ScopeAssignationRef {

  /**
   * Prepare a new scope assignation with the provided values
   *
   * @autogenerated EntityGenerator
   * @param change A set of values to create a new scope assignation
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A well formed scope assignation.
   */
  public static ScopeAssignation create(final ScopeAssignationChangeSet change)
      throws ConstraintException {
    ScopeAssignation instance = new ScopeAssignation(change, Optional.empty());
    instance.addEvent(ScopeAssignationCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * List of events
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private List<ScopeAssignationEvent> recordedEvents = List.of();

  /**
   * El security domain de scope assignation
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private SecurityDomainVO securityDomainValue;

  /**
   * El security scope de scope assignation
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private SecurityScopeVO securityScopeValue;

  /**
   * El uid de scope assignation
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @NonNull
  private UidVO uidValue;

  /**
   * Campo con el n√∫mero de version de scope assignation para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Delegate
  @Builder.Default
  private VersionVO versionValue = VersionVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private ScopeAssignation(final ScopeAssignationChangeSet attribute,
      final Optional<ScopeAssignation> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uidValue =
        attribute.getUid().orElse(previous.map(ScopeAssignation::getUidValue).orElse(null));
    this.securityDomainValue = attribute.getSecurityDomain()
        .orElse(previous.map(ScopeAssignation::getSecurityDomainValue).orElse(null));
    this.securityScopeValue = attribute.getSecurityScope()
        .orElse(previous.map(ScopeAssignation::getSecurityScopeValue).orElse(null));
    this.versionValue = attribute.getVersion()
        .orElse(previous.map(ScopeAssignation::getVersionValue).orElseGet(VersionVO::nullValue));
    if (null == uidValue) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == securityDomainValue) {
      list.add(new ConstraintFail("REQUIRED", "securityDomain", null));
    }
    if (null == securityScopeValue) {
      list.add(new ConstraintFail("REQUIRED", "securityScope", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(ScopeAssignation::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * Apply changes to delete a scope assignation
   *
   * @autogenerated EntityGenerator
   * @return A instance of scope assignation ready to be deleted
   */
  public ScopeAssignation delete() {
    ScopeAssignation instance = this;
    instance.addEvent(ScopeAssignationDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * Modify the values for some of the properties of a scope assignation
   *
   * @autogenerated EntityGenerator
   * @param change The properties to be modified
   * @throws ConstraintException If there are some constraints fails on the changes.
   * @return A modified instance of scope assignation
   */
  public ScopeAssignation update(final ScopeAssignationChangeSet change)
      throws ConstraintException {
    ScopeAssignation instance = new ScopeAssignation(change, Optional.of(this));
    instance.addEvent(ScopeAssignationUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public ScopeAssignation withNextVersion() {
    return withVersionValue(VersionVO.from(nextVersion()));
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final ScopeAssignationEvent event) {
    List<ScopeAssignationEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
