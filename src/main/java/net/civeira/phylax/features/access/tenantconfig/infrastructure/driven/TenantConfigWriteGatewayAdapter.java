package net.civeira.phylax.features.access.tenantconfig.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.tenantconfig.TenantConfig;
import net.civeira.phylax.features.access.tenantconfig.TenantConfigRef;
import net.civeira.phylax.features.access.tenantconfig.gateway.TenantConfigWriteRepositoryGateway;
import net.civeira.phylax.features.access.tenantconfig.infrastructure.event.TenantConfigEventDispacher;
import net.civeira.phylax.features.access.tenantconfig.infrastructure.repository.TenantConfigRepository;
import net.civeira.phylax.features.access.tenantconfig.query.TenantConfigCursor;
import net.civeira.phylax.features.access.tenantconfig.query.TenantConfigFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantConfigWriteGatewayAdapter implements TenantConfigWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TenantConfigEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final TenantConfigRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(TenantConfigFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public TenantConfig create(TenantConfig entity) {
    TenantConfig result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public TenantConfig create(TenantConfig entity, Predicate<TenantConfig> verifier) {
    TenantConfig result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(TenantConfig entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public TenantConfig enrichForUpdate(TenantConfigRef reference) {
    return repository.enrichForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<TenantConfigFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<TenantConfig> findForUpdate(TenantConfigFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<TenantConfig> listForUpdate(TenantConfigFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<TenantConfig> retrieveForUpdate(String uid, Optional<TenantConfigFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<TenantConfig> slideForUpdate(TenantConfigFilter filter, TenantConfigCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public TenantConfig update(TenantConfigRef reference, TenantConfig entity) {
    TenantConfig result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
