package net.civeira.phylax.features.access.tenantconfig.infrastructure.driven;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.tenantconfig.TenantConfig;
import net.civeira.phylax.features.access.tenantconfig.TenantConfigRef;
import net.civeira.phylax.features.access.tenantconfig.gateway.TenantConfigReadRepositoryGateway;
import net.civeira.phylax.features.access.tenantconfig.infrastructure.repository.TenantConfigRepository;
import net.civeira.phylax.features.access.tenantconfig.query.TenantConfigCursor;
import net.civeira.phylax.features.access.tenantconfig.query.TenantConfigFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class TenantConfigReadGatewayAdapter implements TenantConfigReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final TenantConfigRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(TenantConfigFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public TenantConfig enrich(TenantConfigRef reference) {
    return repository.enrich(reference);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<TenantConfigFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<TenantConfig> find(TenantConfigFilter filter) {
    return repository.find(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<TenantConfig> list(TenantConfigFilter filter) {
    return repository.list(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<TenantConfig> retrieve(String uid, Optional<TenantConfigFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<TenantConfig> slide(TenantConfigFilter filter, TenantConfigCursor cursor) {
    return repository.slide(filter, cursor);
  }
}
