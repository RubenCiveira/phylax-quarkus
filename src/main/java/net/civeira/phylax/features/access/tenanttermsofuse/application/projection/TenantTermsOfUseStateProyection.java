package net.civeira.phylax.features.access.tenanttermsofuse.application.projection;

import java.time.OffsetDateTime;
import java.util.Optional;

import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUse;

public class TenantTermsOfUseStateProyection {

  /**
   * Date when the Terms of Use become active.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<OffsetDateTime> activationDate = Optional.empty();

  /**
   * An optional file attachment (e.g., PDF or signed document).
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> attached = Optional.empty();

  /**
   * The tenant this Terms of Use document belongs to.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<TenantRef> tenant = Optional.empty();

  /**
   * The content of the Terms of Use document.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> text = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant terms of use para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public TenantTermsOfUseStateProyection(final TenantTermsOfUse entity) {
    uid = Optional.of(entity.getUid().getValue());
    tenant = Optional.of(entity.getTenant().getValue());
    text = Optional.of(entity.getText().getValue());
    attached = entity.getAttached().getValue();
    activationDate = entity.getActivationDate().getValue();
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<OffsetDateTime> getActivationDate() {
    return activationDate;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getAttached() {
    return attached;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<TenantRef> getTenant() {
    return tenant;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getText() {
    return text;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateProyection setActivationDate(final Optional<OffsetDateTime> value) {
    this.activationDate = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateProyection setAttached(final Optional<String> value) {
    this.attached = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateProyection setTenant(final Optional<TenantRef> value) {
    this.tenant = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateProyection setText(final Optional<String> value) {
    this.text = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantTermsOfUseStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("text".equals(field)) {
      this.unsetText();
    }
    if ("attached".equals(field)) {
      this.unsetAttached();
    }
    if ("activationDate".equals(field)) {
      this.unsetActivationDate();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantTermsOfUseStateProyection unsetActivationDate() {
    this.activationDate = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantTermsOfUseStateProyection unsetAttached() {
    this.attached = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantTermsOfUseStateProyection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantTermsOfUseStateProyection unsetText() {
    this.text = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantTermsOfUseStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantTermsOfUseStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
