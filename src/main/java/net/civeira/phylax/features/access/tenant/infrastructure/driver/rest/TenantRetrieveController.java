package net.civeira.phylax.features.access.tenant.infrastructure.driver.rest;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.tenant.application.usecase.retrieve.TenantRetrieveProjection;
import net.civeira.phylax.features.access.tenant.application.usecase.retrieve.TenantRetrieveUsecase;
import net.civeira.phylax.features.access.tenant.domain.RelingParties;
import net.civeira.phylax.features.access.tenant.domain.TenantReference;
import net.civeira.phylax.features.access.tenant.domain.TrustedClients;
import net.civeira.phylax.generated.openapi.model.RelingPartiesApiDto;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.TenantApiDto;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;
import net.civeira.phylax.generated.openapi.model.TrustedClientsApiDto;

@RequiredArgsConstructor
@RequestScoped
public class TenantRetrieveController {

  /**
   * @autogenerated RetrieveControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated RetrieveControllerGenerator
   */
  private final TenantRetrieveUsecase retrieve;

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param uid
   * @return
   */
  public Response tenantApiRetrieve(final String uid) {
    TenantRetrieveProjection retrieved =
        retrieve.retrieve(currentRequest.interaction(), TenantReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param dto
   * @return
   */
  private TenantApiDto toApiModel(TenantRetrieveProjection dto) {
    TenantApiDto tenantApiDto = new TenantApiDto();
    tenantApiDto.setUid(dto.getUid());
    tenantApiDto.setName(dto.getName());
    tenantApiDto.setDomain(dto.getDomain());
    tenantApiDto.setEnabled(dto.getEnabled());
    tenantApiDto.setAccessToAllApplications(dto.getAccessToAllApplications());
    tenantApiDto.setTrustedClients(
        dto.getTrustedClients().stream().map(this::toApiModelTrustedClients).toList());
    tenantApiDto.setRelingParties(
        dto.getRelingParties().stream().map(this::toApiModelRelingParties).toList());
    tenantApiDto.setVersion(dto.getVersion());
    return tenantApiDto;
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param dto
   * @return
   */
  private RelingPartiesApiDto toApiModelRelingParties(RelingParties dto) {
    RelingPartiesApiDto relingPartiesApiDto = new RelingPartiesApiDto();
    relingPartiesApiDto.setUid(dto.getUid());
    relingPartiesApiDto.setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyUid()));
    relingPartiesApiDto.setVersion(dto.getVersion().orElse(null));
    return relingPartiesApiDto;
  }

  /**
   * @autogenerated RetrieveControllerGenerator
   * @param dto
   * @return
   */
  private TrustedClientsApiDto toApiModelTrustedClients(TrustedClients dto) {
    TrustedClientsApiDto trustedClientsApiDto = new TrustedClientsApiDto();
    trustedClientsApiDto.setUid(dto.getUid());
    trustedClientsApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientUid()));
    trustedClientsApiDto.setVersion(dto.getVersion().orElse(null));
    return trustedClientsApiDto;
  }
}
