package net.civeira.phylax.features.access.trustedclient.infrastructure.driver.rest;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.trustedclient.application.usecase.update.TrustedClientUpdateInput;
import net.civeira.phylax.features.access.trustedclient.application.usecase.update.TrustedClientUpdateProjection;
import net.civeira.phylax.features.access.trustedclient.application.usecase.update.TrustedClientUpdateUsecase;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiDto;

@RequiredArgsConstructor
@RequestScoped
public class TrustedClientUpdateController {

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final TrustedClientUpdateUsecase update;

  /**
   * @autogenerated UpdateControllerGenerator
   * @param uid
   * @param trustedClient
   * @return
   */
  @Transactional
  public Response trustedClientApiUpdate(final String uid,
      final TrustedClientApiDto trustedClient) {
    TrustedClientUpdateProjection updated = update.update(currentRequest.interaction(),
        TrustedClientReference.of(uid), toDomainModel(trustedClient));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param dto
   * @return
   */
  private TrustedClientApiDto toApiModel(TrustedClientUpdateProjection dto) {
    TrustedClientApiDto trustedClientApiDto = new TrustedClientApiDto();
    trustedClientApiDto.setUid(dto.getUid());
    trustedClientApiDto.setCode(dto.getCode());
    trustedClientApiDto.setPublicAllow(dto.getPublicAllow());
    trustedClientApiDto.setSecretOauth("*****");
    trustedClientApiDto.setAllowedRedirects(dto.getAllowedRedirects());
    trustedClientApiDto.setEnabled(dto.getEnabled());
    trustedClientApiDto.setVersion(dto.getVersion());
    return trustedClientApiDto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param trustedClientApiDto
   * @return
   */
  private TrustedClientUpdateInput toDomainModel(TrustedClientApiDto trustedClientApiDto) {
    TrustedClientUpdateInput dto = new TrustedClientUpdateInput();
    if (null != trustedClientApiDto.getUid()) {
      dto.setUid(trustedClientApiDto.getUid());
    }
    if (null != trustedClientApiDto.getCode()) {
      dto.setCode(trustedClientApiDto.getCode());
    }
    if (null != trustedClientApiDto.getPublicAllow()) {
      dto.setPublicAllow(trustedClientApiDto.getPublicAllow());
    }
    if (null != trustedClientApiDto.getSecretOauth()
        && !"*****".equals(trustedClientApiDto.getSecretOauth())) {
      dto.setSecretOauth(trustedClientApiDto.getSecretOauth());
    }
    if (null != trustedClientApiDto.getAllowedRedirects()) {
      dto.setAllowedRedirects(trustedClientApiDto.getAllowedRedirects());
    }
    if (null != trustedClientApiDto.getEnabled()) {
      dto.setEnabled(trustedClientApiDto.getEnabled());
    }
    if (null != trustedClientApiDto.getVersion()) {
      dto.setVersion(trustedClientApiDto.getVersion());
    }
    return dto;
  }
}
