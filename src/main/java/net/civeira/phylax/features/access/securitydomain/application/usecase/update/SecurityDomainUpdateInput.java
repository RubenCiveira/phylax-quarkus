package net.civeira.phylax.features.access.securitydomain.application.usecase.update;

import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainChangeSet;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.LevelVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.ManageAllVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.ReadAllVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.WriteAllVO;

/**
 * A dto transfer to hold security domain attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class SecurityDomainUpdateInput {

  /**
   * @autogenerated UpdateInputGenerator
   */
  public static class SecurityDomainUpdateInputBuilder {

    /**
     * Append Enabled crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param enabled The Enabled value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder enabled(final Boolean enabled) {
      return enabled(Optional.of(EnabledVO.from(enabled)));
    }

    /**
     * Append Enabled value
     *
     * @autogenerated UpdateInputGenerator
     * @param enabled The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder enabled(final Optional<EnabledVO> enabled) {
      this.enabled$value = enabled;
      this.enabled$set = true;
      return this;
    }

    /**
     * Append Level crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param level The Level value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder level(final Integer level) {
      return level(Optional.of(LevelVO.from(level)));
    }

    /**
     * Append Level value
     *
     * @autogenerated UpdateInputGenerator
     * @param level The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder level(final Optional<LevelVO> level) {
      this.level$value = level;
      this.level$set = true;
      return this;
    }

    /**
     * Append ManageAll crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param manageAll The ManageAll value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder manageAll(final Boolean manageAll) {
      return manageAll(Optional.of(ManageAllVO.from(manageAll)));
    }

    /**
     * Append ManageAll value
     *
     * @autogenerated UpdateInputGenerator
     * @param manageAll The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder manageAll(final Optional<ManageAllVO> manageAll) {
      this.manageAll$value = manageAll;
      this.manageAll$set = true;
      return this;
    }

    /**
     * Append Name crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param name The Name value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder name(final String name) {
      return name(Optional.of(NameVO.from(name)));
    }

    /**
     * Append Name value
     *
     * @autogenerated UpdateInputGenerator
     * @param name The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder name(final Optional<NameVO> name) {
      this.name$value = name;
      this.name$set = true;
      return this;
    }

    /**
     * @autogenerated UpdateInputGenerator
     * @return
     */
    public SecurityDomainUpdateInputBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * Append ReadAll crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param readAll The ReadAll value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder readAll(final Boolean readAll) {
      return readAll(Optional.of(ReadAllVO.from(readAll)));
    }

    /**
     * Append ReadAll value
     *
     * @autogenerated UpdateInputGenerator
     * @param readAll The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder readAll(final Optional<ReadAllVO> readAll) {
      this.readAll$value = readAll;
      this.readAll$set = true;
      return this;
    }

    /**
     * Append Uid crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param uid The Uid value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * Append Uid value
     *
     * @autogenerated UpdateInputGenerator
     * @param uid The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * Append Version crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param version The Version value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * Append Version value
     *
     * @autogenerated UpdateInputGenerator
     * @param version The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }

    /**
     * Append WriteAll crud value and convert as value object.
     *
     * @autogenerated UpdateInputGenerator
     * @param writeAll The WriteAll value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder writeAll(final Boolean writeAll) {
      return writeAll(Optional.of(WriteAllVO.from(writeAll)));
    }

    /**
     * Append WriteAll value
     *
     * @autogenerated UpdateInputGenerator
     * @param writeAll The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public SecurityDomainUpdateInputBuilder writeAll(final Optional<WriteAllVO> writeAll) {
      this.writeAll$value = writeAll;
      this.writeAll$set = true;
      return this;
    }
  }

  /**
   * @autogenerated UpdateInputGenerator
   * @param input
   * @return
   */
  static SecurityDomainUpdateInput fromChangeSet(final SecurityDomainChangeSet input) {
    return SecurityDomainUpdateInput.builder().uid(input.getUid()).name(input.getName())
        .level(input.getLevel()).readAll(input.getReadAll()).writeAll(input.getWriteAll())
        .manageAll(input.getManageAll()).enabled(input.getEnabled()).version(input.getVersion())
        .build();
  }

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<EnabledVO> enabled = Optional.empty();

  /**
   * The user inherit level, and can view only domain with his level or lower
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<LevelVO> level = Optional.empty();

  /**
   * Allow to write on every scope
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<ManageAllVO> manageAll = Optional.empty();

  /**
   * El name de security domain
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * Allow to read on every scope
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<ReadAllVO> readAll = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de security domain para controlar bloqueos optimistas
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Allow to write on every scope
   *
   * @autogenerated UpdateInputGenerator
   */
  @Builder.Default
  private Optional<WriteAllVO> writeAll = Optional.empty();

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Optional<EnabledVO> getEnabled() {
    return enabled;
  }

  /**
   * Inform for a possible change propolsal in Level
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Level, otherwise the value for Level
   */
  public Optional<LevelVO> getLevel() {
    return level;
  }

  /**
   * Inform for a possible change propolsal in ManageAll
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for ManageAll, otherwise the value for ManageAll
   */
  public Optional<ManageAllVO> getManageAll() {
    return manageAll;
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * Inform for a possible change propolsal in ReadAll
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for ReadAll, otherwise the value for ReadAll
   */
  public Optional<ReadAllVO> getReadAll() {
    return readAll;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Inform for a possible change propolsal in WriteAll
   *
   * @autogenerated UpdateInputGenerator
   * @return empty if there is no change proposal for WriteAll, otherwise the value for WriteAll
   */
  public Optional<WriteAllVO> getWriteAll() {
    return writeAll;
  }

  /**
   * Assigna change proposal for Enabled to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for SecurityDomainUpdateInput
   * @return self instance to enable a flow code
   */
  public SecurityDomainUpdateInput setEnabled(final Boolean value) {
    this.enabled = Optional.of(EnabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Level to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for SecurityDomainUpdateInput
   * @return self instance to enable a flow code
   */
  public SecurityDomainUpdateInput setLevel(final Integer value) {
    this.level = Optional.of(LevelVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for ManageAll to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for SecurityDomainUpdateInput
   * @return self instance to enable a flow code
   */
  public SecurityDomainUpdateInput setManageAll(final Boolean value) {
    this.manageAll = Optional.of(ManageAllVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Name to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for SecurityDomainUpdateInput
   * @return self instance to enable a flow code
   */
  public SecurityDomainUpdateInput setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for ReadAll to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for SecurityDomainUpdateInput
   * @return self instance to enable a flow code
   */
  public SecurityDomainUpdateInput setReadAll(final Boolean value) {
    this.readAll = Optional.of(ReadAllVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for SecurityDomainUpdateInput
   * @return self instance to enable a flow code
   */
  public SecurityDomainUpdateInput setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for SecurityDomainUpdateInput
   * @return self instance to enable a flow code
   */
  public SecurityDomainUpdateInput setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for WriteAll to be apply for the aggregate.
   *
   * @autogenerated UpdateInputGenerator
   * @param value The proposal value for SecurityDomainUpdateInput
   * @return self instance to enable a flow code
   */
  public SecurityDomainUpdateInput setWriteAll(final Boolean value) {
    this.writeAll = Optional.of(WriteAllVO.from(value));
    return this;
  }

  /**
   * @autogenerated UpdateInputGenerator
   * @return
   */
  SecurityDomainChangeSet toChangeSet() {
    return SecurityDomainChangeSet.builder().uid(uid).name(name).level(level).readAll(readAll)
        .writeAll(writeAll).manageAll(manageAll).enabled(enabled).version(version).build();
  }
}
