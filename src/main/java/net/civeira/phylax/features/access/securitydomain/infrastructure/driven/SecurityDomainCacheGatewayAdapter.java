package net.civeira.phylax.features.access.securitydomain.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.features.access.securitydomain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainCacheGateway;
import net.civeira.phylax.features.access.securitydomain.gateway.SecurityDomainCached;
import net.civeira.phylax.features.access.securitydomain.query.SecurityDomainCursor;
import net.civeira.phylax.features.access.securitydomain.query.SecurityDomainFilter;

@ApplicationScoped
@Slf4j
@RequiredArgsConstructor
public class SecurityDomainCacheGatewayAdapter implements SecurityDomainCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("security-domain")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param securityDomain
   */
  @Override
  public void remove(final SecurityDomain securityDomain) {
    log.trace("Invalidating securityDomain cache due to the removal of {}", securityDomain);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<SecurityDomainCached> retrieve(final SecurityDomainFilter filter,
      final SecurityDomainCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at securityDomain cache for the key {}", key);
    return cache.<String, SecurityDomainCached>get(key, k -> null)
        .map(cached -> Optional.ofNullable(cached)).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param securityDomains
   * @return
   */
  public SecurityDomainCached store(final SecurityDomainFilter filter,
      final SecurityDomainCursor cursor, final List<SecurityDomain> securityDomains) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache.<String, SecurityDomainCached>get(key, k -> SecurityDomainCached.builder()
        .since(OffsetDateTime.now()).value(securityDomains).build()).await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param securityDomain
   */
  @Override
  public void update(final SecurityDomain securityDomain) {
    log.trace("Invalidating securityDomain cache due to the update of {}", securityDomain);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final SecurityDomainFilter filter, final SecurityDomainCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
