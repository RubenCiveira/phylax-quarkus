package net.civeira.phylax.features.access.user.application.service.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.tenant.application.service.visibility.TenantsVisibility;
import net.civeira.phylax.features.access.user.User;
import net.civeira.phylax.features.access.user.UserFacade;
import net.civeira.phylax.features.access.user.UserRef;
import net.civeira.phylax.features.access.user.application.projection.UserStateProyection;
import net.civeira.phylax.features.access.user.application.request.UserStateChange;
import net.civeira.phylax.features.access.user.gateway.UserCacheGateway;
import net.civeira.phylax.features.access.user.gateway.UserCached;
import net.civeira.phylax.features.access.user.gateway.UserReadRepositoryGateway;
import net.civeira.phylax.features.access.user.gateway.UserWriteRepositoryGateway;
import net.civeira.phylax.features.access.user.query.UserCursor;
import net.civeira.phylax.features.access.user.query.UserFilter;
import net.civeira.phylax.features.access.user.valueobject.TenantVO;

@ApplicationScoped
@RequiredArgsConstructor
public class UsersVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UserFacade aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UserCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserFilterProposal> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserFixedFieldsProposal> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserVisibleContentProposal> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserHiddenFieldsProposal> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<UserPresetProposal> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TenantsVisibility tenantsVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UserReadRepositoryGateway userReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final UserWriteRepositoryGateway userWriteRepositoryGateway;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, UserFilter.builder().uids(uids).build(),
        UserCursor.builder().build()).size();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public UserStateChange copyWithFixed(Interaction prev, UserStateChange source, User original) {
    UserStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    UserPresetProposal proposal = UserPresetProposal.builder().dto(withReferences).interaction(prev)
        .original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public UserStateChange copyWithFixed(Interaction prev, UserStateChange source) {
    UserStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    UserPresetProposal proposal =
        UserPresetProposal.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param user
   * @return The input dto with hidden values
   */
  public UserStateProyection copyWithHidden(Interaction prev, User user) {
    UserStateProyection target = new UserStateProyection(user);
    fieldsToHide(prev, user).forEach(target::unset);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, UserFilter filter) {
    return userReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.readonlyFields());
    UserFixedFieldsProposal proposal =
        UserFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param user
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, UserRef user) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, user));
    fields.addAll(aggregate.readonlyFields());
    UserFixedFieldsProposal proposal =
        UserFixedFieldsProposal.builder().fields(fields).user(user).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    UserHiddenFieldsProposal proposal =
        UserHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param user
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, UserRef user) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    UserHiddenFieldsProposal proposal =
        UserHiddenFieldsProposal.builder().fields(fields).user(user).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public UserCached listCachedVisibles(Interaction prev, UserFilter filter, UserCursor cursor) {
    UserFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<User> listVisibles(Interaction prev, UserFilter filter, UserCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<User> listVisiblesForUpdate(Interaction prev, UserFilter filter, UserCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public UserCached retrieveCachedVisible(Interaction prev, String uid) {
    UserCursor cursor = UserCursor.builder().limit(1).build();
    UserFilter visibleFilter =
        applyPreVisibilityFilter(prev, UserFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<User> list = retrieveVisible(prev, uid).<List<User>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<User> retrieveVisible(Interaction prev, String uid) {
    UserFilter filter = applyPreVisibilityFilter(prev, UserFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<User> retrieveVisibleForUpdate(Interaction prev, String uid) {
    UserFilter filter = applyPreVisibilityFilter(prev, UserFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private UserFilter applyPreVisibilityFilter(Interaction prev, UserFilter filter) {
    UserFilterProposal proposal =
        UserFilterProposal.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    return proposal.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param userRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, User userRef) {
    UserVisibleContentProposal proposal = UserVisibleContentProposal.builder().visible(true)
        .entity(userRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<User> queryItem(Interaction prev, String uid, UserFilter filter) {
    return userReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<User> queryItemForUpdate(Interaction prev, String uid, UserFilter filter) {
    return userWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<User> queryItems(Interaction prev, UserFilter filter, UserCursor cursor) {
    List<User> list = new ArrayList<>();
    Iterator<User> slide = userReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<User> queryItemsForUpdate(Interaction prev, UserFilter filter, UserCursor cursor) {
    List<User> list = new ArrayList<>();
    Iterator<User> slide = userWriteRepositoryGateway.slideForUpdate(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private UserStateChange visiblesReferences(Interaction prev, UserStateChange source) {
    source.getTenant().flatMap(TenantVO::getReferenceValue).ifPresent(ref -> {
      boolean visible = tenantsVisibility.checkVisibility(prev, ref);
      if (!visible) {
        throw new NotFoundException("No tenant - " + ref);
      }
    });
    return source;
  }
}
