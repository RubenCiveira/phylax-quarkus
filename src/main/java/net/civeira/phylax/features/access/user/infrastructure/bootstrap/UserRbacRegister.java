package net.civeira.phylax.features.access.user.infrastructure.bootstrap;

import java.util.List;

import io.quarkus.runtime.StartupEvent;
import jakarta.annotation.Priority;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.security.Rbac;
import net.civeira.phylax.common.security.scope.FieldDescription;
import net.civeira.phylax.common.security.scope.Kind;
import net.civeira.phylax.common.security.scope.ResourceDescription;
import net.civeira.phylax.common.security.scope.ScopeDescription;

@ApplicationScoped
@RequiredArgsConstructor
public class UserRbacRegister {

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private static final ResourceDescription RESOURCE =
      ResourceDescription.builder().name("user").description("user").build();

  /**
   * @autogenerated RegisterGeneratorGenerator
   */
  private final Rbac rbac;

  /**
   * @autogenerated RegisterGeneratorGenerator
   * @param ev
   */
  void registerResource(@Observes @Priority(10) final StartupEvent ev) {
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.READ).name("list")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE,
        ScopeDescription.builder().kind(Kind.READ).name("retrieve").description("list").build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("create")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("update")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("delete")
        .description("list").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE)
        .name("disable").description("").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("enable")
        .description("").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("unlock")
        .description("").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE).name("block")
        .description("").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE)
        .name("set-mfa-seed").description("").required(List.of()).build());
    rbac.registerResourceAction(RESOURCE, ScopeDescription.builder().kind(Kind.WRITE)
        .name("change-password").description("").required(List.of()).build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("uid")
        .description("A uid string to identify the entity").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("tenant")
        .description("Los usuarios que no tienen tenant son roots del sistema").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("name")
        .description("The user name to identify on the login screen").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("password")
        .description("If the user is not delegated, the phrasse to identify").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("email")
        .description("An optional email used to send notifications to the user").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("enabled").description(
        "A disabled user cant login on the system. On his login attempts, he will recive a specific warn of his disabled account.")
        .build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("temporalPassword")
        .description("El temporal password de user").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("useSecondFactors")
        .description("If is true, the user has a otp to force mfa on login").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("secondFactorSeed")
        .description("the seed used to the otp login").build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("blockedUntil").description(
            "A bloqued user cant login on the system, until these date. On his login attempst, hue will recive a generic not allowed message.")
            .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("language").description("El language de user").build());
    rbac.registerResourceField(RESOURCE, FieldDescription.builder().name("provider").description(
        "Si se identificó con un proveedor, se marca con cual (aunque el provedor cambie luego)")
        .build());
    rbac.registerResourceField(RESOURCE,
        FieldDescription.builder().name("version")
            .description(
                "Campo con el número de version de user para controlar bloqueos optimistas")
            .build());
  }
}
