package net.civeira.phylax.features.access.loginprovider;

import java.util.HashSet;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.loginprovider.command.LoginProviderWriteAttributes;
import net.civeira.phylax.features.access.loginprovider.transition.create.LoginProviderCreatePipeline;
import net.civeira.phylax.features.access.loginprovider.transition.delete.LoginProviderDeletePipeline;
import net.civeira.phylax.features.access.loginprovider.transition.disable.LoginProviderDisablePipeline;
import net.civeira.phylax.features.access.loginprovider.transition.enable.LoginProviderEnablePipeline;
import net.civeira.phylax.features.access.loginprovider.transition.update.LoginProviderUpdatePipeline;

@ApplicationScoped
@RequiredArgsConstructor
public class LoginProviderFacade {

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final LoginProviderCreatePipeline createPipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final LoginProviderDeletePipeline deletePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final LoginProviderDisablePipeline disablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final LoginProviderEnablePipeline enablePipeline;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final Instance<LoginProviderMetadataProvider> metadataProvider;

  /**
   * @autogenerated AggregateFacadeGenerator
   */
  private final LoginProviderUpdatePipeline updatePipeline;

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public LoginProvider create(final LoginProviderWriteAttributes attributes) {
    return LoginProvider.create(attributes, createPipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public LoginProvider delete(final LoginProvider entity) {
    return entity.delete(deletePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public LoginProvider disable(final LoginProvider base) {
    return base.disable(disablePipeline);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public LoginProvider enable(final LoginProvider base) {
    return base.enable(enablePipeline);
  }

  /**
   * @autogenerated AggregateFacadeGenerator
   * @return
   */
  public Set<String> readonlyFields() {
    Set<String> set = new HashSet<>();
    metadataProvider.forEach(meta -> set.addAll(meta.readonlyFields()));
    return set;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateFacadeGenerator
   * @param base a filter to retrieve only matching values
   * @param attributes a filter to retrieve only matching values
   * @return The entity
   */
  public LoginProvider update(final LoginProvider base,
      final LoginProviderWriteAttributes attributes) {
    return base.update(attributes, updatePipeline);
  }
}
