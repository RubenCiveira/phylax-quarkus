package net.civeira.phylax.features.access.role.command;

import java.util.List;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.role.Domains;
import net.civeira.phylax.features.access.role.Role;
import net.civeira.phylax.features.access.role.RoleReference;
import net.civeira.phylax.features.access.role.valueobject.DomainsVO;
import net.civeira.phylax.features.access.role.valueobject.NameVO;
import net.civeira.phylax.features.access.role.valueobject.TenantVO;
import net.civeira.phylax.features.access.role.valueobject.UidVO;
import net.civeira.phylax.features.access.role.valueobject.VersionVO;
import net.civeira.phylax.features.access.tenant.TenantRef;

@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RoleChangeProposal implements RoleWriteAttributes {

  /**
   * @autogenerated EntityChangeProposalGenerator
   */
  public static class RoleChangeProposalBuilder {

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param domains
     * @return
     */
    public RoleChangeProposalBuilder domains(final List<Domains> domains) {
      return domains(Optional.of(DomainsVO.from(domains)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param domains
     * @return
     */
    public RoleChangeProposalBuilder domains(final Optional<DomainsVO> domains) {
      this.domains$value = domains;
      this.domains$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param name
     * @return
     */
    public RoleChangeProposalBuilder name(final String name) {
      return name(Optional.of(NameVO.from(name)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param name
     * @return
     */
    public RoleChangeProposalBuilder name(final Optional<NameVO> name) {
      this.name$value = name;
      this.name$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @return
     */
    public RoleChangeProposalBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param tenant
     * @return
     */
    public RoleChangeProposalBuilder tenant(final TenantRef tenant) {
      return tenant(Optional.of(TenantVO.from(tenant)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param tenant
     * @return
     */
    public RoleChangeProposalBuilder tenant(final Optional<TenantVO> tenant) {
      this.tenant$value = tenant;
      this.tenant$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param uid
     * @return
     */
    public RoleChangeProposalBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param uid
     * @return
     */
    public RoleChangeProposalBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param version
     * @return
     */
    public RoleChangeProposalBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * @autogenerated EntityChangeProposalGenerator
     * @param version
     * @return
     */
    public RoleChangeProposalBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * El domains de role
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<DomainsVO> domains = Optional.empty();

  /**
   * The user name to identify on the login screen
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * Domains without a tenant could be used only for admins
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<TenantVO> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de role para controlar bloqueos optimistas
   *
   * @autogenerated EntityChangeProposalGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param attributes
   */
  public RoleChangeProposal(final RoleWriteAttributes attributes) {
    uid = attributes.getUid();
    name = attributes.getName();
    tenant = attributes.getTenant();
    domains = attributes.getDomains();
    version = attributes.getVersion();
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param entity
   */
  public RoleChangeProposal(final Role entity) {
    uid = Optional.of(entity.getUid());
    name = Optional.of(entity.getName());
    tenant = Optional.of(entity.getTenant());
    domains = Optional.of(entity.getDomains());
    version = Optional.of(entity.getVersion());
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public RoleReference asReference() {
    return uid.map(UidVO::getValue).map(RoleReference::of).orElseThrow();
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<DomainsVO> getDomains() {
    return domains;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<TenantVO> getTenant() {
    return tenant;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  @Override
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public RoleChangeProposal setDomains(final List<Domains> value) {
    this.domains = Optional.of(DomainsVO.from(null == value ? List.of() : value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public RoleChangeProposal setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public RoleChangeProposal setTenant(final TenantRef value) {
    this.tenant = Optional.of(TenantVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public RoleChangeProposal setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param value
   * @return
   */
  public RoleChangeProposal setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("domains".equals(field)) {
      this.unsetDomains();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public RoleChangeProposal unsetDomains() {
    this.domains = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public RoleChangeProposal unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public RoleChangeProposal unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public RoleChangeProposal unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityChangeProposalGenerator
   * @return
   */
  public RoleChangeProposal unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
