package net.civeira.phylax.features.access.scopeassignation.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationReference;
import net.civeira.phylax.features.access.scopeassignation.application.projection.ScopeAssignationStateProyection;
import net.civeira.phylax.features.access.scopeassignation.application.request.ScopeAssignationStateChange;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.create.ScopeAssignationCreateUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.delete.ScopeAssignationCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.delete.ScopeAssignationDeleteUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.list.ScopeAssignationListUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.retrieve.ScopeAssignationRetrieveUsecase;
import net.civeira.phylax.features.access.scopeassignation.application.usecase.update.ScopeAssignationUpdateUsecase;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationCursor;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationFilter;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainRef;
import net.civeira.phylax.features.access.securitydomain.SecurityDomainReference;
import net.civeira.phylax.features.access.securityscope.SecurityScopeRef;
import net.civeira.phylax.features.access.securityscope.SecurityScopeReference;
import net.civeira.phylax.generated.openapi.api.ScopeAssignationApi;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationApiDto;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationApiDtoList;
import net.civeira.phylax.generated.openapi.model.SecurityDomainApiRef;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiRef;

@RequiredArgsConstructor
public class ScopeAssignationController implements ScopeAssignationApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SECURITY_DOMAINS_A_P_P_E_N_D = "&security-domains=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SECURITY_SCOPES_A_P_P_E_N_D = "&security-scopes=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationCreateUsecase create;

  /**
   * ScopeAssignation
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param securityDomains
   * @param securityScopes
   * @return
   */
  @Override
  public Response scopeAssignationApiBatchDelete(final List<String> uids, final String search,
      final List<String> securityDomains, final List<String> securityScopes) {
    ScopeAssignationFilter.ScopeAssignationFilterBuilder filterBuilder =
        ScopeAssignationFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.securityDomains(
        securityDomains.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.securityScopes(
        securityScopes.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    ScopeAssignationFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response scopeAssignationApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(ScopeAssignationCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param scopeAssignation
   * @return
   */
  @Override
  @Transactional
  public Response scopeAssignationApiCreate(ScopeAssignationApiDto scopeAssignation) {
    ScopeAssignationStateProyection created =
        create.create(currentRequest.interaction(), toDomainModel(scopeAssignation));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response scopeAssignationApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), ScopeAssignationReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param securityDomains
   * @param securityScopes
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response scopeAssignationApiList(final List<String> uids, final String search,
      final List<String> securityDomains, final List<String> securityScopes, final Integer limit,
      final String sinceUid) {
    ScopeAssignationFilter.ScopeAssignationFilterBuilder filterBuilder =
        ScopeAssignationFilter.builder();
    ScopeAssignationCursor.ScopeAssignationCursorBuilder cursorBuilder =
        ScopeAssignationCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.securityDomains(
        securityDomains.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.securityScopes(
        securityScopes.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    ScopeAssignationFilter filter = filterBuilder.build();
    ScopeAssignationCursor cursor = cursorBuilder.build();
    List<ScopeAssignationStateProyection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "scope-assignation-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response scopeAssignationApiRetrieve(final String uid) {
    ScopeAssignationStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), ScopeAssignationReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param scopeAssignation
   * @return
   */
  @Override
  @Transactional
  public Response scopeAssignationApiUpdate(final String uid,
      final ScopeAssignationApiDto scopeAssignation) {
    ScopeAssignationStateProyection updated = update.update(currentRequest.interaction(),
        ScopeAssignationReference.of(uid), toDomainModel(scopeAssignation));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private ScopeAssignationApiDto toApiModel(ScopeAssignationStateProyection dto) {
    ScopeAssignationApiDto scopeAssignationApiDto = new ScopeAssignationApiDto();
    scopeAssignationApiDto.setUid(dto.getUid().orElse(null));
    scopeAssignationApiDto.setSecurityDomain(new SecurityDomainApiRef()
        .$ref(dto.getSecurityDomain().map(SecurityDomainRef::getUidValue).orElse(null)));
    scopeAssignationApiDto.setSecurityScope(new SecurityScopeApiRef()
        .$ref(dto.getSecurityScope().map(SecurityScopeRef::getUidValue).orElse(null)));
    scopeAssignationApiDto.setVersion(dto.getVersion().orElse(null));
    return scopeAssignationApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param scopeAssignationApiDto
   * @return
   */
  private ScopeAssignationStateChange toDomainModel(ScopeAssignationApiDto scopeAssignationApiDto) {
    ScopeAssignationStateChange dto = new ScopeAssignationStateChange();
    if (null != scopeAssignationApiDto.getUid()) {
      dto.setUid(scopeAssignationApiDto.getUid());
    }
    if (null != scopeAssignationApiDto.getSecurityDomain()) {
      dto.setSecurityDomain(
          SecurityDomainReference.of(scopeAssignationApiDto.getSecurityDomain().get$Ref()));
    }
    if (null != scopeAssignationApiDto.getSecurityScope()) {
      dto.setSecurityScope(
          SecurityScopeReference.of(scopeAssignationApiDto.getSecurityScope().get$Ref()));
    }
    if (null != scopeAssignationApiDto.getVersion()) {
      dto.setVersion(scopeAssignationApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param scopeAssignations
   * @param filter
   * @param cursor
   * @return
   */
  private ScopeAssignationApiDtoList toListApiModel(
      List<ScopeAssignationStateProyection> scopeAssignations, ScopeAssignationFilter filter,
      ScopeAssignationCursor cursor) {
    Optional<ScopeAssignationStateProyection> last = scopeAssignations.isEmpty() ? Optional.empty()
        : Optional.of(scopeAssignations.get(scopeAssignations.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    if (!filter.getSecurityDomains().isEmpty()) {
      String securityDomainsValue =
          URLEncoder.encode(String.join(",", filter.getSecurityDomains()), StandardCharsets.UTF_8);
      self.append(SECURITY_DOMAINS_A_P_P_E_N_D + securityDomainsValue);
      next.append(SECURITY_DOMAINS_A_P_P_E_N_D + securityDomainsValue);
      first.append(SECURITY_DOMAINS_A_P_P_E_N_D + securityDomainsValue);
    }
    if (!filter.getSecurityScopes().isEmpty()) {
      String securityScopesValue =
          URLEncoder.encode(String.join(",", filter.getSecurityScopes()), StandardCharsets.UTF_8);
      self.append(SECURITY_SCOPES_A_P_P_E_N_D + securityScopesValue);
      next.append(SECURITY_SCOPES_A_P_P_E_N_D + securityScopesValue);
      first.append(SECURITY_SCOPES_A_P_P_E_N_D + securityScopesValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> lastDto.getUid().ifPresent(
        uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8))));
    return new ScopeAssignationApiDtoList()
        .items(scopeAssignations.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }
}
