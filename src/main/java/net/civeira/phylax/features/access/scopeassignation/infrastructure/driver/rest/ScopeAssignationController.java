package net.civeira.phylax.features.access.scopeassignation.infrastructure.driver.rest;

import java.util.List;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.generated.openapi.api.ScopeAssignationApi;
import net.civeira.phylax.generated.openapi.model.ScopeAssignationApiDto;

@RequiredArgsConstructor
public class ScopeAssignationController implements ScopeAssignationApi {

  /**
   * ScopeAssignationApiDto
   *
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationCreateController createController;

  /**
   * ScopeAssignation
   *
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationDeleteController deleteController;

  /**
   * ScopeAssignation
   *
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationListController listController;

  /**
   * ScopeAssignation
   *
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationRetrieveController retrieveController;

  /**
   * ScopeAssignationApiDto
   *
   * @autogenerated ApiControllerGenerator
   */
  private final ScopeAssignationUpdateController updateController;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param securityDomain
   * @param securityDomains
   * @param securityScope
   * @param securityScopes
   * @return
   */
  @Override
  public Response scopeAssignationApiBatchDelete(final List<String> uids, final String search,
      final String securityDomain, final List<String> securityDomains, final String securityScope,
      final List<String> securityScopes) {
    return deleteController.scopeAssignationApiBatchDelete(uids, search, securityDomain,
        securityDomains, securityScope, securityScopes);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response scopeAssignationApiBatchDeleteQuery(final String batchId) {
    return deleteController.scopeAssignationApiBatchDeleteQuery(batchId);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param scopeAssignation
   * @return
   */
  @Override
  public Response scopeAssignationApiCreate(ScopeAssignationApiDto scopeAssignation) {
    return createController.scopeAssignationApiCreate(scopeAssignation);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response scopeAssignationApiDelete(final String uid) {
    return deleteController.scopeAssignationApiDelete(uid);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param securityDomain
   * @param securityDomains
   * @param securityScope
   * @param securityScopes
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response scopeAssignationApiList(final List<String> uids, final String search,
      final String securityDomain, final List<String> securityDomains, final String securityScope,
      final List<String> securityScopes, final Integer limit, final String sinceUid) {
    return listController.scopeAssignationApiList(uids, search, securityDomain, securityDomains,
        securityScope, securityScopes, limit, sinceUid);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response scopeAssignationApiRetrieve(final String uid) {
    return retrieveController.scopeAssignationApiRetrieve(uid);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param scopeAssignation
   * @return
   */
  @Override
  public Response scopeAssignationApiUpdate(final String uid,
      ScopeAssignationApiDto scopeAssignation) {
    return updateController.scopeAssignationApiUpdate(uid, scopeAssignation);
  }
}
