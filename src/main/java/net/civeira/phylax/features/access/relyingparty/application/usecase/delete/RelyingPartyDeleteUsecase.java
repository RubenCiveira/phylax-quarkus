package net.civeira.phylax.features.access.relyingparty.application.usecase.delete;

import java.time.Duration;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.batch.BatchService;
import net.civeira.phylax.common.batch.ExecutorByDeferSteps;
import net.civeira.phylax.common.batch.ExecutorPlan;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.relyingparty.application.visibility.RelyingPartyVisibilityFilter;
import net.civeira.phylax.features.access.relyingparty.application.visibility.RelyingPartysVisibility;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyRef;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyCacheGateway;
import net.civeira.phylax.features.access.relyingparty.domain.gateway.RelyingPartyWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class RelyingPartyDeleteUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final RelyingPartyCacheGateway cache;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<RelyingPartyDeleteAllowDecision> deleteAllowEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<RelyingPartyDeleteCheck> deleteCheckEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final RelyingPartyWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final RelyingPartysVisibility visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final RelyingPartyRef reference) {
    RelyingPartyDeleteAllowDecision base = RelyingPartyDeleteAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    RelyingPartyDeleteAllowDecision base = RelyingPartyDeleteAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    deleteAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final RelyingPartyCheckBatchDeleteStatus query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   */
  public void delete(final Interaction query, final RelyingPartyRef reference) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    RelyingParty original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    delete(query, original);
    flush();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param filter
   * @return The slide with some values
   */
  public BatchIdentificator delete(final Interaction query, final RelyingPartyDeleteFilter filter) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    RelyingPartyVisibilityFilter filterOnVisibles =
        RelyingPartyVisibilityFilter.builder().uid(filter.getUid().orElse(null))
            .uids(filter.getUids().stream().toList()).search(filter.getSearch().orElse(null))
            .apiKey(filter.getApiKey().orElse(null)).code(filter.getCode().orElse(null)).build();
    RelyingPartyDeleteAllInBatchCommand command = RelyingPartyDeleteAllInBatchCommand.builder()
        .interaction(query).filter(filterOnVisibles).build();
    return batch.start(query.getActor().getName().orElse("-"), Duration.ofHours(6), ExecutorPlan
        .<RelyingPartyDeleteAllInBatchCommand>builder().params(command).name("delete-color")
        .executor(
            ExecutorByDeferSteps.<RelyingParty, RelyingParty, RelyingPartyDeleteAllInBatchCommand, RelyingPartysInBatchExecutor.RelyingPartyPaginableBatch>builder()
                .initializer(RelyingPartysInBatchExecutor.class)
                .counter(RelyingPartysInBatchExecutor.class)
                .descriptor(RelyingPartysInBatchExecutor.class)
                .reader(RelyingPartysInBatchExecutor.class)
                .processor(RelyingPartysInBatchExecutor.class)
                .writer(RelyingPartysInBatchExecutor.class)
                .finalizer(RelyingPartysInBatchExecutor.class).build())
        .build());
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param interaction
   * @param original
   */
  void delete(final Interaction interaction, final RelyingParty original) {
    RelyingPartyDeleteCheck proposal =
        RelyingPartyDeleteCheck.builder().reference(original).interaction(interaction).build();
    deleteCheckEmitter.fire(proposal);
    RelyingParty clean = original.delete();
    gateway.delete(clean);
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
