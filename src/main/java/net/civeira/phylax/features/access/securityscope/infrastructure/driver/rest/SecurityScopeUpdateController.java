package net.civeira.phylax.features.access.securityscope.infrastructure.driver.rest;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.features.access.securityscope.application.usecase.update.SecurityScopeUpdateInput;
import net.civeira.phylax.features.access.securityscope.application.usecase.update.SecurityScopeUpdateProjection;
import net.civeira.phylax.features.access.securityscope.application.usecase.update.SecurityScopeUpdateUsecase;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeKindOptions;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeReference;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeVisibilityOptions;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientReference;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto.KindEnum;
import net.civeira.phylax.generated.openapi.model.SecurityScopeApiDto.VisibilityEnum;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;

@RequiredArgsConstructor
@RequestScoped
public class SecurityScopeUpdateController {

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated UpdateControllerGenerator
   */
  private final SecurityScopeUpdateUsecase update;

  /**
   * @autogenerated UpdateControllerGenerator
   * @param uid
   * @param securityScope
   * @return
   */
  @Transactional
  public Response securityScopeApiUpdate(final String uid,
      final SecurityScopeApiDto securityScope) {
    SecurityScopeUpdateProjection updated = update.update(currentRequest.interaction(),
        SecurityScopeReference.of(uid), toDomainModel(securityScope));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param domainEnum
   * @return
   */
  private KindEnum kindEnumToApi(SecurityScopeKindOptions domainEnum) {
    KindEnum result;
    if (domainEnum == SecurityScopeKindOptions.READ) {
      result = KindEnum.READ;
    } else if (domainEnum == SecurityScopeKindOptions.WRITE) {
      result = KindEnum.WRITE;
    } else if (domainEnum == SecurityScopeKindOptions.MANAGE) {
      result = KindEnum.MANAGE;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param apiEnum
   * @return
   */
  private SecurityScopeKindOptions kindEnumToDomain(KindEnum apiEnum) {
    SecurityScopeKindOptions result;
    if (apiEnum == KindEnum.READ) {
      result = SecurityScopeKindOptions.READ;
    } else if (apiEnum == KindEnum.WRITE) {
      result = SecurityScopeKindOptions.WRITE;
    } else if (apiEnum == KindEnum.MANAGE) {
      result = SecurityScopeKindOptions.MANAGE;
    } else if (null == apiEnum) {
      result = null;
    } else {
      throw new IllegalArgumentException();
    }
    return result;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param dto
   * @return
   */
  private SecurityScopeApiDto toApiModel(SecurityScopeUpdateProjection dto) {
    SecurityScopeApiDto securityScopeApiDto = new SecurityScopeApiDto();
    securityScopeApiDto.setUid(dto.getUid());
    securityScopeApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientReference()));
    securityScopeApiDto
        .setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyReference()));
    securityScopeApiDto.setResource(dto.getResource());
    securityScopeApiDto.setScope(dto.getScope());
    securityScopeApiDto.setEnabled(dto.getEnabled());
    securityScopeApiDto.setKind(kindEnumToApi(dto.getKind()));
    securityScopeApiDto.setVisibility(visibilityEnumToApi(dto.getVisibility()));
    securityScopeApiDto.setVersion(dto.getVersion());
    return securityScopeApiDto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param securityScopeApiDto
   * @return
   */
  private SecurityScopeUpdateInput toDomainModel(SecurityScopeApiDto securityScopeApiDto) {
    SecurityScopeUpdateInput dto = new SecurityScopeUpdateInput();
    if (null != securityScopeApiDto.getUid()) {
      dto.setUid(securityScopeApiDto.getUid());
    }
    if (null != securityScopeApiDto.getTrustedClient()) {
      dto.setTrustedClient(
          TrustedClientReference.of(securityScopeApiDto.getTrustedClient().get$Ref()));
    }
    if (null != securityScopeApiDto.getRelyingParty()) {
      dto.setRelyingParty(
          RelyingPartyReference.of(securityScopeApiDto.getRelyingParty().get$Ref()));
    }
    if (null != securityScopeApiDto.getResource()) {
      dto.setResource(securityScopeApiDto.getResource());
    }
    if (null != securityScopeApiDto.getScope()) {
      dto.setScope(securityScopeApiDto.getScope());
    }
    if (null != securityScopeApiDto.getEnabled()) {
      dto.setEnabled(securityScopeApiDto.getEnabled());
    }
    if (null != securityScopeApiDto.getKind()) {
      dto.setKind(kindEnumToDomain(securityScopeApiDto.getKind()));
    }
    if (null != securityScopeApiDto.getVisibility()) {
      dto.setVisibility(visibilityEnumToDomain(securityScopeApiDto.getVisibility()));
    }
    if (null != securityScopeApiDto.getVersion()) {
      dto.setVersion(securityScopeApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param domainEnum
   * @return
   */
  private VisibilityEnum visibilityEnumToApi(SecurityScopeVisibilityOptions domainEnum) {
    VisibilityEnum result;
    if (domainEnum == SecurityScopeVisibilityOptions.PUBLIC) {
      result = VisibilityEnum.PUBLIC;
    } else if (domainEnum == SecurityScopeVisibilityOptions.AUTHORIZED) {
      result = VisibilityEnum.AUTHORIZED;
    } else if (domainEnum == SecurityScopeVisibilityOptions.EXPLICIT) {
      result = VisibilityEnum.EXPLICIT;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated UpdateControllerGenerator
   * @param apiEnum
   * @return
   */
  private SecurityScopeVisibilityOptions visibilityEnumToDomain(VisibilityEnum apiEnum) {
    SecurityScopeVisibilityOptions result;
    if (apiEnum == VisibilityEnum.PUBLIC) {
      result = SecurityScopeVisibilityOptions.PUBLIC;
    } else if (apiEnum == VisibilityEnum.AUTHORIZED) {
      result = SecurityScopeVisibilityOptions.AUTHORIZED;
    } else if (apiEnum == VisibilityEnum.EXPLICIT) {
      result = SecurityScopeVisibilityOptions.EXPLICIT;
    } else if (null == apiEnum) {
      result = null;
    } else {
      throw new IllegalArgumentException();
    }
    return result;
  }
}
