package net.civeira.phylax.features.access.securityscope;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyRef;
import net.civeira.phylax.features.access.securityscope.command.SecurityScopeChangeProposal;
import net.civeira.phylax.features.access.securityscope.command.SecurityScopeWriteAttributes;
import net.civeira.phylax.features.access.securityscope.event.SecurityScopeCreateEvent;
import net.civeira.phylax.features.access.securityscope.event.SecurityScopeDeleteEvent;
import net.civeira.phylax.features.access.securityscope.event.SecurityScopeDisableEvent;
import net.civeira.phylax.features.access.securityscope.event.SecurityScopeEnableEvent;
import net.civeira.phylax.features.access.securityscope.event.SecurityScopeEvent;
import net.civeira.phylax.features.access.securityscope.event.SecurityScopeUpdateEvent;
import net.civeira.phylax.features.access.securityscope.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securityscope.valueobject.KindVO;
import net.civeira.phylax.features.access.securityscope.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.securityscope.valueobject.ResourceVO;
import net.civeira.phylax.features.access.securityscope.valueobject.ScopeVO;
import net.civeira.phylax.features.access.securityscope.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.securityscope.valueobject.UidVO;
import net.civeira.phylax.features.access.securityscope.valueobject.VersionVO;
import net.civeira.phylax.features.access.securityscope.valueobject.VisibilityVO;
import net.civeira.phylax.features.access.trustedclient.TrustedClientRef;

@AllArgsConstructor
@Getter
@ToString
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class SecurityScope implements SecurityScopeRef {

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public static SecurityScope create(final SecurityScopeWriteAttributes attributes) {
    SecurityScopeChangeProposal proposal = new SecurityScopeChangeProposal(attributes);
    proposal.setEnabled(true);
    SecurityScope instance = new SecurityScope(proposal, Optional.empty());
    instance.addEvent(SecurityScopeCreateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public static Set<String> readonlyFields() {
    return Set.of("enabled");
  }

  /**
   * El enabled de security scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private EnabledVO enabled = EnabledVO.nullValue();

  /**
   * El kind de security scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private KindVO kind = KindVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private List<SecurityScopeEvent> recordedEvents = List.of();

  /**
   * El relying party de security scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private RelyingPartyVO relyingParty = RelyingPartyVO.nullValue();

  /**
   * A label group key to show the scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private ResourceVO resource;

  /**
   * A label to show the scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private ScopeVO scope;

  /**
   * El trusted client de security scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private TrustedClientVO trustedClient = TrustedClientVO.nullValue();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private UidVO uid;

  /**
   * Campo con el n√∫mero de version de security scope para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VersionVO version = VersionVO.nullValue();

  /**
   * El visibility de security scope
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private VisibilityVO visibility = VisibilityVO.nullValue();

  /**
   * @autogenerated EntityGenerator
   * @param attribute
   * @param previous
   */
  private SecurityScope(final SecurityScopeWriteAttributes attribute,
      final Optional<SecurityScope> previous) {
    ConstraintFailList list = new ConstraintFailList();
    this.uid = attribute.getUid().orElse(previous.map(SecurityScope::getUid).orElse(null));
    this.trustedClient = attribute.getTrustedClient().orElse(
        previous.map(SecurityScope::getTrustedClient).orElseGet(TrustedClientVO::nullValue));
    this.relyingParty = attribute.getRelyingParty()
        .orElse(previous.map(SecurityScope::getRelyingParty).orElseGet(RelyingPartyVO::nullValue));
    this.resource =
        attribute.getResource().orElse(previous.map(SecurityScope::getResource).orElse(null));
    this.scope = attribute.getScope().orElse(previous.map(SecurityScope::getScope).orElse(null));
    this.enabled = attribute.getEnabled()
        .orElse(previous.map(SecurityScope::getEnabled).orElseGet(EnabledVO::nullValue));
    this.kind = attribute.getKind()
        .orElse(previous.map(SecurityScope::getKind).orElseGet(KindVO::nullValue));
    this.visibility = attribute.getVisibility()
        .orElse(previous.map(SecurityScope::getVisibility).orElseGet(VisibilityVO::nullValue));
    this.version = attribute.getVersion()
        .orElse(previous.map(SecurityScope::getVersion).orElseGet(VersionVO::nullValue));
    if (null == uid) {
      list.add(new ConstraintFail("REQUIRED", "uid", null));
    }
    if (null == resource) {
      list.add(new ConstraintFail("REQUIRED", "resource", null));
    }
    if (null == scope) {
      list.add(new ConstraintFail("REQUIRED", "scope", null));
    }
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    this.recordedEvents = previous.map(SecurityScope::getRecordedEvents).orElseGet(List::of);
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityScope delete() {
    SecurityScope instance = this;
    instance.addEvent(SecurityScopeDeleteEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityScope disable() {
    SecurityScopeChangeProposal attr = new SecurityScopeChangeProposal(this);
    attr.setEnabled(false);
    SecurityScope instance = new SecurityScope(attr, Optional.of(this));
    instance.addEvent(SecurityScopeDisableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityScope enable() {
    SecurityScopeChangeProposal attr = new SecurityScopeChangeProposal(this);
    attr.setEnabled(true);
    SecurityScope instance = new SecurityScope(attr, Optional.of(this));
    instance.addEvent(SecurityScopeEnableEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<SecurityScopeKindOptions> getKindValue() {
    return getKind().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getRelyingPartyReferenceValue() {
    return getRelyingParty().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<RelyingPartyRef> getRelyingPartyValue() {
    return getRelyingParty().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getResourceValue() {
    return getResource().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getScopeValue() {
    return getScope().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getTrustedClientReferenceValue() {
    return getTrustedClient().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<TrustedClientRef> getTrustedClientValue() {
    return getTrustedClient().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  @Override
  public String getUidValue() {
    return this.uid.getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<SecurityScopeVisibilityOptions> getVisibilityValue() {
    return getVisibility().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public boolean isEnabled() {
    return Boolean.TRUE.equals(getEnabled().getValue().orElse(Boolean.FALSE));
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public SecurityScope nextVersion() {
    return SecurityScope.builder().uid(this.uid).trustedClient(this.trustedClient)
        .relyingParty(this.relyingParty).resource(this.resource).scope(this.scope)
        .enabled(this.enabled).kind(this.kind).visibility(this.visibility)
        .version(VersionVO.from(this.version() + 1)).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @param attributes
   * @return
   */
  public SecurityScope update(final SecurityScopeWriteAttributes attributes) {
    SecurityScopeChangeProposal proposal = new SecurityScopeChangeProposal(attributes);
    proposal.unsetEnabled();
    SecurityScope instance = new SecurityScope(proposal, Optional.of(this));
    instance.addEvent(SecurityScopeUpdateEvent.builder().payload(instance).build());
    return instance;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Integer version() {
    return this.getVersion().getValue().orElse(0);
  }

  /**
   * @autogenerated EntityGenerator
   * @param event
   */
  private void addEvent(final SecurityScopeEvent event) {
    List<SecurityScopeEvent> events = new ArrayList<>(this.recordedEvents);
    events.add(event);
    this.recordedEvents = List.copyOf(events);
  }
}
