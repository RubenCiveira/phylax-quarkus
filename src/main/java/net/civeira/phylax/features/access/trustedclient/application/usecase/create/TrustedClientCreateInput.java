package net.civeira.phylax.features.access.trustedclient.application.usecase.create;

import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientChangeSet;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.AllowedRedirectsVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.CodeVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.PublicAllowVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.SecretOauthVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.trustedclient.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold trusted client attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TrustedClientCreateInput {

  /**
   * @autogenerated CreateInputGenerator
   */
  public static class TrustedClientCreateInputBuilder {

    /**
     * Append AllowedRedirects crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param allowedRedirects The AllowedRedirects value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder allowedRedirects(final String allowedRedirects) {
      return allowedRedirects(Optional.of(AllowedRedirectsVO.from(allowedRedirects)));
    }

    /**
     * Append AllowedRedirects value
     *
     * @autogenerated CreateInputGenerator
     * @param allowedRedirects The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder allowedRedirects(
        final Optional<AllowedRedirectsVO> allowedRedirects) {
      this.allowedRedirects$value = allowedRedirects;
      this.allowedRedirects$set = true;
      return this;
    }

    /**
     * Append Code crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param code The Code value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder code(final String code) {
      return code(Optional.of(CodeVO.from(code)));
    }

    /**
     * Append Code value
     *
     * @autogenerated CreateInputGenerator
     * @param code The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder code(final Optional<CodeVO> code) {
      this.code$value = code;
      this.code$set = true;
      return this;
    }

    /**
     * Append Enabled crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param enabled The Enabled value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder enabled(final Boolean enabled) {
      return enabled(Optional.of(EnabledVO.from(enabled)));
    }

    /**
     * Append Enabled value
     *
     * @autogenerated CreateInputGenerator
     * @param enabled The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder enabled(final Optional<EnabledVO> enabled) {
      this.enabled$value = enabled;
      this.enabled$set = true;
      return this;
    }

    /**
     * @autogenerated CreateInputGenerator
     * @return
     */
    public TrustedClientCreateInputBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * Append PublicAllow crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param publicAllow The PublicAllow value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder publicAllow(final Boolean publicAllow) {
      return publicAllow(Optional.of(PublicAllowVO.from(publicAllow)));
    }

    /**
     * Append PublicAllow value
     *
     * @autogenerated CreateInputGenerator
     * @param publicAllow The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder publicAllow(final Optional<PublicAllowVO> publicAllow) {
      this.publicAllow$value = publicAllow;
      this.publicAllow$set = true;
      return this;
    }

    /**
     * Append SecretOauth crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param secretOauth The SecretOauth value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder secretOauth(final String secretOauth) {
      return secretOauth(Optional.of(SecretOauthVO.fromPlain(secretOauth)));
    }

    /**
     * Append SecretOauth value
     *
     * @autogenerated CreateInputGenerator
     * @param secretOauth The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder secretOauth(final Optional<SecretOauthVO> secretOauth) {
      this.secretOauth$value = secretOauth;
      this.secretOauth$set = true;
      return this;
    }

    /**
     * Append Uid crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param uid The Uid value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * Append Uid value
     *
     * @autogenerated CreateInputGenerator
     * @param uid The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * Append Version crud value and convert as value object.
     *
     * @autogenerated CreateInputGenerator
     * @param version The Version value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * Append Version value
     *
     * @autogenerated CreateInputGenerator
     * @param version The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public TrustedClientCreateInputBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * @autogenerated CreateInputGenerator
   * @param input
   * @return
   */
  static TrustedClientCreateInput fromChangeSet(final TrustedClientChangeSet input) {
    return TrustedClientCreateInput.builder().uid(input.getUid()).code(input.getCode())
        .publicAllow(input.getPublicAllow()).secretOauth(input.getSecretOauth())
        .allowedRedirects(input.getAllowedRedirects()).enabled(input.getEnabled())
        .version(input.getVersion()).build();
  }

  /**
   * Si permitimos login directo de la app, obligamos a indicar un secreto.
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<AllowedRedirectsVO> allowedRedirects = Optional.empty();

  /**
   * El código identificativo de la aplicación
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<CodeVO> code = Optional.empty();

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<EnabledVO> enabled = Optional.empty();

  /**
   * If true, users can use these client to access with public code flow
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<PublicAllowVO> publicAllow = Optional.empty();

  /**
   * If the user is not delegated, the phrasse to identify
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<SecretOauthVO> secretOauth = Optional.empty();

  /**
   * El identificador de la aplicacion
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el número de version de trusted client para controlar bloqueos optimistas
   *
   * @autogenerated CreateInputGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Inform for a possible change propolsal in AllowedRedirects
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for AllowedRedirects, otherwise the value for
   *         AllowedRedirects
   */
  public Optional<AllowedRedirectsVO> getAllowedRedirects() {
    return allowedRedirects;
  }

  /**
   * Inform for a possible change propolsal in Code
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Code, otherwise the value for Code
   */
  public Optional<CodeVO> getCode() {
    return code;
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Optional<EnabledVO> getEnabled() {
    return enabled;
  }

  /**
   * Inform for a possible change propolsal in PublicAllow
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for PublicAllow, otherwise the value for
   *         PublicAllow
   */
  public Optional<PublicAllowVO> getPublicAllow() {
    return publicAllow;
  }

  /**
   * Inform for a possible change propolsal in SecretOauth
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for SecretOauth, otherwise the value for
   *         SecretOauth
   */
  public Optional<SecretOauthVO> getSecretOauth() {
    return secretOauth;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated CreateInputGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for AllowedRedirects to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TrustedClientCreateInput
   * @return self instance to enable a flow code
   */
  public TrustedClientCreateInput setAllowedRedirects(final String value) {
    this.allowedRedirects = Optional.of(AllowedRedirectsVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Code to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TrustedClientCreateInput
   * @return self instance to enable a flow code
   */
  public TrustedClientCreateInput setCode(final String value) {
    this.code = Optional.of(CodeVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Enabled to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TrustedClientCreateInput
   * @return self instance to enable a flow code
   */
  public TrustedClientCreateInput setEnabled(final Boolean value) {
    this.enabled = Optional.of(EnabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for PublicAllow to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TrustedClientCreateInput
   * @return self instance to enable a flow code
   */
  public TrustedClientCreateInput setPublicAllow(final Boolean value) {
    this.publicAllow = Optional.of(PublicAllowVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for SecretOauth to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TrustedClientCreateInput
   * @return self instance to enable a flow code
   */
  public TrustedClientCreateInput setSecretOauth(final String value) {
    this.secretOauth = Optional.of(SecretOauthVO.fromPlain(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TrustedClientCreateInput
   * @return self instance to enable a flow code
   */
  public TrustedClientCreateInput setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated CreateInputGenerator
   * @param value The proposal value for TrustedClientCreateInput
   * @return self instance to enable a flow code
   */
  public TrustedClientCreateInput setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * @autogenerated CreateInputGenerator
   * @return
   */
  TrustedClientChangeSet toChangeSet() {
    return TrustedClientChangeSet.builder().uid(uid).code(code).publicAllow(publicAllow)
        .secretOauth(secretOauth).allowedRedirects(allowedRedirects).enabled(enabled)
        .version(version).build();
  }
}
