package net.civeira.phylax.features.access.trustedclient.domain.gateway;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClient;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientRef;

public interface TrustedClientWriteRepositoryGateway {

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The items that would be returned by the query
   */
  long countForUpdate(TrustedClientFilter filter);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @param verifier a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  TrustedClient create(TrustedClient entity, Predicate<TrustedClient> verifier);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  TrustedClient create(TrustedClient entity);

  /**
   * Delete an existing record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param entity a filter to retrieve only matching values
   */
  void delete(TrustedClient entity);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  boolean existsForUpdate(String uid, Optional<TrustedClientFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  Optional<TrustedClient> findForUpdate(TrustedClientFilter filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  List<TrustedClient> listForUpdate(TrustedClientFilter filter);

  /**
   * Retrieve full data for a reference.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  TrustedClient resolveForUpdate(TrustedClientRef reference);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  Optional<TrustedClient> retrieveForUpdate(String uid, Optional<TrustedClientFilter> filter);

  /**
   * Recover a slide of data.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slider<TrustedClient> slideForUpdate(TrustedClientFilter filter, TrustedClientCursor cursor);

  /**
   * Create a new record.
   *
   * @autogenerated WriteGatewayRepositoryGenerator
   * @param reference a filter to retrieve only matching values
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  TrustedClient update(TrustedClientRef reference, TrustedClient entity);
}
