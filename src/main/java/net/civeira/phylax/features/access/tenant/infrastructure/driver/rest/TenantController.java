package net.civeira.phylax.features.access.tenant.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.features.access.relyingparty.RelyingPartyReference;
import net.civeira.phylax.features.access.tenant.RelingParties;
import net.civeira.phylax.features.access.tenant.RelingParties.RelingPartiesBuilder;
import net.civeira.phylax.features.access.tenant.TenantReference;
import net.civeira.phylax.features.access.tenant.TrustedClients;
import net.civeira.phylax.features.access.tenant.TrustedClients.TrustedClientsBuilder;
import net.civeira.phylax.features.access.tenant.application.projection.TenantStateProyection;
import net.civeira.phylax.features.access.tenant.application.request.TenantStateChange;
import net.civeira.phylax.features.access.tenant.application.usecase.create.TenantCreateUsecase;
import net.civeira.phylax.features.access.tenant.application.usecase.delete.TenantCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.tenant.application.usecase.delete.TenantDeleteUsecase;
import net.civeira.phylax.features.access.tenant.application.usecase.disable.TenantDisableStatus;
import net.civeira.phylax.features.access.tenant.application.usecase.disable.TenantDisableUsecase;
import net.civeira.phylax.features.access.tenant.application.usecase.enable.TenantEnableStatus;
import net.civeira.phylax.features.access.tenant.application.usecase.enable.TenantEnableUsecase;
import net.civeira.phylax.features.access.tenant.application.usecase.list.TenantListUsecase;
import net.civeira.phylax.features.access.tenant.application.usecase.retrieve.TenantRetrieveUsecase;
import net.civeira.phylax.features.access.tenant.application.usecase.update.TenantUpdateUsecase;
import net.civeira.phylax.features.access.tenant.query.TenantCursor;
import net.civeira.phylax.features.access.tenant.query.TenantFilter;
import net.civeira.phylax.features.access.tenant.query.TenantOrder;
import net.civeira.phylax.features.access.trustedclient.TrustedClientReference;
import net.civeira.phylax.generated.openapi.api.TenantApi;
import net.civeira.phylax.generated.openapi.model.RelingPartiesApiDto;
import net.civeira.phylax.generated.openapi.model.RelyingPartyApiRef;
import net.civeira.phylax.generated.openapi.model.TenantApiDto;
import net.civeira.phylax.generated.openapi.model.TenantApiDtoList;
import net.civeira.phylax.generated.openapi.model.TrustedClientApiRef;
import net.civeira.phylax.generated.openapi.model.TrustedClientsApiDto;

@RequiredArgsConstructor
public class TenantController implements TenantApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String NAME_A_P_P_E_N_D = "&name=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantCreateUsecase create;

  /**
   * Tenant
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantDisableUsecase disable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantEnableUsecase enable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @return
   */
  @Override
  public Response tenantApiBatchDelete(final List<String> uids, final String search,
      final String name) {
    TenantFilter.TenantFilterBuilder filterBuilder = TenantFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    TenantFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response tenantApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(
        TenantCheckBatchDeleteStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @return
   */
  @Override
  public Response tenantApiBatchDisable(final List<String> uids, final String search,
      final String name) {
    TenantFilter.TenantFilterBuilder filterBuilder = TenantFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    TenantFilter filter = filterBuilder.build();
    BatchIdentificator task = disable.disable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response tenantApiBatchDisableQuery(final String batchId) {
    BatchProgress task = disable.checkProgress(
        TenantDisableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @return
   */
  @Override
  public Response tenantApiBatchEnable(final List<String> uids, final String search,
      final String name) {
    TenantFilter.TenantFilterBuilder filterBuilder = TenantFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    TenantFilter filter = filterBuilder.build();
    BatchIdentificator task = enable.enable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response tenantApiBatchEnableQuery(final String batchId) {
    BatchProgress task = enable.checkProgress(
        TenantEnableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenant
   * @return
   */
  @Override
  @Transactional
  public Response tenantApiCreate(TenantApiDto tenant) {
    TenantStateProyection created =
        create.create(currentRequest.interaction(), toDomainModel(tenant));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response tenantApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), TenantReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response tenantApiDisable(final String uid) {
    TenantStateProyection updated =
        disable.disable(currentRequest.interaction(), TenantReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response tenantApiEnable(final String uid) {
    TenantStateProyection updated =
        enable.enable(currentRequest.interaction(), TenantReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  @Override
  public Response tenantApiList(final List<String> uids, final String search, final String name,
      final Integer limit, final String sinceUid, final String sinceName, final String order) {
    List<TenantOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    TenantFilter.TenantFilterBuilder filterBuilder = TenantFilter.builder();
    TenantCursor.TenantCursorBuilder cursorBuilder = TenantCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    cursorBuilder = cursorBuilder.sinceName(sinceName);
    cursorBuilder = cursorBuilder.order(orderSteps);
    TenantFilter filter = filterBuilder.build();
    TenantCursor cursor = cursorBuilder.build();
    List<TenantStateProyection> listed = list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "tenant-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response tenantApiRetrieve(final String uid) {
    TenantStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), TenantReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param tenant
   * @return
   */
  @Override
  @Transactional
  public Response tenantApiUpdate(final String uid, final TenantApiDto tenant) {
    TenantStateProyection updated =
        update.update(currentRequest.interaction(), TenantReference.of(uid), toDomainModel(tenant));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param label
   * @return
   */
  private TenantOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("name-asc")) {
      return TenantOrder.NAME_ASC;
    } else if (label.trim().equals("name-desc")) {
      return TenantOrder.NAME_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private TenantApiDto toApiModel(TenantStateProyection dto) {
    TenantApiDto tenantApiDto = new TenantApiDto();
    tenantApiDto.setUid(dto.getUid().orElse(null));
    tenantApiDto.setName(dto.getName().orElse(null));
    tenantApiDto.setDomain(dto.getDomain().orElse(null));
    tenantApiDto.setEnabled(dto.getEnabled().orElse(null));
    tenantApiDto.setAccessToAllApplications(dto.getAccessToAllApplications().orElse(null));
    tenantApiDto
        .setTrustedClients(dto.getTrustedClients().map(trustedClientsList -> trustedClientsList
            .stream().map(this::toApiModelTrustedClients).toList()).orElse(null));
    tenantApiDto.setRelingParties(dto.getRelingParties().map(
        relingPartiesList -> relingPartiesList.stream().map(this::toApiModelRelingParties).toList())
        .orElse(null));
    tenantApiDto.setVersion(dto.getVersion().orElse(null));
    return tenantApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private RelingPartiesApiDto toApiModelRelingParties(RelingParties dto) {
    RelingPartiesApiDto relingPartiesApiDto = new RelingPartiesApiDto();
    relingPartiesApiDto.setUid(dto.getUidValue());
    relingPartiesApiDto
        .setRelyingParty(new RelyingPartyApiRef().$ref(dto.getRelyingPartyReferenceValue()));
    relingPartiesApiDto.setVersion(dto.getVersionValue().orElse(null));
    return relingPartiesApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private TrustedClientsApiDto toApiModelTrustedClients(TrustedClients dto) {
    TrustedClientsApiDto trustedClientsApiDto = new TrustedClientsApiDto();
    trustedClientsApiDto.setUid(dto.getUidValue());
    trustedClientsApiDto
        .setTrustedClient(new TrustedClientApiRef().$ref(dto.getTrustedClientReferenceValue()));
    trustedClientsApiDto.setVersion(dto.getVersionValue().orElse(null));
    return trustedClientsApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenantApiDto
   * @return
   */
  private TenantStateChange toDomainModel(TenantApiDto tenantApiDto) {
    TenantStateChange dto = new TenantStateChange();
    if (null != tenantApiDto.getUid()) {
      dto.setUid(tenantApiDto.getUid());
    }
    if (null != tenantApiDto.getName()) {
      dto.setName(tenantApiDto.getName());
    }
    if (null != tenantApiDto.getDomain()) {
      dto.setDomain(tenantApiDto.getDomain());
    }
    if (null != tenantApiDto.getEnabled()) {
      dto.setEnabled(tenantApiDto.getEnabled());
    }
    if (null != tenantApiDto.getAccessToAllApplications()) {
      dto.setAccessToAllApplications(tenantApiDto.getAccessToAllApplications());
    }
    if (null != tenantApiDto.getTrustedClients()) {
      dto.setTrustedClients(tenantApiDto.getTrustedClients().stream()
          .map(this::toDomainModelTrustedClients).toList());
    }
    if (null != tenantApiDto.getRelingParties()) {
      dto.setRelingParties(
          tenantApiDto.getRelingParties().stream().map(this::toDomainModelRelingParties).toList());
    }
    if (null != tenantApiDto.getVersion()) {
      dto.setVersion(tenantApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param relingPartiesApiDto
   * @return
   */
  private RelingParties toDomainModelRelingParties(RelingPartiesApiDto relingPartiesApiDto) {
    RelingPartiesBuilder builder = RelingParties.builder();
    if (null != relingPartiesApiDto.getUid()) {
      builder = builder.uid(relingPartiesApiDto.getUid());
    }
    if (null != relingPartiesApiDto.getRelyingParty()) {
      builder = builder
          .relyingParty(RelyingPartyReference.of(relingPartiesApiDto.getRelyingParty().get$Ref()));
    }
    if (null != relingPartiesApiDto.getVersion()) {
      builder = builder.version(relingPartiesApiDto.getVersion());
    }
    return builder.build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param trustedClientsApiDto
   * @return
   */
  private TrustedClients toDomainModelTrustedClients(TrustedClientsApiDto trustedClientsApiDto) {
    TrustedClientsBuilder builder = TrustedClients.builder();
    if (null != trustedClientsApiDto.getUid()) {
      builder = builder.uid(trustedClientsApiDto.getUid());
    }
    if (null != trustedClientsApiDto.getTrustedClient()) {
      builder = builder.trustedClient(
          TrustedClientReference.of(trustedClientsApiDto.getTrustedClient().get$Ref()));
    }
    if (null != trustedClientsApiDto.getVersion()) {
      builder = builder.version(trustedClientsApiDto.getVersion());
    }
    return builder.build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenants
   * @param filter
   * @param cursor
   * @return
   */
  private TenantApiDtoList toListApiModel(List<TenantStateProyection> tenants, TenantFilter filter,
      TenantCursor cursor) {
    Optional<TenantStateProyection> last =
        tenants.isEmpty() ? Optional.empty() : Optional.of(tenants.get(tenants.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getName().ifPresent(filterName -> {
      String nameValue = URLEncoder.encode(String.valueOf(filterName), StandardCharsets.UTF_8);
      self.append(NAME_A_P_P_E_N_D + nameValue);
      next.append(NAME_A_P_P_E_N_D + nameValue);
      first.append(NAME_A_P_P_E_N_D + nameValue);
    });
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceName().ifPresent(sinceName -> self
        .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      lastDto.getUid().ifPresent(
          uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8)));
      cursor.getSinceName().ifPresent(sinceName -> next
          .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    });
    return new TenantApiDtoList().items(tenants.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final TenantOrder order) {
    if (null == order) {
      return null;
    } else if (order == TenantOrder.NAME_ASC) {
      return "name-asc";
    } else if (order == TenantOrder.NAME_DESC) {
      return "name-desc";
    } else {
      return null;
    }
  }
}
