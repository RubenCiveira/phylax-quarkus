package net.civeira.phylax.features.access.securitydomain.application.visibility;

import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomain;
import net.civeira.phylax.features.access.securitydomain.domain.SecurityDomainReference;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.LevelVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.ManageAllVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.ReadAllVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securitydomain.domain.valueobject.WriteAllVO;

/**
 * A dto transfer to hold security domain attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class SecurityDomainVisibleProjection {

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<EnabledVO> enabled = Optional.empty();

  /**
   * The user inherit level, and can view only domain with his level or lower
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<LevelVO> level = Optional.empty();

  /**
   * Allow to write on every scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<ManageAllVO> manageAll = Optional.empty();

  /**
   * El name de security domain
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<NameVO> name = Optional.empty();

  /**
   * Allow to read on every scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<ReadAllVO> readAll = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de security domain para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Allow to write on every scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<WriteAllVO> writeAll = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public SecurityDomainVisibleProjection(final SecurityDomain entity) {
    uid = Optional.of(entity.getUidValue());
    name = Optional.of(entity.getNameValue());
    level = Optional.of(entity.getLevelValue());
    readAll = Optional.of(entity.getReadAllValue());
    writeAll = Optional.of(entity.getWriteAllValue());
    manageAll = Optional.of(entity.getManageAllValue());
    enabled = Optional.of(entity.getEnabledValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for security domain with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public SecurityDomainReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(SecurityDomainReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Optional<EnabledVO> getEnabled() {
    return enabled;
  }

  /**
   * Inform for a possible change propolsal in Level
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Level, otherwise the value for Level
   */
  public Optional<LevelVO> getLevel() {
    return level;
  }

  /**
   * Inform for a possible change propolsal in ManageAll
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for ManageAll, otherwise the value for ManageAll
   */
  public Optional<ManageAllVO> getManageAll() {
    return manageAll;
  }

  /**
   * Inform for a possible change propolsal in Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Name, otherwise the value for Name
   */
  public Optional<NameVO> getName() {
    return name;
  }

  /**
   * Inform for a possible change propolsal in ReadAll
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for ReadAll, otherwise the value for ReadAll
   */
  public Optional<ReadAllVO> getReadAll() {
    return readAll;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Inform for a possible change propolsal in WriteAll
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for WriteAll, otherwise the value for WriteAll
   */
  public Optional<WriteAllVO> getWriteAll() {
    return writeAll;
  }

  /**
   * Assigna change proposal for Enabled to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityDomainVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityDomainVisibleProjection setEnabled(final Boolean value) {
    this.enabled = Optional.of(EnabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Level to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityDomainVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityDomainVisibleProjection setLevel(final Integer value) {
    this.level = Optional.of(LevelVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for ManageAll to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityDomainVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityDomainVisibleProjection setManageAll(final Boolean value) {
    this.manageAll = Optional.of(ManageAllVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Name to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityDomainVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityDomainVisibleProjection setName(final String value) {
    this.name = Optional.of(NameVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for ReadAll to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityDomainVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityDomainVisibleProjection setReadAll(final Boolean value) {
    this.readAll = Optional.of(ReadAllVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityDomainVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityDomainVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityDomainVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityDomainVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for WriteAll to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityDomainVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityDomainVisibleProjection setWriteAll(final Boolean value) {
    this.writeAll = Optional.of(WriteAllVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("name".equals(field)) {
      this.unsetName();
    }
    if ("level".equals(field)) {
      this.unsetLevel();
    }
    if ("readAll".equals(field)) {
      this.unsetReadAll();
    }
    if ("writeAll".equals(field)) {
      this.unsetWriteAll();
    }
    if ("manageAll".equals(field)) {
      this.unsetManageAll();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityDomainVisibleProjection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Level
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityDomainVisibleProjection unsetLevel() {
    this.level = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for ManageAll
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityDomainVisibleProjection unsetManageAll() {
    this.manageAll = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Name
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityDomainVisibleProjection unsetName() {
    this.name = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for ReadAll
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityDomainVisibleProjection unsetReadAll() {
    this.readAll = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityDomainVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityDomainVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for WriteAll
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityDomainVisibleProjection unsetWriteAll() {
    this.writeAll = Optional.empty();
    return this;
  }
}
