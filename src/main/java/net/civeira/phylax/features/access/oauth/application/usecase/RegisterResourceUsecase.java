/* @autogenerated */
package net.civeira.phylax.features.access.oauth.application.usecase;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.gateway.RelyingPartyReadRepositoryGateway;
import net.civeira.phylax.features.access.relyingparty.query.RelyingPartyFilter;
import net.civeira.phylax.features.access.securityscope.SecurityScope;
import net.civeira.phylax.features.access.securityscope.SecurityScopeFacade;
import net.civeira.phylax.features.access.securityscope.SecurityScopeKindOptions;
import net.civeira.phylax.features.access.securityscope.SecurityScopeVisibilityOptions;
import net.civeira.phylax.features.access.securityscope.gateway.SecurityScopeWriteRepositoryGateway;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeFilter;
import net.civeira.phylax.features.access.securityscope.transition.SecurityScopeChangeProposal;
import net.civeira.phylax.features.oauth.rbac.domain.PropertyList;
import net.civeira.phylax.features.oauth.rbac.domain.Resource;
import net.civeira.phylax.features.oauth.rbac.domain.ScopeKind;
import net.civeira.phylax.features.oauth.rbac.domain.ScopeList;

@ApplicationScoped
@RequiredArgsConstructor
public class RegisterResourceUsecase {
  private final RelyingPartyReadRepositoryGateway parties;
  private final SecurityScopeFacade scopeFacade;
  private final SecurityScopeWriteRepositoryGateway scopes;

  public void registerScopes(String relayParty, List<ScopeList> paramMap) {
    parties.find(RelyingPartyFilter.builder().code(relayParty).build()).ifPresent(party -> {
      paramMap.forEach(scopeList -> {
        Resource resource = scopeList.getResource();
        List<SecurityScope> list = scopes.listForUpdate(
            SecurityScopeFilter.builder().relyingParty(party).resource(resource.getName()).build());
        scopeList.getScopes().forEach(scope -> {
          Optional<SecurityScope> prev = list.stream()
              .filter(existing -> existing.getScopeValue().equals(scope.getName())).findFirst();
          if (!prev.isPresent()) {
            scopes.create(scopeFacade.create(
                SecurityScopeChangeProposal.builder().newUid().relyingParty(party).enabled(true)
                    .resource(resource.getName()).scope(scope.getName()).kind(kind(scope.getKind()))
                    .visibility(SecurityScopeVisibilityOptions.EXPLICIT).build()));
          } else {
            list.removeIf(existing -> existing.getScopeValue().equals(scope.getName()));
          }
        });
        list.forEach(prev -> {
          scopes.update(prev, scopeFacade.enable(prev));
        });
      });
    });
  }

  public void registerSchema(String relayParty, List<PropertyList> paramMap) {
    /* nothing for now */
  }

  private SecurityScopeKindOptions kind(ScopeKind scopeKind) {
    if (ScopeKind.MANAGE == scopeKind) {
      return SecurityScopeKindOptions.MANAGE;
    } else if (ScopeKind.WRITE == scopeKind) {
      return SecurityScopeKindOptions.WRITE;
    } else {
      return SecurityScopeKindOptions.READ;
    }
  }
}
