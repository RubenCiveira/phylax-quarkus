package net.civeira.phylax.features.access.scopeassignation.application.usecase.update;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationFacade;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationRef;
import net.civeira.phylax.features.access.scopeassignation.application.projection.ScopeAssignationStateProyection;
import net.civeira.phylax.features.access.scopeassignation.application.request.ScopeAssignationStateChange;
import net.civeira.phylax.features.access.scopeassignation.application.service.visibility.ScopeAssignationsVisibility;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationCacheGateway;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class ScopeAssignationUpdateUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ScopeAssignationCacheGateway cache;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ScopeAssignationFacade facade;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ScopeAssignationWriteRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<ScopeAssignationAllowUpdateProposal> updateAllowEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<ScopeAssignationUpdateProposal> updateProposalEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<ScopeAssignationUpdateEvent> updatedEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ScopeAssignationsVisibility visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final ScopeAssignationRef reference) {
    ScopeAssignationAllowUpdateProposal base = ScopeAssignationAllowUpdateProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    ScopeAssignationAllowUpdateProposal base = ScopeAssignationAllowUpdateProposal.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @param input
   * @return The slide with some values
   */
  public ScopeAssignationStateProyection update(final Interaction query,
      final ScopeAssignationRef reference, final ScopeAssignationStateChange input) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    ScopeAssignation original = visibility.retrieveVisibleForUpdate(query, reference.getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    ScopeAssignationStateChange filled = visibility.copyWithFixed(query, input);
    ScopeAssignationUpdateProposal proposal = ScopeAssignationUpdateProposal.builder().dto(filled)
        .interaction(query).reference(reference).build();
    updateProposalEmitter.fire(proposal);
    ScopeAssignationStateChange dto = proposal.getDto();;
    ScopeAssignation saved = gateway.update(original, facade.update(original, dto));
    cache.update(saved);
    ScopeAssignationUpdateEvent event =
        ScopeAssignationUpdateEvent.builder().payload(saved).interaction(query).build();
    updatedEmitter.fire(event);
    return visibility.copyWithHidden(query, event.getPayload());
  }
}
