package net.civeira.phylax.features.access.scopeassignation.application.usecase.update;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotAllowedException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Allow;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.scopeassignation.application.visibility.ScopeAssignationsVisibility;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignationChangeSet;
import net.civeira.phylax.features.access.scopeassignation.domain.ScopeAssignationRef;
import net.civeira.phylax.features.access.scopeassignation.domain.gateway.ScopeAssignationCacheGateway;
import net.civeira.phylax.features.access.scopeassignation.domain.gateway.ScopeAssignationWriteRepositoryGateway;

@ApplicationScoped
@RequiredArgsConstructor
public class ScopeAssignationUpdateUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ScopeAssignationCacheGateway cache;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ScopeAssignationWriteRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<ScopeAssignationUpdateAllowDecision> updateAllowEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<ScopeAssignationUpdateCheck> updateCheckEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<ScopeAssignationUpdateEnrich> updateEnrichEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ScopeAssignationsVisibility visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final ScopeAssignationRef reference) {
    ScopeAssignationUpdateAllowDecision base = ScopeAssignationUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).reference(reference).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    ScopeAssignationUpdateAllowDecision base = ScopeAssignationUpdateAllowDecision.builder()
        .detail(Allow.builder().allowed(true).description("Allowed by default").build())
        .query(query).build();
    updateAllowEmitter.fire(base);
    return base.getDetail();
  }

  /**
   * Recover a slide of data.
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @param input
   * @return The slide with some values
   */
  public ScopeAssignationUpdateProjection update(final Interaction query,
      final ScopeAssignationRef reference, final ScopeAssignationUpdateInput input) {
    Allow detail = allow(query, reference);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    ScopeAssignation original = visibility.retrieveVisibleForUpdate(query, reference.getUid())
        .orElseThrow(() -> new NotFoundException(""));
    ScopeAssignationUpdateInput filled = ScopeAssignationUpdateInput
        .fromChangeSet(visibility.copyWithFixed(query, input.toChangeSet()));
    ScopeAssignationUpdateCheck check = ScopeAssignationUpdateCheck.builder().input(filled)
        .interaction(query).reference(reference).build();
    updateCheckEmitter.fire(check);
    ScopeAssignationUpdateEnrich proposal = ScopeAssignationUpdateEnrich.builder().input(filled)
        .interaction(query).reference(reference).build();
    updateEnrichEmitter.fire(proposal);
    ScopeAssignationChangeSet dto = proposal.getInput().toChangeSet();
    ScopeAssignation saved = gateway.update(original, original.update(dto));
    cache.update(saved);
    return ScopeAssignationUpdateProjection.from(visibility.copyWithHidden(query, saved));
  }
}
