package net.civeira.phylax.features.access.useraccesstemporalcode.domain;

import java.time.OffsetDateTime;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.common.value.Uuid;
import net.civeira.phylax.features.access.user.domain.UserRef;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.FailedLoginAttemptsVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.RecoveryCodeExpirationVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.RecoveryCodeVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.TempSecondFactorSeedExpirationVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.TempSecondFactorSeedVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.UserVO;
import net.civeira.phylax.features.access.useraccesstemporalcode.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold user access temporal code attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserAccessTemporalCodeChangeSet {

  /**
   * @autogenerated EntityChangeSetGenerator
   */
  public static class UserAccessTemporalCodeChangeSetBuilder {

    /**
     * Append FailedLoginAttempts crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param failedLoginAttempts The FailedLoginAttempts value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder failedLoginAttempts(
        final Integer failedLoginAttempts) {
      return failedLoginAttempts(Optional.of(FailedLoginAttemptsVO.from(failedLoginAttempts)));
    }

    /**
     * Append FailedLoginAttempts value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param failedLoginAttempts The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder failedLoginAttempts(
        final Optional<FailedLoginAttemptsVO> failedLoginAttempts) {
      this.failedLoginAttempts$value = failedLoginAttempts;
      this.failedLoginAttempts$set = true;
      return this;
    }

    /**
     * @autogenerated EntityChangeSetGenerator
     * @return
     */
    public UserAccessTemporalCodeChangeSetBuilder newUid() {
      return version(0).uid(Uuid.comb().toString());
    }

    /**
     * Append RecoveryCode crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param recoveryCode The RecoveryCode value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder recoveryCode(final String recoveryCode) {
      return recoveryCode(Optional.of(RecoveryCodeVO.from(recoveryCode)));
    }

    /**
     * Append RecoveryCode value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param recoveryCode The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder recoveryCode(
        final Optional<RecoveryCodeVO> recoveryCode) {
      this.recoveryCode$value = recoveryCode;
      this.recoveryCode$set = true;
      return this;
    }

    /**
     * Append RecoveryCodeExpiration crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param recoveryCodeExpiration The RecoveryCodeExpiration value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder recoveryCodeExpiration(
        final OffsetDateTime recoveryCodeExpiration) {
      return recoveryCodeExpiration(
          Optional.of(RecoveryCodeExpirationVO.from(recoveryCodeExpiration)));
    }

    /**
     * Append RecoveryCodeExpiration value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param recoveryCodeExpiration The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder recoveryCodeExpiration(
        final Optional<RecoveryCodeExpirationVO> recoveryCodeExpiration) {
      this.recoveryCodeExpiration$value = recoveryCodeExpiration;
      this.recoveryCodeExpiration$set = true;
      return this;
    }

    /**
     * Append TempSecondFactorSeed crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param tempSecondFactorSeed The TempSecondFactorSeed value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder tempSecondFactorSeed(
        final String tempSecondFactorSeed) {
      return tempSecondFactorSeed(
          Optional.of(TempSecondFactorSeedVO.fromPlain(tempSecondFactorSeed)));
    }

    /**
     * Append TempSecondFactorSeed value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param tempSecondFactorSeed The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder tempSecondFactorSeed(
        final Optional<TempSecondFactorSeedVO> tempSecondFactorSeed) {
      this.tempSecondFactorSeed$value = tempSecondFactorSeed;
      this.tempSecondFactorSeed$set = true;
      return this;
    }

    /**
     * Append TempSecondFactorSeedExpiration crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param tempSecondFactorSeedExpiration The TempSecondFactorSeedExpiration value to wrap in a
     *        value object.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder tempSecondFactorSeedExpiration(
        final OffsetDateTime tempSecondFactorSeedExpiration) {
      return tempSecondFactorSeedExpiration(
          Optional.of(TempSecondFactorSeedExpirationVO.from(tempSecondFactorSeedExpiration)));
    }

    /**
     * Append TempSecondFactorSeedExpiration value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param tempSecondFactorSeedExpiration The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder tempSecondFactorSeedExpiration(
        final Optional<TempSecondFactorSeedExpirationVO> tempSecondFactorSeedExpiration) {
      this.tempSecondFactorSeedExpiration$value = tempSecondFactorSeedExpiration;
      this.tempSecondFactorSeedExpiration$set = true;
      return this;
    }

    /**
     * Append Uid crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param uid The Uid value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder uid(final String uid) {
      return uid(Optional.of(UidVO.from(uid)));
    }

    /**
     * Append Uid value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param uid The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder uid(final Optional<UidVO> uid) {
      this.uid$value = uid;
      this.uid$set = true;
      return this;
    }

    /**
     * Append User crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param user The User value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder user(final UserRef user) {
      return user(Optional.of(UserVO.from(user)));
    }

    /**
     * Append User value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param user The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder user(final Optional<UserVO> user) {
      this.user$value = user;
      this.user$set = true;
      return this;
    }

    /**
     * Append Version crud value and convert as value object.
     *
     * @autogenerated EntityChangeSetGenerator
     * @param version The Version value to wrap in a value object.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder version(final Integer version) {
      return version(Optional.of(VersionVO.from(version)));
    }

    /**
     * Append Version value
     *
     * @autogenerated EntityChangeSetGenerator
     * @param version The value object with the information.
     * @return Self instance to continue with a flow build
     */
    public UserAccessTemporalCodeChangeSetBuilder version(final Optional<VersionVO> version) {
      this.version$value = version;
      this.version$set = true;
      return this;
    }
  }

  /**
   * The amount login attempts failed since the last right login.
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<FailedLoginAttemptsVO> failedLoginAttempts = Optional.empty();

  /**
   * El codigo de recuperacion enviado por email
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<RecoveryCodeVO> recoveryCode = Optional.empty();

  /**
   * La caducidad del c√≥digo de recuperacion
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<RecoveryCodeExpirationVO> recoveryCodeExpiration = Optional.empty();

  /**
   * the seed used to the otp login
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<TempSecondFactorSeedVO> tempSecondFactorSeed = Optional.empty();

  /**
   * La caducidad del c√≥digo de recuperacion
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<TempSecondFactorSeedExpirationVO> tempSecondFactorSeedExpiration =
      Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * El usuario para el que se tienen estos datos
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<UserVO> user = Optional.empty();

  /**
   * Campo con el n√∫mero de version de user access temporal code para controlar bloqueos optimistas
   *
   * @autogenerated EntityChangeSetGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Inform for a possible change propolsal in FailedLoginAttempts
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for FailedLoginAttempts, otherwise the value for
   *         FailedLoginAttempts
   */
  public Optional<FailedLoginAttemptsVO> getFailedLoginAttempts() {
    return failedLoginAttempts;
  }

  /**
   * Inform for a possible change propolsal in RecoveryCode
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for RecoveryCode, otherwise the value for
   *         RecoveryCode
   */
  public Optional<RecoveryCodeVO> getRecoveryCode() {
    return recoveryCode;
  }

  /**
   * Inform for a possible change propolsal in RecoveryCodeExpiration
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for RecoveryCodeExpiration, otherwise the value
   *         for RecoveryCodeExpiration
   */
  public Optional<RecoveryCodeExpirationVO> getRecoveryCodeExpiration() {
    return recoveryCodeExpiration;
  }

  /**
   * Inform for a possible change propolsal in TempSecondFactorSeed
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for TempSecondFactorSeed, otherwise the value for
   *         TempSecondFactorSeed
   */
  public Optional<TempSecondFactorSeedVO> getTempSecondFactorSeed() {
    return tempSecondFactorSeed;
  }

  /**
   * Inform for a possible change propolsal in TempSecondFactorSeedExpiration
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for TempSecondFactorSeedExpiration, otherwise the
   *         value for TempSecondFactorSeedExpiration
   */
  public Optional<TempSecondFactorSeedExpirationVO> getTempSecondFactorSeedExpiration() {
    return tempSecondFactorSeedExpiration;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in User
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for User, otherwise the value for User
   */
  public Optional<UserVO> getUser() {
    return user;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated EntityChangeSetGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for FailedLoginAttempts to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAccessTemporalCodeChangeSet
   * @return self instance to enable a flow code
   */
  public UserAccessTemporalCodeChangeSet setFailedLoginAttempts(final Integer value) {
    this.failedLoginAttempts = Optional.of(FailedLoginAttemptsVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for RecoveryCode to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAccessTemporalCodeChangeSet
   * @return self instance to enable a flow code
   */
  public UserAccessTemporalCodeChangeSet setRecoveryCode(final String value) {
    this.recoveryCode = Optional.of(RecoveryCodeVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for RecoveryCodeExpiration to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAccessTemporalCodeChangeSet
   * @return self instance to enable a flow code
   */
  public UserAccessTemporalCodeChangeSet setRecoveryCodeExpiration(final OffsetDateTime value) {
    this.recoveryCodeExpiration = Optional.of(RecoveryCodeExpirationVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for TempSecondFactorSeed to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAccessTemporalCodeChangeSet
   * @return self instance to enable a flow code
   */
  public UserAccessTemporalCodeChangeSet setTempSecondFactorSeed(final String value) {
    this.tempSecondFactorSeed = Optional.of(TempSecondFactorSeedVO.fromPlain(value));
    return this;
  }

  /**
   * Assigna change proposal for TempSecondFactorSeedExpiration to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAccessTemporalCodeChangeSet
   * @return self instance to enable a flow code
   */
  public UserAccessTemporalCodeChangeSet setTempSecondFactorSeedExpiration(
      final OffsetDateTime value) {
    this.tempSecondFactorSeedExpiration = Optional.of(TempSecondFactorSeedExpirationVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAccessTemporalCodeChangeSet
   * @return self instance to enable a flow code
   */
  public UserAccessTemporalCodeChangeSet setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for User to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAccessTemporalCodeChangeSet
   * @return self instance to enable a flow code
   */
  public UserAccessTemporalCodeChangeSet setUser(final UserRef value) {
    this.user = Optional.of(UserVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated EntityChangeSetGenerator
   * @param value The proposal value for UserAccessTemporalCodeChangeSet
   * @return self instance to enable a flow code
   */
  public UserAccessTemporalCodeChangeSet setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated EntityChangeSetGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("user".equals(field)) {
      this.unsetUser();
    }
    if ("tempSecondFactorSeed".equals(field)) {
      this.unsetTempSecondFactorSeed();
    }
    if ("tempSecondFactorSeedExpiration".equals(field)) {
      this.unsetTempSecondFactorSeedExpiration();
    }
    if ("failedLoginAttempts".equals(field)) {
      this.unsetFailedLoginAttempts();
    }
    if ("recoveryCode".equals(field)) {
      this.unsetRecoveryCode();
    }
    if ("recoveryCodeExpiration".equals(field)) {
      this.unsetRecoveryCodeExpiration();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for FailedLoginAttempts
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAccessTemporalCodeChangeSet unsetFailedLoginAttempts() {
    this.failedLoginAttempts = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for RecoveryCode
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAccessTemporalCodeChangeSet unsetRecoveryCode() {
    this.recoveryCode = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for RecoveryCodeExpiration
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAccessTemporalCodeChangeSet unsetRecoveryCodeExpiration() {
    this.recoveryCodeExpiration = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for TempSecondFactorSeed
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAccessTemporalCodeChangeSet unsetTempSecondFactorSeed() {
    this.tempSecondFactorSeed = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for TempSecondFactorSeedExpiration
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAccessTemporalCodeChangeSet unsetTempSecondFactorSeedExpiration() {
    this.tempSecondFactorSeedExpiration = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAccessTemporalCodeChangeSet unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for User
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAccessTemporalCodeChangeSet unsetUser() {
    this.user = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated EntityChangeSetGenerator
   * @return self instance to enable a flow code.
   */
  public UserAccessTemporalCodeChangeSet unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
