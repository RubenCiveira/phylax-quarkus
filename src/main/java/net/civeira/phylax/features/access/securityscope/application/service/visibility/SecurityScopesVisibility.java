package net.civeira.phylax.features.access.securityscope.application.service.visibility;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.security.Interaction;
import net.civeira.phylax.features.access.relyingparty.application.service.visibility.RelyingPartysVisibility;
import net.civeira.phylax.features.access.securityscope.SecurityScope;
import net.civeira.phylax.features.access.securityscope.SecurityScopeFacade;
import net.civeira.phylax.features.access.securityscope.SecurityScopeRef;
import net.civeira.phylax.features.access.securityscope.application.projection.SecurityScopeStateProyection;
import net.civeira.phylax.features.access.securityscope.application.request.SecurityScopeStateChange;
import net.civeira.phylax.features.access.securityscope.gateway.SecurityScopeCacheGateway;
import net.civeira.phylax.features.access.securityscope.gateway.SecurityScopeCached;
import net.civeira.phylax.features.access.securityscope.gateway.SecurityScopeReadRepositoryGateway;
import net.civeira.phylax.features.access.securityscope.gateway.SecurityScopeWriteRepositoryGateway;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeCursor;
import net.civeira.phylax.features.access.securityscope.query.SecurityScopeFilter;
import net.civeira.phylax.features.access.securityscope.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.securityscope.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.trustedclient.application.service.visibility.TrustedClientsVisibility;

@ApplicationScoped
@RequiredArgsConstructor
public class SecurityScopesVisibility {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityScopeFacade aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityScopeCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityScopeFilterProposal> filterProposalEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityScopeFixedFieldsProposal> fixedFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityScopeVisibleContentProposal> guardEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityScopeHiddenFieldsProposal> hiddenFieldsEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<SecurityScopePresetProposal> presetEmitter;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final RelyingPartysVisibility relyingPartysVisibility;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityScopeReadRepositoryGateway securityScopeReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final SecurityScopeWriteRepositoryGateway securityScopeWriteRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final TrustedClientsVisibility trustedClientsVisibility;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return uids.size() == listVisibles(prev, SecurityScopeFilter.builder().uids(uids).build(),
        SecurityScopeCursor.builder().build()).size();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public SecurityScopeStateChange copyWithFixed(Interaction prev, SecurityScopeStateChange source,
      SecurityScope original) {
    SecurityScopeStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(withReferences::unset);
    SecurityScopePresetProposal proposal = SecurityScopePresetProposal.builder().dto(withReferences)
        .interaction(prev).original(original).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public SecurityScopeStateChange copyWithFixed(Interaction prev, SecurityScopeStateChange source) {
    SecurityScopeStateChange withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(withReferences::unset);
    SecurityScopePresetProposal proposal =
        SecurityScopePresetProposal.builder().dto(withReferences).interaction(prev).build();
    presetEmitter.fire(proposal);
    return proposal.getDto();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityScope
   * @return The input dto with hidden values
   */
  public SecurityScopeStateProyection copyWithHidden(Interaction prev,
      SecurityScope securityScope) {
    SecurityScopeStateProyection target = new SecurityScopeStateProyection(securityScope);
    fieldsToHide(prev, securityScope).forEach(target::unset);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, SecurityScopeFilter filter) {
    return securityScopeReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.readonlyFields());
    SecurityScopeFixedFieldsProposal proposal =
        SecurityScopeFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityScope
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, SecurityScopeRef securityScope) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, securityScope));
    fields.addAll(aggregate.readonlyFields());
    SecurityScopeFixedFieldsProposal proposal = SecurityScopeFixedFieldsProposal.builder()
        .fields(fields).securityScope(securityScope).query(prev).build();
    fixedFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    SecurityScopeHiddenFieldsProposal proposal =
        SecurityScopeHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityScope
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, SecurityScopeRef securityScope) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    SecurityScopeHiddenFieldsProposal proposal = SecurityScopeHiddenFieldsProposal.builder()
        .fields(fields).securityScope(securityScope).query(prev).build();
    hiddenFieldsEmitter.fire(proposal);
    return proposal.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public SecurityScopeCached listCachedVisibles(Interaction prev, SecurityScopeFilter filter,
      SecurityScopeCursor cursor) {
    SecurityScopeFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<SecurityScope> listVisibles(Interaction prev, SecurityScopeFilter filter,
      SecurityScopeCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<SecurityScope> listVisiblesForUpdate(Interaction prev, SecurityScopeFilter filter,
      SecurityScopeCursor cursor) {
    return queryItemsForUpdate(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public SecurityScopeCached retrieveCachedVisible(Interaction prev, String uid) {
    SecurityScopeCursor cursor = SecurityScopeCursor.builder().limit(1).build();
    SecurityScopeFilter visibleFilter =
        applyPreVisibilityFilter(prev, SecurityScopeFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<SecurityScope> list =
          retrieveVisible(prev, uid).<List<SecurityScope>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<SecurityScope> retrieveVisible(Interaction prev, String uid) {
    SecurityScopeFilter filter =
        applyPreVisibilityFilter(prev, SecurityScopeFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<SecurityScope> retrieveVisibleForUpdate(Interaction prev, String uid) {
    SecurityScopeFilter filter =
        applyPreVisibilityFilter(prev, SecurityScopeFilter.builder().uid(uid).build());
    return queryItemForUpdate(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private SecurityScopeFilter applyPreVisibilityFilter(Interaction prev,
      SecurityScopeFilter filter) {
    SecurityScopeFilterProposal proposal =
        SecurityScopeFilterProposal.builder().filter(filter).interaction(prev).build();
    filterProposalEmitter.fire(proposal);
    return proposal.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param securityScopeRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, SecurityScope securityScopeRef) {
    SecurityScopeVisibleContentProposal proposal = SecurityScopeVisibleContentProposal.builder()
        .visible(true).entity(securityScopeRef).interaction(prev).build();
    guardEmitter.fire(proposal);
    return Boolean.TRUE.equals(proposal.getVisible());
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<SecurityScope> queryItem(Interaction prev, String uid,
      SecurityScopeFilter filter) {
    return securityScopeReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<SecurityScope> queryItemForUpdate(Interaction prev, String uid,
      SecurityScopeFilter filter) {
    return securityScopeWriteRepositoryGateway.retrieveForUpdate(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<SecurityScope> queryItems(Interaction prev, SecurityScopeFilter filter,
      SecurityScopeCursor cursor) {
    List<SecurityScope> list = new ArrayList<>();
    Iterator<SecurityScope> slide = securityScopeReadRepositoryGateway.slide(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<SecurityScope> queryItemsForUpdate(Interaction prev, SecurityScopeFilter filter,
      SecurityScopeCursor cursor) {
    List<SecurityScope> list = new ArrayList<>();
    Iterator<SecurityScope> slide = securityScopeWriteRepositoryGateway
        .slideForUpdate(filter, cursor).slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private SecurityScopeStateChange visiblesReferences(Interaction prev,
      SecurityScopeStateChange source) {
    source.getTrustedClient().flatMap(TrustedClientVO::getReferenceValue).ifPresent(ref -> {
      boolean visible = trustedClientsVisibility.checkVisibility(prev, ref);
      if (!visible) {
        throw new NotFoundException("No trusted client - " + ref);
      }
    });
    source.getRelyingParty().flatMap(RelyingPartyVO::getReferenceValue).ifPresent(ref -> {
      boolean visible = relyingPartysVisibility.checkVisibility(prev, ref);
      if (!visible) {
        throw new NotFoundException("No relying party - " + ref);
      }
    });
    return source;
  }
}
