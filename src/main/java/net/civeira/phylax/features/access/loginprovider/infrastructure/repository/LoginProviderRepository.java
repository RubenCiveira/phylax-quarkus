package net.civeira.phylax.features.access.loginprovider.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;

import javax.sql.DataSource;

import io.opentelemetry.api.trace.Tracer;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.infrastructure.sql.OptimistLockException;
import net.civeira.phylax.common.infrastructure.sql.PartialWhere;
import net.civeira.phylax.common.infrastructure.sql.SqlCommand;
import net.civeira.phylax.common.infrastructure.sql.SqlConverter;
import net.civeira.phylax.common.infrastructure.sql.SqlListParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlOperator;
import net.civeira.phylax.common.infrastructure.sql.SqlParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlResult;
import net.civeira.phylax.common.infrastructure.sql.SqlSchematicQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlTemplate;
import net.civeira.phylax.features.access.loginprovider.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.LoginProviderRef;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderCursor;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderFilter;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderOrder;
import net.civeira.phylax.features.access.loginprovider.valueobject.CertificateVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.DirectAccessVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.DisabledVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.MetadataVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.NameVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.PrivateKeyVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.PublicKeyVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.SourceVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.TenantVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.UidVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.UsersEnabledByDefaultVO;
import net.civeira.phylax.features.access.loginprovider.valueobject.VersionVO;

@ApplicationScoped
@RequiredArgsConstructor
@Slf4j
public class LoginProviderRepository {

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String CERTIFICATE = "certificate";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String DIRECT_ACCESS = "directAccess";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String DIRECT_ACCESS_SNAKE = "direct_access";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String DISABLED = "disabled";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_CERTIFICATE = "login_provider.certificate";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_DIRECT_ACCESS = "login_provider.direct_access";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_DISABLED = "login_provider.disabled";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_METADATA = "login_provider.metadata";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_NAME = "login_provider.name";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_PRIVATE_KEY = "login_provider.private_key";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_PUBLIC_KEY = "login_provider.public_key";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_SNAKE = "login_provider";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_SOURCE = "login_provider.source";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_TENANT = "login_provider.tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_UID = "login_provider.uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_USERS_ENABLED_BY_DEFAULT =
      "login_provider.users_enabled_by_default";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LOGIN_PROVIDER_VERSION = "login_provider.version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String METADATA = "metadata";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String NAME = "name";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String PRIVATE_KEY = "privateKey";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String PRIVATE_KEY_SNAKE = "private_key";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String PUBLIC_KEY = "publicKey";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String PUBLIC_KEY_SNAKE = "public_key";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String SOURCE = "source";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT = "tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String UID = "uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String USERS_ENABLED_BY_DEFAULT = "usersEnabledByDefault";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String USERS_ENABLED_BY_DEFAULT_SNAKE = "users_enabled_by_default";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String VERSION = "version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final DataSource datasource;

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final Tracer tracer;

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public long count(LoginProviderFilter filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<Long> sq = filteredQuery(template, filter);
      sq.select("count(uid) as uid");
      return sq.query(row -> Optional.of(row.getLong(1))).one().orElse(0l);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public LoginProvider create(LoginProvider entity) {
    return runCreate(entity, null);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  public LoginProvider create(LoginProvider entity, Predicate<LoginProvider> verifier) {
    return runCreate(entity, verifier);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   */
  public void delete(LoginProvider entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq =
          template.createSqlCommand("delete from \"login_provider\" where \"uid\" = :uid");
      sq.with(UID, SqlParameterValue.of(entity.getUidValue()));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No delete from");
      }
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public LoginProvider enrich(LoginProviderRef reference) {
    return reference instanceof LoginProvider loginProvider ? loginProvider
        : retrieve(reference.getUidValue(), Optional.empty())
            .orElseThrow(() -> new NotFoundException(
                "Trying to enrich inexistent LoginProvider: " + reference.getUidValue()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public LoginProvider enrichForUpdate(LoginProviderRef reference) {
    return reference instanceof LoginProvider loginProvider ? loginProvider
        : retrieveForUpdate(reference.getUidValue(), Optional.empty())
            .orElseThrow(() -> new NotFoundException(
                "Trying to enrich inexistent LoginProvider: " + reference.getUidValue()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean exists(String uid, Optional<LoginProviderFilter> filter) {
    return retrieve(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean existsForUpdate(String uid, Optional<LoginProviderFilter> filter) {
    return retrieveForUpdate(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<LoginProvider> find(LoginProviderFilter filter) {
    LoginProviderCursor cursor = LoginProviderCursor.builder().build();
    return new LoginProviderSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<LoginProvider> find(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<LoginProvider> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<LoginProvider> findForUpdate(LoginProviderFilter filter) {
    LoginProviderCursor cursor = LoginProviderCursor.builder().build();
    return new LoginProviderSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<LoginProvider> findForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<LoginProvider> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<LoginProvider> list(LoginProviderFilter filter) {
    LoginProviderCursor cursor = LoginProviderCursor.builder().build();
    return new LoginProviderSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<LoginProvider> list(final String sql, final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, false);
  }

  /**
   * sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<LoginProvider> list(final String sql, final Map<String, SqlParameterValue> params,
      final int limit) {
    return list(sql, params, Integer.valueOf(limit), false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<LoginProvider> listForUpdate(LoginProviderFilter filter) {
    LoginProviderCursor cursor = LoginProviderCursor.builder().build();
    return new LoginProviderSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<LoginProvider> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, true);
  }

  /**
   * sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<LoginProvider> listForUpdate(final String sql,
      final Map<String, SqlParameterValue> params, final int limit) {
    return list(sql, params, Integer.valueOf(limit), true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<LoginProvider> retrieve(String uid, Optional<LoginProviderFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      LoginProviderFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> LoginProviderFilter.builder().uid(uid).build());
      SqlSchematicQuery<LoginProvider> sq = filteredQuery(template, readyFilter);
      return sq.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<LoginProvider> retrieveForUpdate(String uid,
      Optional<LoginProviderFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      LoginProviderFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> LoginProviderFilter.builder().uid(uid).build());
      SqlSchematicQuery<LoginProvider> sq = filteredQuery(template, readyFilter);
      return sq.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<LoginProvider> slide(LoginProviderFilter filter, LoginProviderCursor cursor) {
    return new LoginProviderSlider(runList(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<LoginProvider> slideForUpdate(LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    return new LoginProviderSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public LoginProvider update(LoginProvider entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "update \"login_provider\" set  \"tenant\" = :tenant, \"name\" = :name, \"source\" = :source, \"disabled\" = :disabled, \"direct_access\" = :directAccess, \"public_key\" = :publicKey, \"private_key\" = :privateKey, \"certificate\" = :certificate, \"metadata\" = :metadata, \"users_enabled_by_default\" = :usersEnabledByDefault, \"version\" = \"version\" + 1 where \"uid\" = :uid and \"version\" = :version");
      sq.with(UID, SqlParameterValue.of(entity.getUid().getValue()));
      sq.with(TENANT, SqlParameterValue.of(entity.getTenant().getReferenceValue()));
      sq.with(NAME, SqlParameterValue.of(entity.getName().getValue()));
      sq.with(SOURCE, SqlParameterValue.of(entity.getSource().getValue().toString()));
      sq.with(DISABLED, entity.getDisabled().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullBoolean));
      sq.with(DIRECT_ACCESS, entity.getDirectAccess().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullBoolean));
      sq.with(PUBLIC_KEY, entity.getPublicKey().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(PRIVATE_KEY, entity.getPrivateKey().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(CERTIFICATE, entity.getCertificate().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(METADATA, entity.getMetadata().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(USERS_ENABLED_BY_DEFAULT,
          SqlParameterValue.of(entity.getUsersEnabledByDefault().getValue()));
      sq.with(VERSION, entity.getVersion().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new OptimistLockException("No delete from");
      }
      return entity.nextVersion();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param cursor
   */
  private void attachWithOrder(SqlSchematicQuery<LoginProvider> sq, LoginProviderCursor cursor) {
    PartialWhere[] offset = new PartialWhere[] {PartialWhere.empty(), PartialWhere.empty()};
    for (LoginProviderOrder order : cursor.getOrder()) {
      tryToOrderByNameAsc(sq, offset, cursor, order);
      tryToOrderByNameDesc(sq, offset, cursor, order);
    }
    Optional<String> sinceUid = cursor.getSinceUid();
    if (sinceUid.isPresent()) {
      offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
          PartialWhere.where("uid", SqlOperator.GT, SqlParameterValue.of(sinceUid.get()))));
    }
    sq.where(offset[0]);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @return
   */
  private SqlConverter<LoginProvider> converter() {
    return row -> {
      try {
        return Optional.of(LoginProvider.builder().uid(UidVO.from(row.getString(UID)))
            .tenant(TenantVO.fromReference(row.getString(TENANT)))
            .name(NameVO.from(row.getString(NAME))).source(SourceVO.tryFrom(row.getString(SOURCE)))
            .disabled(DisabledVO.from(row.getBoolean(DISABLED)))
            .directAccess(DirectAccessVO.from(row.getBoolean(DIRECT_ACCESS_SNAKE)))
            .publicKey(PublicKeyVO.from(row.getString(PUBLIC_KEY_SNAKE)))
            .privateKey(PrivateKeyVO.from(row.getString(PRIVATE_KEY_SNAKE)))
            .certificate(CertificateVO.from(row.getString(CERTIFICATE)))
            .metadata(MetadataVO.from(row.getString(METADATA)))
            .usersEnabledByDefault(
                UsersEnabledByDefaultVO.from(row.getBoolean(USERS_ENABLED_BY_DEFAULT_SNAKE)))
            .version(VersionVO.from(row.getInt(VERSION))).build());
      } catch (ConstraintException ce) {
        log.error("Unable to map data for {}", row.getString(1), ce);
        return Optional.empty();
      }
    };
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param template
   * @param filter
   * @return
   */
  private <T> SqlSchematicQuery<T> filteredQuery(SqlTemplate template, LoginProviderFilter filter) {
    SqlSchematicQuery<T> sq = template.createSqlSchematicQuery(LOGIN_PROVIDER_SNAKE);
    sq.selectFields(LOGIN_PROVIDER_UID, LOGIN_PROVIDER_TENANT, LOGIN_PROVIDER_NAME,
        LOGIN_PROVIDER_SOURCE, LOGIN_PROVIDER_DISABLED, LOGIN_PROVIDER_DIRECT_ACCESS,
        LOGIN_PROVIDER_PUBLIC_KEY, LOGIN_PROVIDER_PRIVATE_KEY, LOGIN_PROVIDER_CERTIFICATE,
        LOGIN_PROVIDER_METADATA, LOGIN_PROVIDER_USERS_ENABLED_BY_DEFAULT, LOGIN_PROVIDER_VERSION);
    filter.getUid().ifPresent(uid -> sq.where(UID, SqlOperator.EQ, SqlParameterValue.of(uid)));
    if (!filter.getUids().isEmpty()) {
      sq.where(UID, SqlOperator.IN, SqlListParameterValue.strings(filter.getUids()));
    }
    filter.getSearch().ifPresent(
        search -> sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%")));
    filter.getName().ifPresent(name -> sq.where(NAME, SqlOperator.EQ, SqlParameterValue.of(name)));
    filter.getTenant().ifPresent(
        tenant -> sq.where(TENANT, SqlOperator.EQ, SqlParameterValue.of(tenant.getUidValue())));
    if (!filter.getTenants().isEmpty()) {
      sq.where(TENANT, SqlOperator.IN, SqlListParameterValue.strings(filter.getTenants()));
    }
    filter.getTenantTenantAccesible().ifPresent(tenantTenantAccesible -> sq
        .where(LOGIN_PROVIDER_TENANT, SqlOperator.EQ, SqlParameterValue.of(tenantTenantAccesible)));
    return sq;
  }

  /**
   * sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   *
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @param forUpdate
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  private List<LoginProvider> list(final String sql, final Map<String, SqlParameterValue> params,
      final Integer limit, final boolean forUpdate) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<LoginProvider> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      if (forUpdate) {
        createSqlQuery = createSqlQuery.forUpdate();
      }
      SqlResult<LoginProvider> query = createSqlQuery.query(converter());
      return null == limit ? query.all() : query.limit(limit);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  private LoginProvider runCreate(LoginProvider entity, Predicate<LoginProvider> verifier) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "insert into \"login_provider\" ( \"uid\", \"tenant\", \"name\", \"source\", \"disabled\", \"direct_access\", \"public_key\", \"private_key\", \"certificate\", \"metadata\", \"users_enabled_by_default\", \"version\") values ( :uid, :tenant, :name, :source, :disabled, :directAccess, :publicKey, :privateKey, :certificate, :metadata, :usersEnabledByDefault, :version)");
      sq.with(UID, SqlParameterValue.of(entity.getUid().getValue()));
      sq.with(TENANT, SqlParameterValue.of(entity.getTenant().getReferenceValue()));
      sq.with(NAME, SqlParameterValue.of(entity.getName().getValue()));
      sq.with(SOURCE, SqlParameterValue.of(entity.getSource().getValue().toString()));
      sq.with(DISABLED, entity.getDisabled().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullBoolean));
      sq.with(DIRECT_ACCESS, entity.getDirectAccess().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullBoolean));
      sq.with(PUBLIC_KEY, entity.getPublicKey().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(PRIVATE_KEY, entity.getPrivateKey().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(CERTIFICATE, entity.getCertificate().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(METADATA, entity.getMetadata().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(USERS_ENABLED_BY_DEFAULT,
          SqlParameterValue.of(entity.getUsersEnabledByDefault().getValue()));
      sq.with(VERSION, entity.getVersion().getValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No insert into");
      }
      return verifier == null ? entity : verified(verifier.test(entity), entity, template);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<LoginProvider> runList(LoginProviderFilter filter, LoginProviderCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<LoginProvider> sq = filteredQuery(template, filter);
      if (null != cursor.getOrder()) {
        attachWithOrder(sq, cursor);
      } else {
        cursor.getSinceUid()
            .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      }
      sq.orderAsc("uid");
      return sq.query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<LoginProvider> runListForUpdate(LoginProviderFilter filter,
      LoginProviderCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<LoginProvider> sq = filteredQuery(template, filter);
      if (null != cursor.getOrder()) {
        attachWithOrder(sq, cursor);
      } else {
        cursor.getSinceUid()
            .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      }
      sq.orderAsc("uid");
      return sq.forUpdate().query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param offset
   * @param cursor
   * @param order
   * @return
   */
  private PartialWhere[] tryToOrderByNameAsc(SqlSchematicQuery<LoginProvider> sq,
      PartialWhere[] offset, LoginProviderCursor cursor, LoginProviderOrder order) {
    if (order == LoginProviderOrder.NAME_ASC) {
      sq.addOrderAsc("name");
      Optional<String> sinceName = cursor.getSinceName();
      if (sinceName.isPresent()) {
        String sinceNameValue = sinceName.get();
        offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
            PartialWhere.where("name", SqlOperator.GT, SqlParameterValue.of(sinceNameValue))));
        offset[1] = PartialWhere.and(offset[1],
            PartialWhere.where("name", SqlOperator.EQ, SqlParameterValue.of(sinceNameValue)));
      }
    }
    return offset;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param offset
   * @param cursor
   * @param order
   * @return
   */
  private PartialWhere[] tryToOrderByNameDesc(SqlSchematicQuery<LoginProvider> sq,
      PartialWhere[] offset, LoginProviderCursor cursor, LoginProviderOrder order) {
    if (order == LoginProviderOrder.NAME_DESC) {
      sq.addOrderDesc("name");
      Optional<String> sinceName = cursor.getSinceName();
      if (sinceName.isPresent()) {
        String sinceNameValue = sinceName.get();
        offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
            PartialWhere.where("name", SqlOperator.GT, SqlParameterValue.of(sinceNameValue))));
        offset[1] = PartialWhere.and(offset[1],
            PartialWhere.where("name", SqlOperator.EQ, SqlParameterValue.of(sinceNameValue)));
      }
    }
    return offset;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param exists
   * @param entity
   * @param template
   * @return
   */
  private LoginProvider verified(boolean exists, LoginProvider entity, SqlTemplate template) {
    if (exists) {
      return entity;
    } else {
      template.createSqlCommand("delete from \"login_provider\" where \"uid\" = :uid")
          .with("uid", SqlParameterValue.of(entity.getUidValue())).execute();
      throw new NotFoundException("");
    }
  }
}
