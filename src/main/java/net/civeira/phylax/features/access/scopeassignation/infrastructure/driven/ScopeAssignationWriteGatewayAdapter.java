package net.civeira.phylax.features.access.scopeassignation.infrastructure.driven;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignation;
import net.civeira.phylax.features.access.scopeassignation.ScopeAssignationRef;
import net.civeira.phylax.features.access.scopeassignation.gateway.ScopeAssignationWriteRepositoryGateway;
import net.civeira.phylax.features.access.scopeassignation.infrastructure.event.ScopeAssignationEventDispacher;
import net.civeira.phylax.features.access.scopeassignation.infrastructure.repository.ScopeAssignationRepository;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationCursor;
import net.civeira.phylax.features.access.scopeassignation.query.ScopeAssignationFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class ScopeAssignationWriteGatewayAdapter implements ScopeAssignationWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final ScopeAssignationEventDispacher eventDispacher;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final ScopeAssignationRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long countForUpdate(ScopeAssignationFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public ScopeAssignation create(ScopeAssignation entity) {
    ScopeAssignation result = repository.create(entity);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public ScopeAssignation create(ScopeAssignation entity, Predicate<ScopeAssignation> verifier) {
    ScopeAssignation result = repository.create(entity, verifier);
    eventDispacher.dispatch(entity);
    return result;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   */
  @Override
  public void delete(ScopeAssignation entity) {
    repository.delete(entity);
    eventDispacher.dispatch(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public ScopeAssignation enrichForUpdate(ScopeAssignationRef reference) {
    return repository.enrichForUpdate(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean existsForUpdate(String uid, Optional<ScopeAssignationFilter> filter) {
    return repository.existsForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<ScopeAssignation> findForUpdate(ScopeAssignationFilter filter) {
    return repository.findForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<ScopeAssignation> listForUpdate(ScopeAssignationFilter filter) {
    return repository.listForUpdate(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<ScopeAssignation> retrieveForUpdate(String uid,
      Optional<ScopeAssignationFilter> filter) {
    return repository.retrieveForUpdate(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<ScopeAssignation> slideForUpdate(ScopeAssignationFilter filter,
      ScopeAssignationCursor cursor) {
    return repository.slideForUpdate(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public ScopeAssignation update(ScopeAssignationRef reference, ScopeAssignation entity) {
    ScopeAssignation result = repository.update(entity);
    eventDispacher.dispatch(entity);
    return result;
  }
}
