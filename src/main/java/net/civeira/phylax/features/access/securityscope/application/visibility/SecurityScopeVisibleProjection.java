package net.civeira.phylax.features.access.securityscope.application.visibility;

import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyRef;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScope;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeKindOptions;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeReference;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeVisibilityOptions;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.KindVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.ResourceVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.ScopeVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.VisibilityVO;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientRef;

/**
 * A dto transfer to hold security scope attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class SecurityScopeVisibleProjection {

  /**
   * El enabled de security scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<EnabledVO> enabled = Optional.empty();

  /**
   * El kind de security scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<KindVO> kind = Optional.empty();

  /**
   * El relying party de security scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<RelyingPartyVO> relyingParty = Optional.empty();

  /**
   * A label group key to show the scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<ResourceVO> resource = Optional.empty();

  /**
   * A label to show the scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<ScopeVO> scope = Optional.empty();

  /**
   * El trusted client de security scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<TrustedClientVO> trustedClient = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de security scope para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * El visibility de security scope
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VisibilityVO> visibility = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public SecurityScopeVisibleProjection(final SecurityScope entity) {
    uid = Optional.of(entity.getUidValue());
    trustedClient = Optional.of(entity.getTrustedClientValue());
    relyingParty = Optional.of(entity.getRelyingPartyValue());
    resource = Optional.of(entity.getResourceValue());
    scope = Optional.of(entity.getScopeValue());
    enabled = Optional.of(entity.getEnabledValue());
    kind = Optional.of(entity.getKindValue());
    visibility = Optional.of(entity.getVisibilityValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for security scope with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public SecurityScopeReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(SecurityScopeReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Optional<EnabledVO> getEnabled() {
    return enabled;
  }

  /**
   * Inform for a possible change propolsal in Kind
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Kind, otherwise the value for Kind
   */
  public Optional<KindVO> getKind() {
    return kind;
  }

  /**
   * Inform for a possible change propolsal in RelyingParty
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for RelyingParty, otherwise the value for
   *         RelyingParty
   */
  public Optional<RelyingPartyVO> getRelyingParty() {
    return relyingParty;
  }

  /**
   * Inform for a possible change propolsal in Resource
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Resource, otherwise the value for Resource
   */
  public Optional<ResourceVO> getResource() {
    return resource;
  }

  /**
   * Inform for a possible change propolsal in Scope
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Scope, otherwise the value for Scope
   */
  public Optional<ScopeVO> getScope() {
    return scope;
  }

  /**
   * Inform for a possible change propolsal in TrustedClient
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for TrustedClient, otherwise the value for
   *         TrustedClient
   */
  public Optional<TrustedClientVO> getTrustedClient() {
    return trustedClient;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Inform for a possible change propolsal in Visibility
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Visibility, otherwise the value for Visibility
   */
  public Optional<VisibilityVO> getVisibility() {
    return visibility;
  }

  /**
   * Assigna change proposal for Enabled to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setEnabled(final Boolean value) {
    this.enabled = Optional.of(EnabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Kind to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setKind(final SecurityScopeKindOptions value) {
    this.kind = Optional.of(KindVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for RelyingParty to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setRelyingParty(final RelyingPartyRef value) {
    this.relyingParty = Optional.of(RelyingPartyVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Resource to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setResource(final String value) {
    this.resource = Optional.of(ResourceVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Scope to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setScope(final String value) {
    this.scope = Optional.of(ScopeVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for TrustedClient to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setTrustedClient(final TrustedClientRef value) {
    this.trustedClient = Optional.of(TrustedClientVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Visibility to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for SecurityScopeVisibleProjection
   * @return self instance to enable a flow code
   */
  public SecurityScopeVisibleProjection setVisibility(final SecurityScopeVisibilityOptions value) {
    this.visibility = Optional.of(VisibilityVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("trustedClient".equals(field)) {
      this.unsetTrustedClient();
    }
    if ("relyingParty".equals(field)) {
      this.unsetRelyingParty();
    }
    if ("resource".equals(field)) {
      this.unsetResource();
    }
    if ("scope".equals(field)) {
      this.unsetScope();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("kind".equals(field)) {
      this.unsetKind();
    }
    if ("visibility".equals(field)) {
      this.unsetVisibility();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Kind
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetKind() {
    this.kind = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for RelyingParty
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetRelyingParty() {
    this.relyingParty = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Resource
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetResource() {
    this.resource = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Scope
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetScope() {
    this.scope = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for TrustedClient
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetTrustedClient() {
    this.trustedClient = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Visibility
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public SecurityScopeVisibleProjection unsetVisibility() {
    this.visibility = Optional.empty();
    return this;
  }
}
