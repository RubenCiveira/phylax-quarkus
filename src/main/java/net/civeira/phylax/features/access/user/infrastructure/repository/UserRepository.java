package net.civeira.phylax.features.access.user.infrastructure.repository;

import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;

import javax.sql.DataSource;

import io.opentelemetry.api.trace.Tracer;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.exception.NotFoundException;
import net.civeira.phylax.common.infrastructure.sql.OptimistLockException;
import net.civeira.phylax.common.infrastructure.sql.PartialWhere;
import net.civeira.phylax.common.infrastructure.sql.SqlCommand;
import net.civeira.phylax.common.infrastructure.sql.SqlConverter;
import net.civeira.phylax.common.infrastructure.sql.SqlListParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlOperator;
import net.civeira.phylax.common.infrastructure.sql.SqlParameterValue;
import net.civeira.phylax.common.infrastructure.sql.SqlQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlResult;
import net.civeira.phylax.common.infrastructure.sql.SqlSchematicQuery;
import net.civeira.phylax.common.infrastructure.sql.SqlTemplate;
import net.civeira.phylax.features.access.user.domain.User;
import net.civeira.phylax.features.access.user.domain.UserRef;
import net.civeira.phylax.features.access.user.domain.gateway.UserCursor;
import net.civeira.phylax.features.access.user.domain.gateway.UserFilter;
import net.civeira.phylax.features.access.user.domain.gateway.UserOrder;
import net.civeira.phylax.features.access.user.domain.valueobject.BlockedUntilVO;
import net.civeira.phylax.features.access.user.domain.valueobject.EmailVO;
import net.civeira.phylax.features.access.user.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.user.domain.valueobject.LanguageVO;
import net.civeira.phylax.features.access.user.domain.valueobject.NameVO;
import net.civeira.phylax.features.access.user.domain.valueobject.PasswordVO;
import net.civeira.phylax.features.access.user.domain.valueobject.ProviderVO;
import net.civeira.phylax.features.access.user.domain.valueobject.SecondFactorSeedVO;
import net.civeira.phylax.features.access.user.domain.valueobject.TemporalPasswordVO;
import net.civeira.phylax.features.access.user.domain.valueobject.TenantVO;
import net.civeira.phylax.features.access.user.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.user.domain.valueobject.UseSecondFactorsVO;
import net.civeira.phylax.features.access.user.domain.valueobject.VersionVO;

@ApplicationScoped
@RequiredArgsConstructor
@Slf4j
public class UserRepository {

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_BLOCKED_UNTIL = "access_user.blocked_until";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_EMAIL = "access_user.email";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_ENABLED = "access_user.enabled";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_LANGUAGE = "access_user.language";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_NAME = "access_user.name";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_PASSWORD = "access_user.password";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_PROVIDER = "access_user.provider";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_SECOND_FACTOR_SEED = "access_user.second_factor_seed";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_SNAKE = "access_user";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_TEMPORAL_PASSWORD = "access_user.temporal_password";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_TENANT = "access_user.tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_UID = "access_user.uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_USE_SECOND_FACTORS = "access_user.use_second_factors";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ACCESS_USER_VERSION = "access_user.version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String BLOCKED_UNTIL = "blockedUntil";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String BLOCKED_UNTIL_SNAKE = "blocked_until";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String EMAIL = "email";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String ENABLED = "enabled";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String LANGUAGE = "language";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String NAME = "name";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String PASSWORD = "password";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String PROVIDER = "provider";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String SECOND_FACTOR_SEED = "secondFactorSeed";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String SECOND_FACTOR_SEED_SNAKE = "second_factor_seed";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TEMPORAL_PASSWORD = "temporalPassword";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TEMPORAL_PASSWORD_SNAKE = "temporal_password";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String TENANT = "tenant";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String UID = "uid";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String USE_SECOND_FACTORS = "useSecondFactors";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String USE_SECOND_FACTORS_SNAKE = "use_second_factors";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private static final String VERSION = "version";

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final AesCipherService cypher;

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final DataSource datasource;

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final Tracer tracer;

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public long count(UserFilter filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<Long> sq = filteredQuery(template, filter);
      sq.select("count(uid) as uid");
      return sq.query(row -> Optional.of(row.getLong(1))).one().orElse(0l);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public User create(User entity) {
    return runCreate(entity, null);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  public User create(User entity, Predicate<User> verifier) {
    return runCreate(entity, verifier);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   */
  public void delete(User entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand("delete from \"access_user\" where \"uid\" = :uid");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No delete from");
      }
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean exists(String uid, Optional<UserFilter> filter) {
    return retrieve(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public boolean existsForUpdate(String uid, Optional<UserFilter> filter) {
    return retrieveForUpdate(uid, filter).isPresent();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<User> find(UserFilter filter) {
    UserCursor cursor = UserCursor.builder().build();
    return new UserSlider(runList(filter, cursor), cursor.getLimit().orElse(0), this::runList,
        filter, cursor).one();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<User> find(final String sql, final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<User> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public Optional<User> findForUpdate(UserFilter filter) {
    UserCursor cursor = UserCursor.builder().build();
    return new UserSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).one();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public Optional<User> findForUpdate(final String sql,
      final Map<String, SqlParameterValue> params) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<User> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      return createSqlQuery.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<User> list(UserFilter filter) {
    UserCursor cursor = UserCursor.builder().build();
    return new UserSlider(runList(filter, cursor), cursor.getLimit().orElse(0), this::runList,
        filter, cursor).all();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<User> list(final String sql, final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<User> list(final String sql, final Map<String, SqlParameterValue> params,
      final int limit) {
    return list(sql, params, Integer.valueOf(limit), false);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @return
   */
  public List<User> listForUpdate(UserFilter filter) {
    UserCursor cursor = UserCursor.builder().build();
    return new UserSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor).all();
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<User> listForUpdate(final String sql, final Map<String, SqlParameterValue> params) {
    return list(sql, params, null, true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  public List<User> listForUpdate(final String sql, final Map<String, SqlParameterValue> params,
      final int limit) {
    return list(sql, params, Integer.valueOf(limit), true);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public User resolve(UserRef reference) {
    return reference instanceof User user ? user
        : retrieve(reference.getUid(), Optional.empty()).orElseThrow(() -> new NotFoundException(
            "Trying to resolve inexistent User: " + reference.getUid()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param reference
   * @return
   */
  public User resolveForUpdate(UserRef reference) {
    return reference instanceof User user ? user
        : retrieveForUpdate(reference.getUid(), Optional.empty())
            .orElseThrow(() -> new NotFoundException(
                "Trying to resolve inexistent User: " + reference.getUid()));
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<User> retrieve(String uid, Optional<UserFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      UserFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> UserFilter.builder().uid(uid).build());
      SqlSchematicQuery<User> sq = filteredQuery(template, readyFilter);
      return sq.query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public Optional<User> retrieveForUpdate(String uid, Optional<UserFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      UserFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> UserFilter.builder().uid(uid).build());
      SqlSchematicQuery<User> sq = filteredQuery(template, readyFilter);
      return sq.forUpdate().query(converter()).one();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<User> slide(UserFilter filter, UserCursor cursor) {
    return new UserSlider(runList(filter, cursor), cursor.getLimit().orElse(0), this::runList,
        filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slider<User> slideForUpdate(UserFilter filter, UserCursor cursor) {
    return new UserSlider(runListForUpdate(filter, cursor), cursor.getLimit().orElse(0),
        this::runList, filter, cursor);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public User update(User entity) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "update \"access_user\" set  \"tenant\" = :tenant, \"name\" = :name, \"password\" = :password, \"email\" = :email, \"enabled\" = :enabled, \"temporal_password\" = :temporalPassword, \"use_second_factors\" = :useSecondFactors, \"second_factor_seed\" = :secondFactorSeed, \"blocked_until\" = :blockedUntil, \"language\" = :language, \"provider\" = :provider, \"version\" = \"version\" + 1 where \"uid\" = :uid and \"version\" = :version");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      sq.with(TENANT, entity.getTenantUid().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(NAME, SqlParameterValue.of(entity.getName()));
      sq.with(PASSWORD, SqlParameterValue.of(entity.getCypheredPassword(cypher)));
      sq.with(EMAIL,
          entity.getEmail().map(SqlParameterValue::of).orElseGet(SqlParameterValue::ofNullString));
      sq.with(ENABLED, SqlParameterValue.of(entity.isEnabled()));
      sq.with(TEMPORAL_PASSWORD, SqlParameterValue.of(entity.isTemporalPassword()));
      sq.with(USE_SECOND_FACTORS, SqlParameterValue.of(entity.isUseSecondFactors()));
      sq.with(SECOND_FACTOR_SEED, entity.getCypheredSecondFactorSeed(cypher)
          .map(SqlParameterValue::of).orElseGet(SqlParameterValue::ofNullString));
      sq.with(BLOCKED_UNTIL, entity.getBlockedUntil().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullOffsetDateTime));
      sq.with(LANGUAGE, entity.getLanguage().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(PROVIDER, entity.getProvider().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(VERSION, entity.getVersion().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new OptimistLockException("No delete from");
      }
      return entity.withNextVersion();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param cursor
   */
  private void attachWithOrder(SqlSchematicQuery<User> sq, UserCursor cursor) {
    PartialWhere[] offset = new PartialWhere[] {PartialWhere.empty(), PartialWhere.empty()};
    for (UserOrder order : cursor.getOrder()) {
      tryToOrderByNameAsc(sq, offset, cursor, order);
      tryToOrderByNameDesc(sq, offset, cursor, order);
    }
    Optional<String> sinceUid = cursor.getSinceUid();
    if (sinceUid.isPresent()) {
      offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
          PartialWhere.where("uid", SqlOperator.GT, SqlParameterValue.of(sinceUid.get()))));
    }
    sq.where(offset[0]);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @return
   */
  private SqlConverter<User> converter() {
    return row -> {
      try {
        return Optional.of(User.builder().uidValue(UidVO.from(row.getString(UID)))
            .tenantValue(TenantVO.fromReference(row.getString(TENANT)))
            .nameValue(NameVO.from(row.getString(NAME)))
            .passwordValue(PasswordVO.fromCyphered(row.getString(PASSWORD)))
            .emailValue(EmailVO.from(row.getString(EMAIL)))
            .enabledValue(EnabledVO.from(row.getBoolean(ENABLED)))
            .temporalPasswordValue(TemporalPasswordVO.from(row.getBoolean(TEMPORAL_PASSWORD_SNAKE)))
            .useSecondFactorsValue(
                UseSecondFactorsVO.from(row.getBoolean(USE_SECOND_FACTORS_SNAKE)))
            .secondFactorSeedValue(
                SecondFactorSeedVO.fromCyphered(row.getString(SECOND_FACTOR_SEED_SNAKE)))
            .blockedUntilValue(
                BlockedUntilVO.from(null == row.getTimestamp(BLOCKED_UNTIL_SNAKE) ? null
                    : OffsetDateTime.ofInstant(
                        Instant.ofEpochMilli(row.getTimestamp(BLOCKED_UNTIL_SNAKE).getTime()),
                        ZoneId.systemDefault())))
            .languageValue(LanguageVO.from(row.getString(LANGUAGE)))
            .providerValue(ProviderVO.from(row.getString(PROVIDER)))
            .versionValue(VersionVO.from(row.getInt(VERSION))).build());
      } catch (ConstraintException ce) {
        log.error("Unable to map data for {}", row.getString(1), ce);
        return Optional.empty();
      }
    };
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param template
   * @param filter
   * @return
   */
  private <T> SqlSchematicQuery<T> filteredQuery(SqlTemplate template, UserFilter filter) {
    SqlSchematicQuery<T> sq = template.createSqlSchematicQuery(ACCESS_USER_SNAKE);
    sq.selectFields(ACCESS_USER_UID, ACCESS_USER_TENANT, ACCESS_USER_NAME, ACCESS_USER_PASSWORD,
        ACCESS_USER_EMAIL, ACCESS_USER_ENABLED, ACCESS_USER_TEMPORAL_PASSWORD,
        ACCESS_USER_USE_SECOND_FACTORS, ACCESS_USER_SECOND_FACTOR_SEED, ACCESS_USER_BLOCKED_UNTIL,
        ACCESS_USER_LANGUAGE, ACCESS_USER_PROVIDER, ACCESS_USER_VERSION);
    filter.getUid().ifPresent(uid -> sq.where(UID, SqlOperator.EQ, SqlParameterValue.of(uid)));
    if (!filter.getUids().isEmpty()) {
      sq.where(UID, SqlOperator.IN, SqlListParameterValue.strings(filter.getUids()));
    }
    filter.getSearch().ifPresent(
        search -> sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%")));
    filter.getRoot()
        .ifPresent(root -> sq.where(TENANT, SqlOperator.IS_NULL, SqlParameterValue.ofNullString()));
    sq.where(PartialWhere.or(
        filter.getNameOrEmail()
            .map(nameOrEmail -> PartialWhere.where("email", SqlOperator.EQ,
                SqlParameterValue.of(nameOrEmail))),
        filter.getNameOrEmail().map(nameOrEmail -> PartialWhere.where("name", SqlOperator.EQ,
            SqlParameterValue.of(nameOrEmail)))));
    filter.getName().ifPresent(name -> sq.where(NAME, SqlOperator.EQ, SqlParameterValue.of(name)));
    filter.getTenant().ifPresent(
        tenant -> sq.where(TENANT, SqlOperator.EQ, SqlParameterValue.of(tenant.getUid())));
    if (!filter.getTenants().isEmpty()) {
      sq.where(TENANT, SqlOperator.IN, SqlListParameterValue.strings(filter.getTenants()));
    }
    filter.getTenantTenantAccesible().ifPresent(tenantTenantAccesible -> sq
        .where(ACCESS_USER_TENANT, SqlOperator.EQ, SqlParameterValue.of(tenantTenantAccesible)));
    return sq;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sql
   * @param params
   * @param limit
   * @param forUpdate
   * @return sq.where("name", SqlOperator.LIKE, SqlParameterValue.of("%" + search + "%"))
   */
  private List<User> list(final String sql, final Map<String, SqlParameterValue> params,
      final Integer limit, final boolean forUpdate) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlQuery<User> createSqlQuery = template.createSqlQuery(sql);
      params.forEach(createSqlQuery::with);
      if (forUpdate) {
        createSqlQuery = createSqlQuery.forUpdate();
      }
      SqlResult<User> query = createSqlQuery.query(converter());
      return null == limit ? query.all() : query.limit(limit);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  private User runCreate(User entity, Predicate<User> verifier) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlCommand sq = template.createSqlCommand(
          "insert into \"access_user\" ( \"uid\", \"tenant\", \"name\", \"password\", \"email\", \"enabled\", \"temporal_password\", \"use_second_factors\", \"second_factor_seed\", \"blocked_until\", \"language\", \"provider\", \"version\") values ( :uid, :tenant, :name, :password, :email, :enabled, :temporalPassword, :useSecondFactors, :secondFactorSeed, :blockedUntil, :language, :provider, :version)");
      sq.with(UID, SqlParameterValue.of(entity.getUid()));
      sq.with(TENANT, entity.getTenantUid().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(NAME, SqlParameterValue.of(entity.getName()));
      sq.with(PASSWORD, SqlParameterValue.of(entity.getCypheredPassword(cypher)));
      sq.with(EMAIL,
          entity.getEmail().map(SqlParameterValue::of).orElseGet(SqlParameterValue::ofNullString));
      sq.with(ENABLED, SqlParameterValue.of(entity.isEnabled()));
      sq.with(TEMPORAL_PASSWORD, SqlParameterValue.of(entity.isTemporalPassword()));
      sq.with(USE_SECOND_FACTORS, SqlParameterValue.of(entity.isUseSecondFactors()));
      sq.with(SECOND_FACTOR_SEED, entity.getCypheredSecondFactorSeed(cypher)
          .map(SqlParameterValue::of).orElseGet(SqlParameterValue::ofNullString));
      sq.with(BLOCKED_UNTIL, entity.getBlockedUntil().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullOffsetDateTime));
      sq.with(LANGUAGE, entity.getLanguage().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(PROVIDER, entity.getProvider().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullString));
      sq.with(VERSION, entity.getVersion().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      int num = sq.execute();
      if (0 == num) {
        throw new IllegalArgumentException("No insert into");
      }
      return verifier == null ? entity : verified(verifier.test(entity), entity, template);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<User> runList(UserFilter filter, UserCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<User> sq = filteredQuery(template, filter);
      if (null != cursor.getOrder()) {
        attachWithOrder(sq, cursor);
      } else {
        cursor.getSinceUid()
            .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      }
      sq.orderAsc("uid");
      return sq.query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private Iterator<User> runListForUpdate(UserFilter filter, UserCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource, tracer)) {
      SqlSchematicQuery<User> sq = filteredQuery(template, filter);
      if (null != cursor.getOrder()) {
        attachWithOrder(sq, cursor);
      } else {
        cursor.getSinceUid()
            .ifPresent(since -> sq.where(UID, SqlOperator.GT, SqlParameterValue.of(since)));
      }
      sq.orderAsc("uid");
      return sq.forUpdate().query(converter()).limit(cursor.getLimit()).iterator();
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param offset
   * @param cursor
   * @param order
   * @return
   */
  private PartialWhere[] tryToOrderByNameAsc(SqlSchematicQuery<User> sq, PartialWhere[] offset,
      UserCursor cursor, UserOrder order) {
    if (order == UserOrder.NAME_ASC) {
      sq.addOrderAsc("name");
      Optional<String> sinceName = cursor.getSinceName();
      if (sinceName.isPresent()) {
        String sinceNameValue = sinceName.get();
        offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
            PartialWhere.where("name", SqlOperator.GT, SqlParameterValue.of(sinceNameValue))));
        offset[1] = PartialWhere.and(offset[1],
            PartialWhere.where("name", SqlOperator.EQ, SqlParameterValue.of(sinceNameValue)));
      }
    }
    return offset;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param sq
   * @param offset
   * @param cursor
   * @param order
   * @return
   */
  private PartialWhere[] tryToOrderByNameDesc(SqlSchematicQuery<User> sq, PartialWhere[] offset,
      UserCursor cursor, UserOrder order) {
    if (order == UserOrder.NAME_DESC) {
      sq.addOrderDesc("name");
      Optional<String> sinceName = cursor.getSinceName();
      if (sinceName.isPresent()) {
        String sinceNameValue = sinceName.get();
        offset[0] = PartialWhere.or(offset[0], PartialWhere.and(offset[1],
            PartialWhere.where("name", SqlOperator.GT, SqlParameterValue.of(sinceNameValue))));
        offset[1] = PartialWhere.and(offset[1],
            PartialWhere.where("name", SqlOperator.EQ, SqlParameterValue.of(sinceNameValue)));
      }
    }
    return offset;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param exists
   * @param entity
   * @param template
   * @return
   */
  private User verified(boolean exists, User entity, SqlTemplate template) {
    if (exists) {
      return entity;
    } else {
      template.createSqlCommand("delete from \"access_user\" where \"uid\" = :uid")
          .with("uid", SqlParameterValue.of(entity.getUid())).execute();
      throw new NotFoundException("");
    }
  }
}
