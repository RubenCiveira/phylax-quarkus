package net.civeira.phylax.features.access.useraccesstemporalcode.valueobject;

import java.util.Optional;

import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.With;
import net.civeira.phylax.common.crypto.AesCipherService;
import net.civeira.phylax.common.exception.ConstraintException;
import net.civeira.phylax.common.value.validation.AbstractFailList;
import net.civeira.phylax.common.value.validation.ConstraintFail;
import net.civeira.phylax.common.value.validation.ConstraintFailList;

/**
 * Value Object representing the seed used to the otp login of userAccessTemporalCode.
 */
@Getter
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class TempSecondFactorSeedVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param tempSecondFactorSeed
   * @return An empty instance
   */
  public static TempSecondFactorSeedVO fromCyphered(final String tempSecondFactorSeed) {
    return new TempSecondFactorSeedVO(true, tempSecondFactorSeed, null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param tempSecondFactorSeed
   * @return An empty instance
   */
  public static TempSecondFactorSeedVO fromPlain(final String tempSecondFactorSeed) {
    return tryFrom(tempSecondFactorSeed);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static TempSecondFactorSeedVO nullValue() {
    return new TempSecondFactorSeedVO(false, null, null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param tempSecondFactorSeed
   * @return An empty instance
   */
  public static TempSecondFactorSeedVO tryFrom(final Object tempSecondFactorSeed) {
    ConstraintFailList list = new ConstraintFailList();
    TempSecondFactorSeedVO result = tryFrom(tempSecondFactorSeed, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param tempSecondFactorSeed temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> TempSecondFactorSeedVO tryFrom(
      final Object tempSecondFactorSeed, final T fails) {
    if (null == tempSecondFactorSeed) {
      return new TempSecondFactorSeedVO(false, null, null);
    } else if (tempSecondFactorSeed instanceof String castedTempSecondFactorSeed) {
      return new TempSecondFactorSeedVO(false, null, castedTempSecondFactorSeed);
    } else {
      fails.add(new ConstraintFail("wrong-type", "tempSecondFactorSeed",
          tempSecondFactorSeed.getClass(), "A String type is expected for tempSecondFactorSeed"));
      return null;
    }
  }

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Getter(AccessLevel.PRIVATE)
  private final boolean cyphered;

  /**
   * the seed used to the otp login
   *
   * @autogenerated ValueObjectGenerator
   */
  @Getter(AccessLevel.PRIVATE)
  private final String cypheredValue;

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Getter(AccessLevel.PRIVATE)
  private final String plainValue;

  /**
   * @autogenerated ValueObjectGenerator
   * @param cypher
   * @return
   */
  public Optional<String> getCypheredValue(final AesCipherService cypher) {
    return cyphered ? Optional.ofNullable(cypheredValue)
        : Optional.ofNullable(plainValue).map(text -> cypher.encryptForAll(text));
  }

  /**
   * @autogenerated ValueObjectGenerator
   * @param cypher
   * @return
   */
  public Optional<String> getPlainValue(final AesCipherService cypher) {
    return cyphered
        ? Optional.ofNullable(cypheredValue)
            .map(text -> cypher.decryptForAll(text)
                .orElseThrow(() -> new IllegalStateException("Unable to decrypt")))
        : Optional.ofNullable(plainValue);
  }

  /**
   * the string value wrapped in square brackets.
   *
   * @autogenerated ValueObjectGenerator
   * @return the string value wrapped in square brackets.
   */
  public String toString() {
    return cyphered ? "[cyphered:" + cypheredValue + "]" : ofuscatePlain();
  }

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  private String ofuscatePlain() {
    return null == plainValue ? "null"
        : "[plain:" + (plainValue.length() > 10 ? plainValue.substring(0, 5) + "*****" : "*****")
            + "]";
  }
}
