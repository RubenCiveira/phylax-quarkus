package net.civeira.phylax.features.access.securityscope.application.usecase.list;

import java.util.Optional;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyRef;
import net.civeira.phylax.features.access.securityscope.application.visibility.SecurityScopeVisibleProjection;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScope;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeKindOptions;
import net.civeira.phylax.features.access.securityscope.domain.SecurityScopeVisibilityOptions;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.KindVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.ResourceVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.ScopeVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.VersionVO;
import net.civeira.phylax.features.access.securityscope.domain.valueobject.VisibilityVO;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientRef;

/**
 * A dto transfer to hold security scope attribute values
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class SecurityScopeListProjection {

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated ListProjectionGenerator
   * @param visible The entity who provide values.
   * @return
   */
  public static SecurityScopeListProjection from(final SecurityScopeVisibleProjection visible) {
    SecurityScopeListProjection instance = new SecurityScopeListProjection();
    instance.uidValue = visible.getUid();
    instance.trustedClientValue = visible.getTrustedClient();
    instance.relyingPartyValue = visible.getRelyingParty();
    instance.resourceValue = visible.getResource();
    instance.scopeValue = visible.getScope();
    instance.enabledValue = visible.getEnabled();
    instance.kindValue = visible.getKind();
    instance.visibilityValue = visible.getVisibility();
    instance.versionValue = visible.getVersion();
    return instance;
  }

  /**
   * El enabled de security scope
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<EnabledVO> enabledValue;

  /**
   * El kind de security scope
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<KindVO> kindValue;

  /**
   * El relying party de security scope
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<RelyingPartyVO> relyingPartyValue;

  /**
   * A label group key to show the scope
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<ResourceVO> resourceValue;

  /**
   * A label to show the scope
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<ScopeVO> scopeValue;

  /**
   * El trusted client de security scope
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<TrustedClientVO> trustedClientValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<UidVO> uidValue;

  /**
   * Campo con el n√∫mero de version de security scope para controlar bloqueos optimistas
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<VersionVO> versionValue;

  /**
   * El visibility de security scope
   *
   * @autogenerated ListProjectionGenerator
   */
  private Optional<VisibilityVO> visibilityValue;

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated ListProjectionGenerator
   * @param entity The entity who provide values.
   */
  public SecurityScopeListProjection(final SecurityScope entity) {
    uidValue = Optional.of(entity.getUidValue());
    trustedClientValue = Optional.of(entity.getTrustedClientValue());
    relyingPartyValue = Optional.of(entity.getRelyingPartyValue());
    resourceValue = Optional.of(entity.getResourceValue());
    scopeValue = Optional.of(entity.getScopeValue());
    enabledValue = Optional.of(entity.getEnabledValue());
    kindValue = Optional.of(entity.getKindValue());
    visibilityValue = Optional.of(entity.getVisibilityValue());
    versionValue = Optional.of(entity.getVersionValue());
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Boolean getEnabled() {
    return getEnabledOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Boolean getEnabledOrDefault(final Boolean orDefault) {
    return enabledValue.map(EnabledVO::isEnabled).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Kind
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Kind, otherwise the value for Kind
   */
  public SecurityScopeKindOptions getKind() {
    return getKindOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Kind
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Kind, otherwise the value for Kind
   */
  public SecurityScopeKindOptions getKindOrDefault(final SecurityScopeKindOptions orDefault) {
    return kindValue.flatMap(KindVO::getKind).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in RelyingParty
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for RelyingParty, otherwise the value for
   *         RelyingParty
   */
  public RelyingPartyRef getRelyingParty() {
    return relyingPartyValue.flatMap(RelyingPartyVO::getRelyingParty).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in RelyingParty
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for RelyingParty, otherwise the value for
   *         RelyingParty
   */
  public String getRelyingPartyReference() {
    return getRelyingPartyReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in RelyingParty
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for RelyingParty, otherwise the value for
   *         RelyingParty
   */
  public String getRelyingPartyReferenceOrDefault(final String orDefault) {
    return relyingPartyValue.flatMap(RelyingPartyVO::getRelyingParty).map(RelyingPartyRef::getUid)
        .orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Resource
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Resource, otherwise the value for Resource
   */
  public String getResource() {
    return getResourceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Resource
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Resource, otherwise the value for Resource
   */
  public String getResourceOrDefault(final String orDefault) {
    return resourceValue.map(ResourceVO::getResource).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Scope
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Scope, otherwise the value for Scope
   */
  public String getScope() {
    return getScopeOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Scope
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Scope, otherwise the value for Scope
   */
  public String getScopeOrDefault(final String orDefault) {
    return scopeValue.map(ScopeVO::getScope).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in TrustedClient
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for TrustedClient, otherwise the value for
   *         TrustedClient
   */
  public TrustedClientRef getTrustedClient() {
    return trustedClientValue.flatMap(TrustedClientVO::getTrustedClient).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in TrustedClient
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for TrustedClient, otherwise the value for
   *         TrustedClient
   */
  public String getTrustedClientReference() {
    return getTrustedClientReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in TrustedClient
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for TrustedClient, otherwise the value for
   *         TrustedClient
   */
  public String getTrustedClientReferenceOrDefault(final String orDefault) {
    return trustedClientValue.flatMap(TrustedClientVO::getTrustedClient)
        .map(TrustedClientRef::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUid() {
    return getUidOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUidOrDefault(final String orDefault) {
    return uidValue.map(UidVO::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersion() {
    return getVersionOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersionOrDefault(final Integer orDefault) {
    return versionValue.flatMap(VersionVO::getVersion).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Visibility
   *
   * @autogenerated ListProjectionGenerator
   * @return empty if there is no change proposal for Visibility, otherwise the value for Visibility
   */
  public SecurityScopeVisibilityOptions getVisibility() {
    return getVisibilityOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Visibility
   *
   * @autogenerated ListProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Visibility, otherwise the value for Visibility
   */
  public SecurityScopeVisibilityOptions getVisibilityOrDefault(
      final SecurityScopeVisibilityOptions orDefault) {
    return visibilityValue.flatMap(VisibilityVO::getVisibility).orElse(orDefault);
  }
}
