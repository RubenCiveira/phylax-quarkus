package net.civeira.phylax.features.access.useracceptedtermnsofuse.infrastructure.driven;

import java.util.List;
import java.util.Optional;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.algorithms.Slider;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.UserAcceptedTermnsOfUse;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.UserAcceptedTermnsOfUseRef;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.gateway.UserAcceptedTermnsOfUseReadRepositoryGateway;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.infrastructure.repository.UserAcceptedTermnsOfUseRepository;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.query.UserAcceptedTermnsOfUseCursor;
import net.civeira.phylax.features.access.useracceptedtermnsofuse.query.UserAcceptedTermnsOfUseFilter;

@ApplicationScoped
@RequiredArgsConstructor
public class UserAcceptedTermnsOfUseReadGatewayAdapter
    implements UserAcceptedTermnsOfUseReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final UserAcceptedTermnsOfUseRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(UserAcceptedTermnsOfUseFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public UserAcceptedTermnsOfUse enrich(UserAcceptedTermnsOfUseRef reference) {
    return repository.enrich(reference);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<UserAcceptedTermnsOfUseFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public Optional<UserAcceptedTermnsOfUse> find(UserAcceptedTermnsOfUseFilter filter) {
    return repository.find(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public List<UserAcceptedTermnsOfUse> list(UserAcceptedTermnsOfUseFilter filter) {
    return repository.list(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<UserAcceptedTermnsOfUse> retrieve(String uid,
      Optional<UserAcceptedTermnsOfUseFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<UserAcceptedTermnsOfUse> slide(UserAcceptedTermnsOfUseFilter filter,
      UserAcceptedTermnsOfUseCursor cursor) {
    return repository.slide(filter, cursor);
  }
}
