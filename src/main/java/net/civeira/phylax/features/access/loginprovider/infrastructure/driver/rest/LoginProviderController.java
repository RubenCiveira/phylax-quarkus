package net.civeira.phylax.features.access.loginprovider.infrastructure.driver.rest;

import java.io.InputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.common.infrastructure.store.BinaryContent;
import net.civeira.phylax.features.access.loginprovider.LoginProviderReference;
import net.civeira.phylax.features.access.loginprovider.LoginProviderSourceOptions;
import net.civeira.phylax.features.access.loginprovider.application.projection.LoginProviderStateProyection;
import net.civeira.phylax.features.access.loginprovider.application.request.LoginProviderStateChange;
import net.civeira.phylax.features.access.loginprovider.application.usecase.create.LoginProviderCreateUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.delete.LoginProviderCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.loginprovider.application.usecase.delete.LoginProviderDeleteUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.disable.LoginProviderDisableStatus;
import net.civeira.phylax.features.access.loginprovider.application.usecase.disable.LoginProviderDisableUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.enable.LoginProviderEnableStatus;
import net.civeira.phylax.features.access.loginprovider.application.usecase.enable.LoginProviderEnableUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.list.LoginProviderListUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.metadataretrieve.LoginProviderMetadataRetrieveUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.metadataupload.LoginProviderMetadataTemporalUploadUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.retrieve.LoginProviderRetrieveUsecase;
import net.civeira.phylax.features.access.loginprovider.application.usecase.update.LoginProviderUpdateUsecase;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderCursor;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderFilter;
import net.civeira.phylax.features.access.loginprovider.query.LoginProviderOrder;
import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenant.TenantReference;
import net.civeira.phylax.generated.openapi.api.LoginProviderApi;
import net.civeira.phylax.generated.openapi.model.LoginProviderApiDto;
import net.civeira.phylax.generated.openapi.model.LoginProviderApiDto.SourceEnum;
import net.civeira.phylax.generated.openapi.model.LoginProviderApiDtoList;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;

@RequiredArgsConstructor
public class LoginProviderController implements LoginProviderApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String NAME_A_P_P_E_N_D = "&name=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String TENANTS_A_P_P_E_N_D = "&tenants=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderCreateUsecase create;

  /**
   * LoginProvider
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderDisableUsecase disable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderEnableUsecase enable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderMetadataRetrieveUsecase retrieveMetadataUploadUsecase;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderMetadataTemporalUploadUsecase tempMetadataUploadUsecase;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenants
   * @return
   */
  @Override
  public Response loginProviderApiBatchDelete(final List<String> uids, final String search,
      final String name, final List<String> tenants) {
    LoginProviderFilter.LoginProviderFilterBuilder filterBuilder = LoginProviderFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    LoginProviderFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response loginProviderApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(LoginProviderCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenants
   * @return
   */
  @Override
  public Response loginProviderApiBatchDisable(final List<String> uids, final String search,
      final String name, final List<String> tenants) {
    LoginProviderFilter.LoginProviderFilterBuilder filterBuilder = LoginProviderFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    LoginProviderFilter filter = filterBuilder.build();
    BatchIdentificator task = disable.disable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response loginProviderApiBatchDisableQuery(final String batchId) {
    BatchProgress task = disable.checkProgress(
        LoginProviderDisableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenants
   * @return
   */
  @Override
  public Response loginProviderApiBatchEnable(final List<String> uids, final String search,
      final String name, final List<String> tenants) {
    LoginProviderFilter.LoginProviderFilterBuilder filterBuilder = LoginProviderFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    LoginProviderFilter filter = filterBuilder.build();
    BatchIdentificator task = enable.enable(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response loginProviderApiBatchEnableQuery(final String batchId) {
    BatchProgress task = enable.checkProgress(
        LoginProviderEnableStatus.builder().taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param loginProvider
   * @return
   */
  @Override
  @Transactional
  public Response loginProviderApiCreate(LoginProviderApiDto loginProvider) {
    LoginProviderStateProyection created =
        create.create(currentRequest.interaction(), toDomainModel(loginProvider));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response loginProviderApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), LoginProviderReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response loginProviderApiDisable(final String uid) {
    LoginProviderStateProyection updated =
        disable.disable(currentRequest.interaction(), LoginProviderReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response loginProviderApiEnable(final String uid) {
    LoginProviderStateProyection updated =
        enable.enable(currentRequest.interaction(), LoginProviderReference.of(uid));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenants
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  @Override
  public Response loginProviderApiList(final List<String> uids, final String search,
      final String name, final List<String> tenants, final Integer limit, final String sinceUid,
      final String sinceName, final String order) {
    List<LoginProviderOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    LoginProviderFilter.LoginProviderFilterBuilder filterBuilder = LoginProviderFilter.builder();
    LoginProviderCursor.LoginProviderCursorBuilder cursorBuilder = LoginProviderCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    cursorBuilder = cursorBuilder.sinceName(sinceName);
    cursorBuilder = cursorBuilder.order(orderSteps);
    LoginProviderFilter filter = filterBuilder.build();
    LoginProviderCursor cursor = cursorBuilder.build();
    List<LoginProviderStateProyection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "login-provider-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response loginProviderApiRetrieve(final String uid) {
    LoginProviderStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), LoginProviderReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response loginProviderApiRetrieveMetadata(final String uid) {
    BinaryContent stream = retrieveMetadataUploadUsecase.read(currentRequest.interaction(),
        LoginProviderReference.of(uid));
    String encodedFilename = URLEncoder.encode(stream.getName(), StandardCharsets.UTF_8);
    return Response.ok(stream.getInputStream()).header("Content-type", stream.getContentType())
        .header("Content-Disposition", "attachment; filename*=UTF-8''" + encodedFilename).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param temp
   * @return
   */
  @Override
  public Response loginProviderApiRetrieveTempUploadMetadata(final String temp) {
    BinaryContent stream = tempMetadataUploadUsecase.read(currentRequest.interaction(), temp);
    return Response.ok(stream.getInputStream()).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param loginProvider
   * @return
   */
  @Override
  @Transactional
  public Response loginProviderApiUpdate(final String uid,
      final LoginProviderApiDto loginProvider) {
    LoginProviderStateProyection updated = update.update(currentRequest.interaction(),
        LoginProviderReference.of(uid), toDomainModel(loginProvider));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param file
   * @param fileName
   * @param fileType
   * @return
   */
  @Override
  public Response loginProviderApiUploadTempUploadMetadata(final InputStream file,
      final String fileName, final String fileType) {
    String key = tempMetadataUploadUsecase.upload(currentRequest.interaction(),
        BinaryContent.builder().name(fileName).contentType(fileType)
            .lastModification(System.currentTimeMillis()).inputStream(file).build());
    return Response.ok(
        currentRequest.getPublicHost() + "/api/access/login-providers/-/temp-metadata?temp=" + key)
        .build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param label
   * @return
   */
  private LoginProviderOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("name-asc")) {
      return LoginProviderOrder.NAME_ASC;
    } else if (label.trim().equals("name-desc")) {
      return LoginProviderOrder.NAME_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param domainEnum
   * @return
   */
  private SourceEnum sourceEnumToApi(LoginProviderSourceOptions domainEnum) {
    SourceEnum result;
    if (domainEnum == LoginProviderSourceOptions.GOOGLE) {
      result = SourceEnum.GOOGLE;
    } else if (domainEnum == LoginProviderSourceOptions.GITHUB) {
      result = SourceEnum.GITHUB;
    } else if (domainEnum == LoginProviderSourceOptions.SAML) {
      result = SourceEnum.SAML;
    } else {
      result = null;
    }
    return result;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param apiEnum
   * @return
   */
  private LoginProviderSourceOptions sourceEnumToDomain(SourceEnum apiEnum) {
    LoginProviderSourceOptions result;
    if (apiEnum == SourceEnum.GOOGLE) {
      result = LoginProviderSourceOptions.GOOGLE;
    } else if (apiEnum == SourceEnum.GITHUB) {
      result = LoginProviderSourceOptions.GITHUB;
    } else if (apiEnum == SourceEnum.SAML) {
      result = LoginProviderSourceOptions.SAML;
    } else if (null == apiEnum) {
      result = null;
    } else {
      throw new IllegalArgumentException();
    }
    return result;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private LoginProviderApiDto toApiModel(LoginProviderStateProyection dto) {
    LoginProviderApiDto loginProviderApiDto = new LoginProviderApiDto();
    loginProviderApiDto.setUid(dto.getUid().orElse(null));
    loginProviderApiDto.setTenant(
        new TenantApiRef().$ref(dto.getTenant().map(TenantRef::getUidValue).orElse(null)));
    loginProviderApiDto.setName(dto.getName().orElse(null));
    loginProviderApiDto.setSource(sourceEnumToApi(dto.getSource().orElse(null)));
    loginProviderApiDto.setDisabled(dto.getDisabled().orElse(null));
    loginProviderApiDto.setDirectAccess(dto.getDirectAccess().orElse(null));
    loginProviderApiDto.setPublicKey(dto.getPublicKey().orElse(null));
    loginProviderApiDto.setPrivateKey(dto.getPrivateKey().orElse(null));
    loginProviderApiDto.setCertificate(dto.getCertificate().orElse(null));
    String metadata = dto.getMetadata().orElse(null);
    if (null != metadata) {
      loginProviderApiDto.setMetadata(currentRequest.getPublicHost()
          + "/api/access/login-providers/" + dto.getUid().orElse("-") + "/metadata");
    }
    loginProviderApiDto.setUsersEnabledByDefault(dto.getUsersEnabledByDefault().orElse(null));
    loginProviderApiDto.setVersion(dto.getVersion().orElse(null));
    return loginProviderApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param loginProviderApiDto
   * @return
   */
  private LoginProviderStateChange toDomainModel(LoginProviderApiDto loginProviderApiDto) {
    LoginProviderStateChange dto = new LoginProviderStateChange();
    if (null != loginProviderApiDto.getUid()) {
      dto.setUid(loginProviderApiDto.getUid());
    }
    if (null != loginProviderApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(loginProviderApiDto.getTenant().get$Ref()));
    }
    if (null != loginProviderApiDto.getName()) {
      dto.setName(loginProviderApiDto.getName());
    }
    if (null != loginProviderApiDto.getSource()) {
      dto.setSource(sourceEnumToDomain(loginProviderApiDto.getSource()));
    }
    if (null != loginProviderApiDto.getDisabled()) {
      dto.setDisabled(loginProviderApiDto.getDisabled());
    }
    if (null != loginProviderApiDto.getDirectAccess()) {
      dto.setDirectAccess(loginProviderApiDto.getDirectAccess());
    }
    if (null != loginProviderApiDto.getPublicKey()) {
      dto.setPublicKey(loginProviderApiDto.getPublicKey());
    }
    if (null != loginProviderApiDto.getPrivateKey()) {
      dto.setPrivateKey(loginProviderApiDto.getPrivateKey());
    }
    if (null != loginProviderApiDto.getCertificate()) {
      dto.setCertificate(loginProviderApiDto.getCertificate());
    }
    if (!StringUtils.isBlank(loginProviderApiDto.getMetadata())) {
      String url = loginProviderApiDto.getMetadata();
      if (loginProviderApiDto.getMetadata().startsWith(
          currentRequest.getPublicHost() + "/api/access/login-providers/-/temp-metadata?temp=")) {
        dto.setMetadata("temp://" + (url.substring(
            (currentRequest.getPublicHost() + "/api/access/login-providers/-/temp-metadata?temp=")
                .length())));
      } else if (!(url.equals(currentRequest.getPublicHost() + "/api/access/login-providers/"
          + loginProviderApiDto.getUid() + "/metadata"))) {
        dto.setMetadata(loginProviderApiDto.getMetadata());
      }
    }
    if (null != loginProviderApiDto.getUsersEnabledByDefault()) {
      dto.setUsersEnabledByDefault(loginProviderApiDto.getUsersEnabledByDefault());
    }
    if (null != loginProviderApiDto.getVersion()) {
      dto.setVersion(loginProviderApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param loginProviders
   * @param filter
   * @param cursor
   * @return
   */
  private LoginProviderApiDtoList toListApiModel(List<LoginProviderStateProyection> loginProviders,
      LoginProviderFilter filter, LoginProviderCursor cursor) {
    Optional<LoginProviderStateProyection> last = loginProviders.isEmpty() ? Optional.empty()
        : Optional.of(loginProviders.get(loginProviders.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    filter.getName().ifPresent(filterName -> {
      String nameValue = URLEncoder.encode(String.valueOf(filterName), StandardCharsets.UTF_8);
      self.append(NAME_A_P_P_E_N_D + nameValue);
      next.append(NAME_A_P_P_E_N_D + nameValue);
      first.append(NAME_A_P_P_E_N_D + nameValue);
    });
    if (!filter.getTenants().isEmpty()) {
      String tenantsValue =
          URLEncoder.encode(String.join(",", filter.getTenants()), StandardCharsets.UTF_8);
      self.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      next.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      first.append(TENANTS_A_P_P_E_N_D + tenantsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceName().ifPresent(sinceName -> self
        .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      lastDto.getUid().ifPresent(
          uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8)));
      cursor.getSinceName().ifPresent(sinceName -> next
          .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    });
    return new LoginProviderApiDtoList()
        .items(loginProviders.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final LoginProviderOrder order) {
    if (null == order) {
      return null;
    } else if (order == LoginProviderOrder.NAME_ASC) {
      return "name-asc";
    } else if (order == LoginProviderOrder.NAME_DESC) {
      return "name-desc";
    } else {
      return null;
    }
  }
}
