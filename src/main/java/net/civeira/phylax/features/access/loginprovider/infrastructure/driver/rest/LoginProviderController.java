package net.civeira.phylax.features.access.loginprovider.infrastructure.driver.rest;

import java.io.InputStream;
import java.util.List;

import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.generated.openapi.api.LoginProviderApi;
import net.civeira.phylax.generated.openapi.model.LoginProviderApiDto;

@RequiredArgsConstructor
public class LoginProviderController implements LoginProviderApi {

  /**
   * LoginProviderApiDto
   *
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderCreateController createController;

  /**
   * LoginProvider
   *
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderDeleteController deleteController;

  /**
   * Disable
   *
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderDisableController disableController;

  /**
   * Enable
   *
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderEnableController enableController;

  /**
   * LoginProvider
   *
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderListController listController;

  /**
   * LoginProvider
   *
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderMetadataUploadController metadataUploadController;

  /**
   * LoginProvider
   *
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderRetrieveController retrieveController;

  /**
   * LoginProviderApiDto
   *
   * @autogenerated ApiControllerGenerator
   */
  private final LoginProviderUpdateController updateController;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenant
   * @param tenants
   * @return
   */
  @Override
  public Response loginProviderApiBatchDelete(final List<String> uids, final String search,
      final String name, final String tenant, final List<String> tenants) {
    return deleteController.loginProviderApiBatchDelete(uids, search, name, tenant, tenants);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response loginProviderApiBatchDeleteQuery(final String batchId) {
    return deleteController.loginProviderApiBatchDeleteQuery(batchId);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenant
   * @param tenants
   * @return
   */
  @Override
  public Response loginProviderApiBatchDisable(final List<String> uids, final String search,
      final String name, final String tenant, final List<String> tenants) {
    return disableController.loginProviderApiBatchDisable(uids, search, name, tenant, tenants);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response loginProviderApiBatchDisableQuery(final String batchId) {
    return disableController.loginProviderApiBatchDisableQuery(batchId);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenant
   * @param tenants
   * @return
   */
  @Override
  public Response loginProviderApiBatchEnable(final List<String> uids, final String search,
      final String name, final String tenant, final List<String> tenants) {
    return enableController.loginProviderApiBatchEnable(uids, search, name, tenant, tenants);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response loginProviderApiBatchEnableQuery(final String batchId) {
    return enableController.loginProviderApiBatchEnableQuery(batchId);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param loginProvider
   * @return
   */
  @Override
  public Response loginProviderApiCreate(LoginProviderApiDto loginProvider) {
    return createController.loginProviderApiCreate(loginProvider);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response loginProviderApiDelete(final String uid) {
    return deleteController.loginProviderApiDelete(uid);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response loginProviderApiDisable(final String uid) {
    return disableController.loginProviderApiDisable(uid);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response loginProviderApiEnable(final String uid) {
    return enableController.loginProviderApiEnable(uid);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param tenant
   * @param tenants
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  @Override
  public Response loginProviderApiList(final List<String> uids, final String search,
      final String name, final String tenant, final List<String> tenants, final Integer limit,
      final String sinceUid, final String sinceName, final String order) {
    return listController.loginProviderApiList(uids, search, name, tenant, tenants, limit, sinceUid,
        sinceName, order);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response loginProviderApiRetrieve(final String uid) {
    return retrieveController.loginProviderApiRetrieve(uid);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response loginProviderApiRetrieveMetadata(final String uid) {
    return metadataUploadController.loginProviderApiRetrieveMetadata(uid);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param temp
   * @return
   */
  @Override
  public Response loginProviderApiRetrieveTempUploadMetadata(final String temp) {
    return metadataUploadController.loginProviderApiRetrieveTempUploadMetadata(temp);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param loginProvider
   * @return
   */
  @Override
  public Response loginProviderApiUpdate(final String uid, LoginProviderApiDto loginProvider) {
    return updateController.loginProviderApiUpdate(uid, loginProvider);
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param file
   * @param fileName
   * @param fileType
   * @return
   */
  @Override
  public Response loginProviderApiUploadTempUploadMetadata(final InputStream file,
      final String fileName, final String fileType) {
    return metadataUploadController.loginProviderApiUploadTempUploadMetadata(file, fileName,
        fileType);
  }
}
