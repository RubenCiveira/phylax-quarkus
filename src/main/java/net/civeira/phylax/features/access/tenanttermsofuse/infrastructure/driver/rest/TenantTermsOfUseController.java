package net.civeira.phylax.features.access.tenanttermsofuse.infrastructure.driver.rest;

import java.io.InputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.common.batch.BatchIdentificator;
import net.civeira.phylax.common.batch.BatchProgress;
import net.civeira.phylax.common.infrastructure.CurrentRequest;
import net.civeira.phylax.common.infrastructure.store.BinaryContent;
import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenant.TenantReference;
import net.civeira.phylax.features.access.tenanttermsofuse.TenantTermsOfUseReference;
import net.civeira.phylax.features.access.tenanttermsofuse.application.projection.TenantTermsOfUseStateProyection;
import net.civeira.phylax.features.access.tenanttermsofuse.application.request.TenantTermsOfUseStateChange;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.attachedretrieve.TenantTermsOfUseAttachedRetrieveUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.attachedupload.TenantTermsOfUseAttachedTemporalUploadUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.create.TenantTermsOfUseCreateUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.delete.TenantTermsOfUseCheckBatchDeleteStatus;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.delete.TenantTermsOfUseDeleteUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.list.TenantTermsOfUseListUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.retrieve.TenantTermsOfUseRetrieveUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.application.usecase.update.TenantTermsOfUseUpdateUsecase;
import net.civeira.phylax.features.access.tenanttermsofuse.query.TenantTermsOfUseCursor;
import net.civeira.phylax.features.access.tenanttermsofuse.query.TenantTermsOfUseFilter;
import net.civeira.phylax.generated.openapi.api.TenantTermsOfUseApi;
import net.civeira.phylax.generated.openapi.model.TenantApiRef;
import net.civeira.phylax.generated.openapi.model.TenantTermsOfUseApiDto;
import net.civeira.phylax.generated.openapi.model.TenantTermsOfUseApiDtoList;

@RequiredArgsConstructor
public class TenantTermsOfUseController implements TenantTermsOfUseApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String LIMIT_APPEND = "&since-uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String SEARCH_APPEND = "&search=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String TENANTS_A_P_P_E_N_D = "&tenants=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private static final String UID_APPEND = "&uid=";

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantTermsOfUseCreateUsecase create;

  /**
   * TenantTermsOfUse
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantTermsOfUseDeleteUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantTermsOfUseListUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantTermsOfUseRetrieveUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantTermsOfUseAttachedRetrieveUsecase retrieveAttachedUploadUsecase;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantTermsOfUseAttachedTemporalUploadUsecase tempAttachedUploadUsecase;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final TenantTermsOfUseUpdateUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param tenants
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiBatchDelete(final List<String> uids, final String search,
      final List<String> tenants) {
    TenantTermsOfUseFilter.TenantTermsOfUseFilterBuilder filterBuilder =
        TenantTermsOfUseFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    TenantTermsOfUseFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(currentRequest.interaction(), filter);
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(TenantTermsOfUseCheckBatchDeleteStatus.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenantTermsOfUse
   * @return
   */
  @Override
  @Transactional
  public Response tenantTermsOfUseApiCreate(TenantTermsOfUseApiDto tenantTermsOfUse) {
    TenantTermsOfUseStateProyection created =
        create.create(currentRequest.interaction(), toDomainModel(tenantTermsOfUse));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response tenantTermsOfUseApiDelete(final String uid) {
    delete.delete(currentRequest.interaction(), TenantTermsOfUseReference.of(uid));
    return Response.noContent().build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param tenants
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiList(final List<String> uids, final String search,
      final List<String> tenants, final Integer limit, final String sinceUid) {
    TenantTermsOfUseFilter.TenantTermsOfUseFilterBuilder filterBuilder =
        TenantTermsOfUseFilter.builder();
    TenantTermsOfUseCursor.TenantTermsOfUseCursorBuilder cursorBuilder =
        TenantTermsOfUseCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder
        .tenants(tenants.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    TenantTermsOfUseFilter filter = filterBuilder.build();
    TenantTermsOfUseCursor cursor = cursorBuilder.build();
    List<TenantTermsOfUseStateProyection> listed =
        list.list(currentRequest.interaction(), filter, cursor);
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "tenant-terms-of-use-" + ("" + filter + cursor).hashCode());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiRetrieve(final String uid) {
    TenantTermsOfUseStateProyection retrieved =
        retrieve.retrieve(currentRequest.interaction(), TenantTermsOfUseReference.of(uid));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiRetrieveAttached(final String uid) {
    BinaryContent stream = retrieveAttachedUploadUsecase.read(currentRequest.interaction(),
        TenantTermsOfUseReference.of(uid));
    String encodedFilename = URLEncoder.encode(stream.getName(), StandardCharsets.UTF_8);
    return Response.ok(stream.getInputStream()).header("Content-type", stream.getContentType())
        .header("Content-Disposition", "attachment; filename*=UTF-8''" + encodedFilename).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param temp
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiRetrieveTempUploadAttached(final String temp) {
    BinaryContent stream = tempAttachedUploadUsecase.read(currentRequest.interaction(), temp);
    return Response.ok(stream.getInputStream()).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param tenantTermsOfUse
   * @return
   */
  @Override
  @Transactional
  public Response tenantTermsOfUseApiUpdate(final String uid,
      final TenantTermsOfUseApiDto tenantTermsOfUse) {
    TenantTermsOfUseStateProyection updated = update.update(currentRequest.interaction(),
        TenantTermsOfUseReference.of(uid), toDomainModel(tenantTermsOfUse));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param file
   * @param fileName
   * @param fileType
   * @return
   */
  @Override
  public Response tenantTermsOfUseApiUploadTempUploadAttached(final InputStream file,
      final String fileName, final String fileType) {
    String key = tempAttachedUploadUsecase.upload(currentRequest.interaction(),
        BinaryContent.builder().name(fileName).contentType(fileType)
            .lastModification(System.currentTimeMillis()).inputStream(file).build());
    return Response.ok(currentRequest.getPublicHost()
        + "/api/access/tenants-terms-of-use/-/temp-attached?temp=" + key).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private TenantTermsOfUseApiDto toApiModel(TenantTermsOfUseStateProyection dto) {
    TenantTermsOfUseApiDto tenantTermsOfUseApiDto = new TenantTermsOfUseApiDto();
    tenantTermsOfUseApiDto.setUid(dto.getUid().orElse(null));
    tenantTermsOfUseApiDto.setTenant(
        new TenantApiRef().$ref(dto.getTenant().map(TenantRef::getUidValue).orElse(null)));
    tenantTermsOfUseApiDto.setText(dto.getText().orElse(null));
    String attached = dto.getAttached().orElse(null);
    if (null != attached) {
      tenantTermsOfUseApiDto.setAttached(currentRequest.getPublicHost()
          + "/api/access/tenants-terms-of-use/" + dto.getUid().orElse("-") + "/attached");
    }
    tenantTermsOfUseApiDto.setActivationDate(dto.getActivationDate().orElse(null));
    tenantTermsOfUseApiDto.setVersion(dto.getVersion().orElse(null));
    return tenantTermsOfUseApiDto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenantTermsOfUseApiDto
   * @return
   */
  private TenantTermsOfUseStateChange toDomainModel(TenantTermsOfUseApiDto tenantTermsOfUseApiDto) {
    TenantTermsOfUseStateChange dto = new TenantTermsOfUseStateChange();
    if (null != tenantTermsOfUseApiDto.getUid()) {
      dto.setUid(tenantTermsOfUseApiDto.getUid());
    }
    if (null != tenantTermsOfUseApiDto.getTenant()) {
      dto.setTenant(TenantReference.of(tenantTermsOfUseApiDto.getTenant().get$Ref()));
    }
    if (null != tenantTermsOfUseApiDto.getText()) {
      dto.setText(tenantTermsOfUseApiDto.getText());
    }
    if (!StringUtils.isBlank(tenantTermsOfUseApiDto.getAttached())) {
      String url = tenantTermsOfUseApiDto.getAttached();
      if (tenantTermsOfUseApiDto.getAttached().startsWith(currentRequest.getPublicHost()
          + "/api/access/tenants-terms-of-use/-/temp-attached?temp=")) {
        dto.setAttached("temp://" + (url.substring((currentRequest.getPublicHost()
            + "/api/access/tenants-terms-of-use/-/temp-attached?temp=").length())));
      } else if (!(url.equals(currentRequest.getPublicHost() + "/api/access/tenants-terms-of-use/"
          + tenantTermsOfUseApiDto.getUid() + "/attached"))) {
        dto.setAttached(tenantTermsOfUseApiDto.getAttached());
      }
    }
    if (null != tenantTermsOfUseApiDto.getActivationDate()) {
      dto.setActivationDate(tenantTermsOfUseApiDto.getActivationDate());
    }
    if (null != tenantTermsOfUseApiDto.getVersion()) {
      dto.setVersion(tenantTermsOfUseApiDto.getVersion());
    }
    return dto;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param tenantTermsOfUses
   * @param filter
   * @param cursor
   * @return
   */
  private TenantTermsOfUseApiDtoList toListApiModel(
      List<TenantTermsOfUseStateProyection> tenantTermsOfUses, TenantTermsOfUseFilter filter,
      TenantTermsOfUseCursor cursor) {
    Optional<TenantTermsOfUseStateProyection> last = tenantTermsOfUses.isEmpty() ? Optional.empty()
        : Optional.of(tenantTermsOfUses.get(tenantTermsOfUses.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append(UID_APPEND + uidsValue);
      next.append(UID_APPEND + uidsValue);
      first.append(UID_APPEND + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append(SEARCH_APPEND + searchValue);
      next.append(SEARCH_APPEND + searchValue);
      first.append(SEARCH_APPEND + searchValue);
    });
    if (!filter.getTenants().isEmpty()) {
      String tenantsValue =
          URLEncoder.encode(String.join(",", filter.getTenants()), StandardCharsets.UTF_8);
      self.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      next.append(TENANTS_A_P_P_E_N_D + tenantsValue);
      first.append(TENANTS_A_P_P_E_N_D + tenantsValue);
    }
    cursor.getLimit().ifPresent(limit -> {
      self.append(LIMIT_APPEND + limit);
      first.append(LIMIT_APPEND + limit);
      next.append(LIMIT_APPEND + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append(LIMIT_APPEND + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    last.ifPresent(lastDto -> lastDto.getUid().ifPresent(
        uid -> next.append(LIMIT_APPEND + URLEncoder.encode(uid, StandardCharsets.UTF_8))));
    return new TenantTermsOfUseApiDtoList()
        .items(tenantTermsOfUses.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }
}
