package net.civeira.phylax.features.access.useridentity.application.usecase.retrieve;

import java.util.List;
import java.util.Optional;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyRef;
import net.civeira.phylax.features.access.trustedclient.domain.TrustedClientRef;
import net.civeira.phylax.features.access.user.domain.UserRef;
import net.civeira.phylax.features.access.useridentity.application.visibility.UserIdentityVisibleProjection;
import net.civeira.phylax.features.access.useridentity.domain.Roles;
import net.civeira.phylax.features.access.useridentity.domain.UserIdentity;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.RelyingPartyVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.RolesVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.TrustedClientVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.UserVO;
import net.civeira.phylax.features.access.useridentity.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold user identity attribute values
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class UserIdentityRetrieveProjection {

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated RetrieveProjectionGenerator
   * @param visible The entity who provide values.
   * @return
   */
  public static UserIdentityRetrieveProjection from(final UserIdentityVisibleProjection visible) {
    UserIdentityRetrieveProjection instance = new UserIdentityRetrieveProjection();
    instance.uidValue = visible.getUid();
    instance.userValue = visible.getUser();
    instance.relyingPartyValue = visible.getRelyingParty();
    instance.trustedClientValue = visible.getTrustedClient();
    instance.rolesValue = visible.getRoles();
    instance.versionValue = visible.getVersion();
    return instance;
  }

  /**
   * El relying party de user identity
   *
   * @autogenerated RetrieveProjectionGenerator
   */
  private Optional<RelyingPartyVO> relyingPartyValue;

  /**
   * El roles de user identity
   *
   * @autogenerated RetrieveProjectionGenerator
   */
  private Optional<RolesVO> rolesValue;

  /**
   * El trusted client de user identity
   *
   * @autogenerated RetrieveProjectionGenerator
   */
  private Optional<TrustedClientVO> trustedClientValue;

  /**
   * A uid string to identify the entity
   *
   * @autogenerated RetrieveProjectionGenerator
   */
  private Optional<UidVO> uidValue;

  /**
   * El user de user identity
   *
   * @autogenerated RetrieveProjectionGenerator
   */
  private Optional<UserVO> userValue;

  /**
   * Campo con el n√∫mero de version de user identity para controlar bloqueos optimistas
   *
   * @autogenerated RetrieveProjectionGenerator
   */
  private Optional<VersionVO> versionValue;

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated RetrieveProjectionGenerator
   * @param entity The entity who provide values.
   */
  public UserIdentityRetrieveProjection(final UserIdentity entity) {
    uidValue = Optional.of(entity.getUidValue());
    userValue = Optional.of(entity.getUserValue());
    relyingPartyValue = Optional.of(entity.getRelyingPartyValue());
    trustedClientValue = Optional.of(entity.getTrustedClientValue());
    rolesValue = Optional.of(entity.getRolesValue());
    versionValue = Optional.of(entity.getVersionValue());
  }

  /**
   * Inform for a possible change propolsal in RelyingParty
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for RelyingParty, otherwise the value for
   *         RelyingParty
   */
  public RelyingPartyRef getRelyingParty() {
    return relyingPartyValue.flatMap(RelyingPartyVO::getRelyingParty).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in RelyingParty
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for RelyingParty, otherwise the value for
   *         RelyingParty
   */
  public String getRelyingPartyReference() {
    return getRelyingPartyReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in RelyingParty
   *
   * @autogenerated RetrieveProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for RelyingParty, otherwise the value for
   *         RelyingParty
   */
  public String getRelyingPartyReferenceOrDefault(final String orDefault) {
    return relyingPartyValue.flatMap(RelyingPartyVO::getRelyingParty).map(RelyingPartyRef::getUid)
        .orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Roles
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for Roles, otherwise the value for Roles
   */
  public List<Roles> getRoles() {
    return rolesValue.map(RolesVO::getRoles).orElseGet(List::of);
  }

  /**
   * Inform for a possible change propolsal in TrustedClient
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for TrustedClient, otherwise the value for
   *         TrustedClient
   */
  public TrustedClientRef getTrustedClient() {
    return trustedClientValue.flatMap(TrustedClientVO::getTrustedClient).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in TrustedClient
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for TrustedClient, otherwise the value for
   *         TrustedClient
   */
  public String getTrustedClientReference() {
    return getTrustedClientReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in TrustedClient
   *
   * @autogenerated RetrieveProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for TrustedClient, otherwise the value for
   *         TrustedClient
   */
  public String getTrustedClientReferenceOrDefault(final String orDefault) {
    return trustedClientValue.flatMap(TrustedClientVO::getTrustedClient)
        .map(TrustedClientRef::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUid() {
    return getUidOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated RetrieveProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public String getUidOrDefault(final String orDefault) {
    return uidValue.map(UidVO::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in User
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for User, otherwise the value for User
   */
  public UserRef getUser() {
    return userValue.map(UserVO::getUser).orElse(null);
  }

  /**
   * Inform for a possible change propolsal in User
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for User, otherwise the value for User
   */
  public String getUserReference() {
    return getUserReferenceOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in User
   *
   * @autogenerated RetrieveProjectionGenerator
   * @param orDefault
   * @return empty if there is no change proposal for User, otherwise the value for User
   */
  public String getUserReferenceOrDefault(final String orDefault) {
    return userValue.map(UserVO::getUser).map(UserRef::getUid).orElse(orDefault);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated RetrieveProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersion() {
    return getVersionOrDefault(null);
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated RetrieveProjectionGenerator
   * @param orDefault Default value if is null
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Integer getVersionOrDefault(final Integer orDefault) {
    return versionValue.flatMap(VersionVO::getVersion).orElse(orDefault);
  }
}
