package net.civeira.phylax.features.access.relyingparty.application.visibility;

import java.util.NoSuchElementException;
import java.util.Optional;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingParty;
import net.civeira.phylax.features.access.relyingparty.domain.RelyingPartyReference;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.ApiKeyVO;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.CodeVO;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.EnabledVO;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.UidVO;
import net.civeira.phylax.features.access.relyingparty.domain.valueobject.VersionVO;

/**
 * A dto transfer to hold relying party attribute values
 */
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RelyingPartyVisibleProjection {

  /**
   * A identification for the aplication
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<ApiKeyVO> apiKey = Optional.empty();

  /**
   * El código identificativo de la aplicación
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<CodeVO> code = Optional.empty();

  /**
   * Una marca que permite quitar el acceso a una cuenta sin borrarla
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<EnabledVO> enabled = Optional.empty();

  /**
   * El identificador de la aplicacion
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<UidVO> uid = Optional.empty();

  /**
   * Campo con el número de version de relying party para controlar bloqueos optimistas
   *
   * @autogenerated VisibleProjectionGenerator
   */
  @Builder.Default
  private Optional<VersionVO> version = Optional.empty();

  /**
   * Create a dto instance with all the values of an entity
   *
   * @autogenerated VisibleProjectionGenerator
   * @param entity The entity who provide values.
   */
  public RelyingPartyVisibleProjection(final RelyingParty entity) {
    uid = Optional.of(entity.getUidValue());
    code = Optional.of(entity.getCodeValue());
    apiKey = Optional.of(entity.getApiKeyValue());
    enabled = Optional.of(entity.getEnabledValue());
    version = Optional.of(entity.getVersionValue());
  }

  /**
   * Create a reference for relying party with his inner assigned value.
   *
   * @autogenerated VisibleProjectionGenerator
   * @throws NoSuchElementException If no uid is set with a value
   * @return A reference if the direct reference build from stored value, otherwise an exception
   *         will be thrown.
   */
  public RelyingPartyReference asReference() throws NoSuchElementException {
    return uid.map(UidVO::getUid).map(RelyingPartyReference::of).orElseThrow();
  }

  /**
   * Inform for a possible change propolsal in ApiKey
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for ApiKey, otherwise the value for ApiKey
   */
  public Optional<ApiKeyVO> getApiKey() {
    return apiKey;
  }

  /**
   * Inform for a possible change propolsal in Code
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Code, otherwise the value for Code
   */
  public Optional<CodeVO> getCode() {
    return code;
  }

  /**
   * Inform for a possible change propolsal in Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Enabled, otherwise the value for Enabled
   */
  public Optional<EnabledVO> getEnabled() {
    return enabled;
  }

  /**
   * Inform for a possible change propolsal in Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Uid, otherwise the value for Uid
   */
  public Optional<UidVO> getUid() {
    return uid;
  }

  /**
   * Inform for a possible change propolsal in Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return empty if there is no change proposal for Version, otherwise the value for Version
   */
  public Optional<VersionVO> getVersion() {
    return version;
  }

  /**
   * Assigna change proposal for ApiKey to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RelyingPartyVisibleProjection
   * @return self instance to enable a flow code
   */
  public RelyingPartyVisibleProjection setApiKey(final String value) {
    this.apiKey = Optional.of(ApiKeyVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Code to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RelyingPartyVisibleProjection
   * @return self instance to enable a flow code
   */
  public RelyingPartyVisibleProjection setCode(final String value) {
    this.code = Optional.of(CodeVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Enabled to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RelyingPartyVisibleProjection
   * @return self instance to enable a flow code
   */
  public RelyingPartyVisibleProjection setEnabled(final Boolean value) {
    this.enabled = Optional.of(EnabledVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Uid to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RelyingPartyVisibleProjection
   * @return self instance to enable a flow code
   */
  public RelyingPartyVisibleProjection setUid(final String value) {
    this.uid = Optional.of(UidVO.from(value));
    return this;
  }

  /**
   * Assigna change proposal for Version to be apply for the aggregate.
   *
   * @autogenerated VisibleProjectionGenerator
   * @param value The proposal value for RelyingPartyVisibleProjection
   * @return self instance to enable a flow code
   */
  public RelyingPartyVisibleProjection setVersion(final Integer value) {
    this.version = Optional.of(VersionVO.from(value));
    return this;
  }

  /**
   * Unset a value by the property name. Unset values will no provide command change neither provide
   * information to the output context (hidden or readonly fields, or policy restrictions).
   *
   * @autogenerated VisibleProjectionGenerator
   * @param field The field name to unset.
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("code".equals(field)) {
      this.unsetCode();
    }
    if ("apiKey".equals(field)) {
      this.unsetApiKey();
    }
    if ("enabled".equals(field)) {
      this.unsetEnabled();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * Remove the change propolsal for ApiKey
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RelyingPartyVisibleProjection unsetApiKey() {
    this.apiKey = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Code
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RelyingPartyVisibleProjection unsetCode() {
    this.code = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Enabled
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RelyingPartyVisibleProjection unsetEnabled() {
    this.enabled = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Uid
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RelyingPartyVisibleProjection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * Remove the change propolsal for Version
   *
   * @autogenerated VisibleProjectionGenerator
   * @return self instance to enable a flow code.
   */
  public RelyingPartyVisibleProjection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
