package net.civeira.phylax.features.access.loginprovider.rule;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;
import net.civeira.phylax.features.access.loginprovider.LoginProvider;
import net.civeira.phylax.features.access.loginprovider.LoginProviderMetadataProvider;
import net.civeira.phylax.features.access.loginprovider.transition.LoginProviderChangeProposal;
import net.civeira.phylax.features.access.loginprovider.transition.create.LoginProviderCreateStep;
import net.civeira.phylax.features.access.loginprovider.transition.create.LoginProviderCreateTransition;
import net.civeira.phylax.features.access.loginprovider.transition.update.LoginProviderUpdateStep;
import net.civeira.phylax.features.access.loginprovider.transition.update.LoginProviderUpdateTransition;
import net.civeira.phylax.features.access.loginprovider.valueobject.DisabledVO;

@ApplicationScoped
@RequiredArgsConstructor
public class PreserveDisabled
    implements LoginProviderMetadataProvider, LoginProviderCreateStep, LoginProviderUpdateStep {

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveDisabled
   * @return
   */
  @Override
  public LoginProvider create(final LoginProviderCreateTransition transition,
      final Function<LoginProviderCreateTransition, LoginProvider> next) {
    return next.apply(transition.map(calculate(transition.getData(), Optional.empty())));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @return
   */
  @Override
  public Set<String> readonlyFields() {
    return Set.of("disabled");
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param transition
   * @param next PreserveDisabled
   * @return
   */
  @Override
  public LoginProvider update(final LoginProviderUpdateTransition transition,
      final Function<LoginProviderUpdateTransition, LoginProvider> next) {
    return next.apply(
        transition.map(calculate(transition.getData(), Optional.of(transition.getOriginal()))));
  }

  /**
   * @autogenerated FormulaEntityRuleImplGenerator
   * @param attributes
   * @param original
   * @return
   */
  private LoginProviderChangeProposal calculate(final LoginProviderChangeProposal attributes,
      final Optional<LoginProvider> original) {
    return attributes.setDisabled(original.map(LoginProvider::getDisabled)
        .flatMap(DisabledVO::getValue).orElseGet(() -> false));
  }
}
