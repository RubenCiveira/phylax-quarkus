package net.civeira.phylax.features.access.tenantconfig.application.projection;

import java.util.Optional;

import net.civeira.phylax.features.access.tenant.TenantRef;
import net.civeira.phylax.features.access.tenantconfig.TenantConfig;

public class TenantConfigStateProyection {

  /**
   * Indicates if Multi-Factor Authentication (MFA) is enforced for the tenant.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Boolean> forceMfa = Optional.empty();

  /**
   * A customizable label that tenants can use to personalize the application UI.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> innerLabel = Optional.empty();

  /**
   * The tenant this configuration applies to.
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<TenantRef> tenant = Optional.empty();

  /**
   * A uid string to identify the entity
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<String> uid = Optional.empty();

  /**
   * Campo con el n√∫mero de version de tenant config para controlar bloqueos optimistas
   *
   * @autogenerated EntityStateProyectionGenerator
   */
  private Optional<Integer> version = Optional.empty();

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param entity
   */
  public TenantConfigStateProyection(final TenantConfig entity) {
    uid = Optional.of(entity.getUid().getValue());
    tenant = Optional.of(entity.getTenant().getValue());
    innerLabel = entity.getInnerLabel().getValue();
    forceMfa = Optional.of(entity.getForceMfa().getValue());
    version = entity.getVersion().getValue();
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Boolean> getForceMfa() {
    return forceMfa;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getInnerLabel() {
    return innerLabel;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<TenantRef> getTenant() {
    return tenant;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<String> getUid() {
    return uid;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public Optional<Integer> getVersion() {
    return version;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantConfigStateProyection setForceMfa(final Optional<Boolean> value) {
    this.forceMfa = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantConfigStateProyection setInnerLabel(final Optional<String> value) {
    this.innerLabel = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantConfigStateProyection setTenant(final Optional<TenantRef> value) {
    this.tenant = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantConfigStateProyection setUid(final Optional<String> value) {
    this.uid = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param value
   * @return
   */
  public TenantConfigStateProyection setVersion(final Optional<Integer> value) {
    this.version = value;
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @param field
   */
  public void unset(final String field) {
    if ("uid".equals(field)) {
      this.unsetUid();
    }
    if ("tenant".equals(field)) {
      this.unsetTenant();
    }
    if ("innerLabel".equals(field)) {
      this.unsetInnerLabel();
    }
    if ("forceMfa".equals(field)) {
      this.unsetForceMfa();
    }
    if ("version".equals(field)) {
      this.unsetVersion();
    }
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantConfigStateProyection unsetForceMfa() {
    this.forceMfa = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantConfigStateProyection unsetInnerLabel() {
    this.innerLabel = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantConfigStateProyection unsetTenant() {
    this.tenant = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantConfigStateProyection unsetUid() {
    this.uid = Optional.empty();
    return this;
  }

  /**
   * @autogenerated EntityStateProyectionGenerator
   * @return
   */
  public TenantConfigStateProyection unsetVersion() {
    this.version = Optional.empty();
    return this;
  }
}
